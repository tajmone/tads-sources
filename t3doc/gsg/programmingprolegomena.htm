<html><head><meta name="generator" content="Help & Manual 2.7.0"><title>Programming Prolegomena</title><meta name="keywords" content="Objects,objects, nested,objects, anonymous,property,method,class,function,if,else,true,nil,switch,case,ShuffledList,nested objects,anonymous objects"></meta>

<link rel="stylesheet" href="main.css" type="text/css"></link>
</head>
<body>
<div class="topbar"><a href="index.html"><img src="topbar.jpg" border=0></a></div>

<div class="main">
<P><FONT SIZE=-1><a href="index.html">[Main]</a><BR>
<I><a href="creatingyourfirsttads3project.htm">[Previous] </a>&nbsp;&nbsp;<a href="furtherprogramming.htm">[Next] </a></I></FONT></P>
<h2>Programming Prolegomena</h2>

<p>Many readers may prefer to skip this section altogether and dive straight into the more interesting business of writing a game. But if you are completely new to programming in TADS (or TADS 3) you may appreciate a brief introduction to some of the basic ground rules. This section makes no attempt to give a comprehensive or systematic account of the TADS 3 language, but simply introduces some of the things you will be meeting in this <i>Getting Started </i>Guide.
</p>
<h3>a. Overview of Basic Concepts</h3>
<p>Writing a game in TADS 3 requires two different styles of programming: <i>declarative</i> and <i>procedural</i>. <i>Declarative</i> programming is largely a matter of defining <i>objects</i> and setting their <i>properties</i> (see below). Setting the properties of objects means giving them <i>values</i>; a <i>value</i> may typically be a number, a string (i.e. a piece of text) or another object. Since adv3, the library that comes with TADS 3, is so rich, you can achieve a great deal in TADS 3 with declarative programming alone.
</p>

<p>
<i>Procedural</i> programming involves writing a sequence of <i>statements</i>. Each <i>statement</i> is an instruction that you want your game to carry out. Statements may typically assign a value to a <i>variable</i> or property, or call a <i>function</i> or <i>method</i>. A <i>variable</i> is a kind of temporary store for a value; a property can act as a more permanent store.
</p>

<p>
With one or two exceptions we needn't worry about here, statements can appear only in <i>functions</i> and <i>methods</i>; there needs to be some context in which they are executed. Similarly, <i>variables</i> can only be used in <i>functions</i> and <i>methods</i>; all TADS 3 variables are thus <i>local</i> variables (see further below).
</p>

<p>
A <i>function</i> is a kind of wrapper for a group of related statements you want to be executed together. An individual function is usually designed to carry out one specific task (although it may be a highly complex task involving many individual steps). The process of telling TADS 3 that we want a function to carry out its task is known as <i>calling</i> or <i>invoking</i> the function (the two terms are synonymous).
</p>

<p>
A <i>method</i> is similar to a function, but is associated with a particular <i>object</i>. A function can be invoked (i.e. called) simply using its name (e.g. the statement <span class=code>foo()</span> will invoke the function named <span class= code>foo</span>), whereas invoking a method generally requires specifying the name of the object to which it belongs as well (e.g. <span class=code>foo.bar()</span> would invoke the bar method of the <span class=code>foo</span> object). The exception is when a method is invoked from another method of the same object.
</p>
<h3>b. Objects</h3>
<p>Broadly speaking, most programming in TADS consists of defining <i>objects</i> (although you may also find yourself defining classes, functions, and one or two other things, but we'll leave those to one side for the moment). An object may be an object in the physical sense of something that appears in your game world, such as a spade, a cottage, or a shopkeeper, but it may also be a more abstract construct designed to do some job or other in your code. Examples of some of abstract objects we shall be encountering include ActorStates that help describe how an actor behaves under particular circumstances, and TopicEntries that define how an actor responds to various questions.
</p>

<p>
Objects generally belong in some form of <i>containment hierarchy. </i>For physical objects this usually represents the notional containment relationships in your game world. At the top of the hierarchy are the rooms (locations) that make up the map of your world. Each individual room may contain a number of objects, such as tables, chairs, rocks, boxes and the like, as well as actors such as the player character (PC) and non-player characters (NPCs). These in turn may 'contain' further objects (and so on). For example, if there is coin inside one of the boxes, the coin is contained by the box, just as the box is contained by the room. 'Containment' is, however, a slightly more general relation than this example might suggest. For example, if a pen is sitting on the table, then the table is considered to be the pen's container. Anything held (or worn) by an actor is considered to be contained by the actor. So, for example, if the PC picks up one of the rocks, that rock's container changes from the room to the PC. If the PC then puts one of the boxes on the table, the box is now 'contained' by the table instead of directly by the room (although it remains indirectly contained by the room). At this point the coin is contained by the box, but is also 'in' the table and the room. In TADS 3 the immediately container of an object is always specified in its <span class=code>location</span> property.
</p>

<p>
Containment may also be used to relate abstract objects. For example, menu items may be contained in a menu, or an actor may 'contain' abstract objects such as ActorStates and TopicEntries (these will be explained in due course) as well as physical objects being carried around by the actor.
</p>

<p>
Typically an object definition begins with the name of an object, followed by a colon, followed by a class list, followed by a list of its <i>properties</i> and <i>methods</i>:
</p>
<pre><span class=code>  myObj: Thing
      name = 'boring object'
      changeName
      {
        name = 'even more boring object';
      }
  ;
</span></pre>
<p>
In this definition <span class=code>name</span> is a <i>property</i> of <span class=code>myObj</span>, <span class=code>changeName</span> is a <i>method</i> and <span class=code>Thing</span> is the <i>class</i> (or <i>superclass</i> or <i>base class</i>) of the object. The functional difference between a <i>property</i> and a <i>method</i> is that properties hold values while methods contain code: a list of one or more statements that do something when the method is invoked. The syntactical difference is that the name of a property is separated from its value by an equals sign (=) while that of a method is not, the statements that make up the method being enclosed in braces { }.
</p>

<p>
A further point of syntax to note is the use of the semicolon. This is used (a) to terminate the object definition, and (b) to terminate statements. It is <i>not</i> used to terminate property definitions (a very, very easy mistake to make). Although they look very similar, the line <span class=code>name&nbsp;=&nbsp;'boring&nbsp;object'</span> is a property definition that means "define a <span class=code>name</span> property on <span class=code>myObj</span> and set its initial value to 'boring object'", while the statement within the <span class=code>changeName</span> method, i.e. <span class=code>name&nbsp;=&nbsp;'even&nbsp;more&nbsp;boring&nbsp;object';&nbsp;</span>is an assignment statement that means "change the value of the already existing value of the <span class=code>name</span> property to 'even more boring object'."
</p>

<p>
Note that you could use braces instead of a terminating semicolon to define the extent of the object definition; the foregoing object definition could then have been written:
</p>
<pre><span class=code>  myObj: Thing
  {
      name = 'boring object'
      changeName
      {
        name = 'even more boring object';
      }
  }</span></pre>

<p>Which you use is up to you, but this <i>Guide</i> will use the terminating semicolon.
<br>
<h3>c. Assignment Statements</h3>
<p>An assignment statement is probably one of the most common kinds of statement that you will come across in TADS 3 programming. It always takes the form:
</p>
<pre><span class=code>  lvalue = expression;
</pre></span>

<p>Where <span class=code>lvalue&nbsp;</span>can be either an object property or a variable (which we'll talk about in just a bit). An expression can be as simple as a constant value or the name of another variable, a function call or method name (assuming the function or method returns a suitable value), or a more complex expression involving a number of the foregoing elements joined together with <i>operators</i>, for example:
</p>
<pre><span class=code>  myName = 'my ' + name;
</pre></span>
<p>As a statement this would assign the value 'my boring object' to the variable <span class=code>myName</span> (assuming that <span class=code>name&nbsp;</span>started off by holding the value 'boring object'). Note that an expression can also be used as the value of a <i>property</i> (in which case it should be enclosed in parentheses), so that if we made <span class=code>myName</span> a <i>property</i> of <span class=code>myObj</span>, we could definine it thus:
<pre><span class=code>  myObj: Thing
      name = 'boring object'
      changeName
      {
        name = 'even more boring object';
      }
      myName = ('my ' + name)
  ;
</span></pre>
<p>This definition would mean that <span class=code>myName</span> contained 'my boring object' until the <span class=code>changeName</span> method was invoked, and would contain 'my even more boring object' afterwards (we'll talk about invoking methods presently). In fact, it is, except for its appearance, <i>exactly</i> the same as writing:
<pre><span class=code>  myName  { return 'my ' + name; }
</pre></span>
<p>When it is used with (single-quoted) strings, + is thus a concatenation operator. With numbers it does what you would expect, i.e. add them together, e.g.:
</p>
<pre><span class=code>  myNumber = 3 + 4;
</span></pre>
<p>Would assign the number 7 to <span class=code>myNumber</span>. All the numbers we'll be dealing with in this Guide will be <i>integers</i> (i.e. whole numbers); TADS 3 does possess a <span class=code>BigNumber</span> class that allows you to work with real numbers (i.e. numbers including a fractional part, such as 3.14159), but most Interactive Fiction can get by quite happily with standard integer arithmetic.
</p>

<p>
Other common arithmetic operators include -, * and / (subtract, multiply and divide) which do much what you would expect (note that the division is integer division, so that <span class=code>myNumber = 3 / 4 </span>would set <span class=code>myNumber</span> to zero, while <span class=code>myNumber = 10 / 4 </span>would set it to 2). Less obvious but almost just as common and useful are the various shortcut operators that provide a more concise way of coding common operations. There are several of these, but the only ones we need deal with here are +=  -=  ++ and --. It is quite common in programming to want to add or subtract a number from the current value of a variable or property and store the result in the same variable or property, e.g.:
</p>
<pre><span class=code>  myNumber = myNumber + 4;
  myNumber = myNumber - 2;
</span></pre>
<p>If <span class=code>myNumber</span> started out at 6, then after the first line was executed, myNumber would be changed to 10, and after the second line was executed, it would be changed to 8. This could be written more succinctly as:
</p>
<pre><span class=code>  myNumber += 4;
  myNumber -= 2;
</pre></span>
<p>This may look a litle strange at first, but it's a highly convenient feature once you get the hang of it. Another one is the use of ++ or -- to increase or reduce a property or variable by one. Thus intead of writing <span class=code>myNumber = myNumber + 1</span> or even <span class=code>myNumber+=1</span> one could write simply <span class=code>myNumber++</span>; likewise one could use <span class=code>myNumber--&nbsp;</span>in place of <span class=code>myNumber&nbsp;=&nbsp;myNumber&nbsp;-&nbsp;1</span>.
</p>

<p>
In these examples, <span class=code>myNumber</span> could be either a property or a variable. In TADS 3 programming properties tend to be used for semi-permanent storage of information you need to be available to the whole program, while variables are local in scope and temporary in duration, used, for example, to hold the results of some intermediate calculation (there are some library defined quanties of the form <span class=code>gWhatsit&nbsp;</span>that look like global variables, but these are simply shorthand ways of referring to some commonly used property of a library object). Being local in <i>scope</i> means that the variable is available only to code within the same block (usually the same method or function) as that in which the variable is defined; being temporary in <i>duration</i> means that the variable only retains its value for that particular invocation of the function or method. A variable must be declared with the keyword <span class=code>local</span> in the block in which it appears, and may optionally be initialized in the same statement in which it is initialized, e.g.:
</p>
<pre><span class=code>  local x;
  local numberOfCabbageEaters = 12;
</span></pre>
<h3>d. Referring to Methods and Properties</h3>

<p>Variables, and indeed statements, are generally used within object methods and global functions. But how are the functions and methods used in turn? Often the library will expect a method to be defined on an object you create and will invoke (call) it under the appropriate circumstances; moreover, you can often use a method in place of a property when you want to do something more complex than you can do with a property; then, when the library tries to (say) display the value of the <span class=code>name</span> property it may quite happily use the value returned by the <span class=code>name</span> method instead. If you've defined a method <span class=code>myMethod</span> on an object <span class=code>myObj</span> you can invoke it from anywhere in your code by writing the statement:
</p>
<pre><span class=code>  myObj.myMethod;</span></pre>
&nbsp;&nbsp;or
&nbsp;<br>
<pre><span class=code>  myObj.myMethod();
&nbsp;</span></pre>
<p>Similarly, you can reference the value of the <span class=code>myProperty</span> property of <span class=code>myObj</span> with <span class=code>myObj.myProperty</span>. Note the use of the dot (.) notation here, since you will be using it a lot.
<br>

<br>
In TADS 2 (or Inform 6), if you wanted to reference <span class=code>myObj.myMethod()</span> or <span class=code>myObj.myProperty</span> from another property or method of <span class=code>myObj</span> you would typically write <span class=code>self.myMethod()</span> or <span class=code>self.myProperty(),&nbsp;</span>where <span class=code>self</span> is a special keyword meaning "the current object". There are still situations where you may need to use the <span class=code>self</span> keyword in TADS 3 but this is no longer one of them; instead, in this situation, you could write simply, <span class=code>myMethod()</span> or <span class=code>myProperty</span>. To make this clearer, we'll give an example:
<br>
<pre><span class=code>myObj: Thing
    name = 'boring object'
    changeName
    {
        name = 'very boring object';
    }
    myName = ('my ' + name)
;

myOtherObject: Thing
    name = 'exciting object'
    describeName
    {
        local dName = 'This is an ' + name + ', unlike ';
        myObj.changeName;
        dName += myObj.myName;
        say(dName);
        return dName;
    }
;
</span></pre>

<p>In this example, a call to <span class=code>myOtherObj.describeName</span> should result in the display of the message "This is an exciting object, unlike my very boring object"; moreover, if you wrote a statement such as <span class=code>msg&nbsp;=&nbsp;myOtherObj.describeName</span>, not only would "This is an exciting object, unlike my very boring object" be displayed, but the string 'This is an exciting object, unlike my very boring object' would be stored in the variable <span class=code>msg</span>. This comes about because the last statement of <span class=code>describeName</span> tells the method to return a value (in this case the value of the local variable <span class=code>dName</span>), and this value will be treated as the value of the method if it is used in an expression.
</p>

<h3>e. Functions and Methods</h3>
<p>Functions may return values in similar ways. The purpose of using a function is typically to perform an often-used calculation that is not related to any particular object, e.g.:
</p>
<pre><span class=code>function salesTax(salesValue, taxPercent)
{
    return (salesValue * taxPercent)/100;
}
</span></pre>

<p>The <span class=code>function</span> keyword used here is optional but perhaps makes the code clearer, although it is more usual to omit it in TADS 3 code. Note that in this example, unless we're using the <span class=code>BigNumber</span> class, <span class=code>salesValue</span> and <span class=code>taxPercent</span> must both be integers (e.g. 120 meaning, say, 120 pence or 120 cents, and 15 meaning 15%). More to the point, note that <span class=code>salesValue</span> and <span class=code>taxPercent</span> are the two formal parameters of this function, which means that they're placeholders for whatever values we want to pass to the function when we call it. So, for example, if from somewhere in the program we called <span class=code>taxPennies&nbsp;=&nbsp;salesTax(120,&nbsp;15);</span> <span class=code>taxPennies</span> would be assigned the value 18. Methods may also take parameters, so for example we could define:
</p>
<pre><span class=code>myObj: Thing
   baseName = 'object'
   myName (qualifier)
   {
      return 'my ' + qualifier + ' ' + baseName;
   }
;
</span></pre>
<p>Note the use of extra string spaces so that <span class=code>myObj.myName('boring')</span> returns 'my boring object' rather than 'myboringobject'. Note also that we can also define a method (or function) that takes no arguments by using an empty argument list thus: (). So, for example, we could have defined:
</p>
<pre><span class=code>myObj: Thing
    name = 'boring object'
    changeName()
    {
        name = 'very boring object';
    }
    myName = ('my ' + name)
;
</span></pre>
<p>And it would have meant precisely the same as the earlier definition without the empty () after <span class=code>changeName</span>. Which you use is entirely up to you.
</p>
<br>
<h3>f. Conditions -  If Statements</h3>
<p>Often one will want to use methods and functions to perform something a bit more complex than we've shown here. One of the basic requirements of any programming language is to be able to test for conditions and act according to the results. For example, we might want <span class=code>myObj</span> to declare itself as either a boring object or exciting object on the basis of a property used as a flag:
</p>
<pre><span class=code>myObj&nbsp;:&nbsp;Thing
   name
   {
       if(exciting)
           return&nbsp;'exciting&nbsp;object';
       else
           return&nbsp;'boring&nbsp;object';
   }
   exciting&nbsp;=&nbsp;nil
   myName&nbsp;=&nbsp;('my&nbsp;'&nbsp;+&nbsp;name)
;
</span></pre>
<p>The new construction introduced here means "if the condition in parentheses following the keyword 'if' is true, carry out the statement on the following line, otherwise carry out the statement following the 'else' keyword". TADS 3 defines two special values, <span class=code>true</span> and <span class=code>nil&nbsp;</span>which mean true and false (N.B., it's <i>very</i> easy, especially if you're used to using another language, to type 'false' when you mean 'nil'; TADS 3 uses <span class=code>nil</span> since it has other uses beyond Boolean false). Since the property <span class=code>exciting</span> contains <span class=code>nil</span> <span class=code>myObj.name</span> will return 'boring object'; if <span class=code>exciting</span> were later changed to <span class=code>true</span> (or to any non-zero number), <span class=code>myObj.name</span> would then return 'exciting object'.
</p>

<p>
The condition in an <span class=code>if</span> statement can be much more elaborate than the name of a property that evaluates to <span class=code>nil</span> or <span class=code>true</span>. For example, suppose that instead of a boolean (<span class=code>nil</span> or <span class=code>true</span>) <span class=code>exciting</span> property we defined a numeric <span class=code>excitement</span> property, with the rule that the object only becomes exciting if its <span class=code>excitement</span> property exceeds 10. We should then have written the test as <span class=code>if(excitement&nbsp;&gt;&nbsp;10)</span>. Alternatively, we might have decided that the object value was only exciting if its excitement value was exactly 123, in which case the condition would be written <span class=code>if(excitement&nbsp;==&nbsp;123)</span>.
</p>

<p>
Note that this test for equality uses a <i>double equals sign</i> (</font><font face="Courier New" size="3" color="#000000">==</font><font face="Verdana, Arial, Helvetica, Sans-Serif" size="3" color="#000000">), and must be written this way if this is what you mean. It's very easy to write something like <span class=code>if(excitement&nbsp;=&nbsp;123)</span> by mistake, in which case the compiler will give you a warning, because it almost certainly isn't what you meant.
</p>

<p>
You may also want to combine tests using the logical operators <i>and</i>, <i>or</i> and <i>not</i>, which in TADS 3 are defined with <span class=code>&amp;&amp;</span>, <span class=code>||</span> and <span class=code>!</span> respectively. For example if we have defined a <span class=code>boring</span> property on <span class=code>myObj</span>, we might have wanted the exciting test to be:
</p>
<pre><span class=code>    if((!boring&nbsp;&amp;&amp;&nbsp;excitement&nbsp;&gt;&nbsp;12)&nbsp;||&nbsp;excitement&nbsp;==&nbsp;123)
</span></pre>
<p>This would mean, if <span class=code>excitement</span> is equal to 123 or if it's greater than 12 and <span class=code>boring</span> is not true. Note the use of grouping parentheses to resolve any potential ambiguities in the order in which these conditions are evaluated.
</p>

<p>
There is no need to use the <span class=code>else</span> clause at all, if you don't need it. But what happens if you need more than one statement to be executed if something is true, and/or a whole set of statements to be performed otherwise? In this case, we'd use braces <span class=code>{}</span> to group the statements, for example:
</p>
<pre><div class=code>if((!boring &amp;&amp; excitement &gt; 12) || excitement == 123)
{
   myIndefiniteArticle = 'an';
   return 'exciting object';
}
else
{
   myIndefiniteArticle = 'a';
   return 'boring object';
}
</div></pre>

<p>It's quite common to want to assign one value to something if a condition holds, and another otherwise, for example:
</p>
<pre><div class=code>if(length > 5)
   size = 'big';
else
   size = 'small';
</div></pre>
<p>This is kind of thing is so common that TADS 3 provides a short-cut way of doing it. Instead of writing the above, you could write simply:
</p>
<pre><div class=code>size = (length > 5) ? 'big' : 'small';
</div></pre>
<p>More generally this ternary operator works as follows:</p>
<pre><div class=code>cond ? true-value  : false-value
</div></pre>
<p>If <span class=code>cond</span> is true this evaluates to <span class=code>true-value</span>, otherwise it evaluates to <span class=code>false-value</span>.</p>

<br>
<h3>g. The Switch Statement</h3>
<p>It is possible to nest <span class=code>if&#133;&nbsp;else&#133;</span>  statements to any required depth, so that one could, for example, have the following:</p>

<pre><div class=code>if(excitement == 0)
   name&nbsp;=&nbsp;'very&nbsp;boring&nbsp;object';
else&nbsp;if&nbsp;(excitement&nbsp;==&nbsp;1)
   name&nbsp;=&nbsp;'boring&nbsp;object';
else&nbsp;if&nbsp;(excitement&nbsp;==&nbsp;2)
   name&nbsp;=&nbsp;'moderately&nbsp;boring&nbsp;object';
else&nbsp;if&nbsp;(excitement&nbsp;&lt;&nbsp;5)
   name&nbsp;=&nbsp;'vaguely&nbsp;boring&nbsp;object'
else&nbsp;if(excitement&nbsp;&lt;&nbsp;10)
   name&nbsp;=&nbsp;'not&nbsp;too&nbsp;boring&nbsp;object';
else
   name&nbsp;=&nbsp;'exciting&nbsp;object';
</div></pre>
<p>But the trouble with this is that it can quickly become confusing to keep track of which <span class=code>else</span> is meant to match which <span class=code>if</span> (this can be alleviated by using braces to group the code the way you want, though that can lead to messy-looking and verbose code). In some cases this may be the only way to achieve the effect you want, but in this particular case, where we are simply testing the value of a single variable, it is often easier to use a <i>switch</i> statement; in this case the equivalent switch statement would be:
</p>
<pre><div class=code>switch(excitement)
{
case 0:&nbsp;name&nbsp;=&nbsp;'very&nbsp;boring&nbsp;object';&nbsp;break;
case&nbsp;1:&nbsp;name&nbsp;=&nbsp;'boring&nbsp;object';&nbsp;break;
case&nbsp;2:&nbsp;name&nbsp;=&nbsp;'moderately&nbsp;boring&nbsp;object';&nbsp;break;
case&nbsp;3:
case&nbsp;4:&nbsp;name&nbsp;=&nbsp;'vaguely&nbsp;boring&nbsp;object';&nbsp;break;
case&nbsp;5:
case&nbsp;6:
case&nbsp;7:
case&nbsp;8:
case&nbsp;9:&nbsp;name&nbsp;=&nbsp;'not&nbsp;too&nbsp;boring&nbsp;object';&nbsp;break;
default:&nbsp;name&nbsp;=&nbsp;'exciting&nbsp;object';
}
</div></pre>
<p>
Note the use of the <span class=code>break;</span> statements to stop the test 'falling through' to other matches. Since we want the test to fall through if <span class=code>excitement</span> is 3, 5, 6, 7 or 8 we do not define a <span class=code>break</span> statement for those cases. So, for example, if <span class=code>excitement</span> is 6 the <span class=code>switch</span> statement will execute the statements for all the cases following <span class=code>case&nbsp;6</span> until it encounters a <span class=code>break</span>; this has the desired effect of setting name to 'not too boring object'. The <span class=code>default</span> case defines what happens if none of the preceding cases is matched.
</p>

<p>
The <span class=code>switch()&nbsp;</span>statement is not restricted to matching numbers, it can also match (single-quoted) strings, objects, lists, Boolean values (true or nil) or enumerators (which we'll meet again below). Again, the <span class=code>case</span> value need not be expressed as a constant of one of these types, so long as it is an expression that evaluates to a constant value of one of these types.
</p>
<br>
<h3>h. Properties Containing Objects and Lists</h3>
<p>This brings us to the final introductory point: so far our examples of properties and variables have all been of ones that contain either numbers, strings, or Boolean values (true or nil); but properties and variables can also contain other data types such as objects, lists, enumerators and function pointers, and although we shall be meeting few enumerators and function pointers in what follows, properties containing objects and lists will be rather more common. The concept of a property or variable containing an object is really no more complicated than that of having them refer to strings or numbers. For example if we had two objects, <span class=code>myObj1</span> and <span class=code>myObj2</span>, we could, say, use the assignment statement <span class=code>obj&nbsp;=&nbsp;myObj2</span> and then use obj to refer to <span class=code>myObj2</span>. This may seem a bit pointless at first, but it could be useful if we didn't know in advance which object obj was going to be, and we wanted to write general code that could work equally well with a number of objects. To take a trivial example, suppose we wrote the following function:
</p>
<pre><div class=code>function&nbsp;showName(obj)
{
&nbsp;&nbsp;&nbsp;say(obj.name);
}
</div></pre>
<p>This definition would then allow us to call <span class=code>showName(myObj1)</span> to display <span class=code>myObj1.name</span>, <span class=code>showName(myObj2)</span> to display <span class=code>myObj2.name</span> and so on. This example is so trivial that it may still seem pointless, but even in a slightly more complex case the value may start to become apparent:
</p>
<pre><div class=code>function&nbsp;talkAbout(obj)
{
&nbsp;&nbsp;&nbsp;&nbsp;local&nbsp;msg&nbsp;=&nbsp;'My&nbsp;';
&nbsp;&nbsp;&nbsp;&nbsp;msg&nbsp;+=&nbsp;obj.name;
&nbsp;&nbsp;&nbsp;&nbsp;msg&nbsp;+=&nbsp;'&nbsp;is&nbsp;really&nbsp;very&nbsp;';
&nbsp;&nbsp;&nbsp;&nbsp;if(obj.excitement &lt; 10)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;msg&nbsp;+=&nbsp;'dull.';
&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;msg&nbsp;+=&nbsp;'interesting.';
&nbsp;&nbsp;&nbsp;&nbsp;say(msg);
}
</div></pre>
<p>Perhaps an even more common use of assigning objects to properties is where other objects need to keep track of them. For example, if I have an object (say 'ball') inside another object ('bag'), then the <span class=code>location</span> property of the ball can keep track of where the ball is by being set to the bag object. If the ball is then moved to the tennis court the <span class=code>location</span> property of the ball object could be set to the <span class=code>tennisCourt</span> object to keep track of it.
</p>

<p>
At first sight, it may seem that doing it the other way round wouldn't work so well, since, say, using <span class=code>bag.contents</span> to keep track of what's in the bag would only allow one object to be in the bag at the time. In fact this is an example of where one would use a <span class=code>list</span> value. A list is basically a list of items (of any of the valid types, including other lists) enclosed in square brackets and separated by commas, e.g.:
</p>
<pre><div class=code>bag.contents&nbsp;=&nbsp;[ball,&nbsp;coin,&nbsp;banana,&nbsp;horseshoe]
</div></pre>
<p>To find out whether something's in a list one can use its <span class=code>indexOf</span> method; e.g. <span class=code>bag.contents.indexOf(ball)</span> would be 1; <span class=code>bag.contents.indexOf(banana)</span> would be 3, and <span class=code>bag.contents.indexOf(elixirOfLife)&nbsp;</span>would be nil.
</p><br>
<h3>i. Nested Objects</h3>

<p>The previous section only scratches the surface of TADS 3 lists; to find out more, look up lists in the <i>System Manual</i> that comes with the TADS 3 Author's Kit. We'll conclude with a rather different kind of list to illustrate one last point, the use of nested objects in TADS 3.
</p>

<p>
Suppose we have a ball that appears to change colour randomly when we look at it. We might define it like this:
</p>
<pre><div class=code>ball:&nbsp;Thing&nbsp;'ball'&nbsp;'ball'
&nbsp;&nbsp;&nbsp;"When&nbsp;you&nbsp;look&nbsp;at&nbsp;it,&nbsp;it&nbsp;looks&nbsp;&lt;&lt;colour&gt;&gt;.&nbsp;"
&nbsp;&nbsp;&nbsp;&nbsp;colour&nbsp;&nbsp;{&nbsp;return&nbsp;colourList.getNextValue();&nbsp;}
;

colourList:&nbsp;ShuffledList
&nbsp;&nbsp;&nbsp;valueList&nbsp;=&nbsp;['red',&nbsp;'green',&nbsp;'blue',&nbsp;'violet',&nbsp;'white',&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'black',&nbsp;'orange',&nbsp;'indigo']
;
</div></pre>
<p>The purpose of a <span class=code>ShuffledList</span> is to return one of its values randomly, without repeating a value until it has used them all. It's a bit like shuffling a pack of cards, then taking one in turn until all have been used, then reshuffling the pack and starting again. But in order to function this way a <span class=code>ShuffledList</span> needs to be a separate object, not only with a list of values (its <span class=code>valueList</span> property) but also a method (<span class=code>getNextValue</span>) that returns the next shuffled value. In order to define the varicoloured ball object, therefore, we also need to define a separate <span class=code>colourList</span> object. While this is far from catastrophic, it can be a little inconvenient, since code that helps to define the behaviour of one object is spread into another; the two objects might in time get separated in your code, or the presence of the second object might mess up the containment hierarchy in some way. This is where a nested object could come in handy.
</p>

<p>
As an intermediary step, note that a property can contain a reference to an object; for example, we could have written:
</p>
<pre><div class=code>ball:&nbsp;Thing&nbsp;'ball'&nbsp;'ball'
&nbsp;&nbsp;&nbsp;"When&nbsp;you&nbsp;look&nbsp;at&nbsp;it,&nbsp;it&nbsp;looks&nbsp;&lt;&lt;colour&gt;&gt;.&nbsp;"
&nbsp;&nbsp;&nbsp;&nbsp;colour&nbsp;&nbsp;{&nbsp;return&nbsp;colourList.getNextValue();&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;colourList&nbsp;=&nbsp;colourListObj
;

colourListObj:&nbsp;ShuffledList
&nbsp;&nbsp;&nbsp;valueList&nbsp;=&nbsp;['red',&nbsp;'green',&nbsp;'blue',&nbsp;'violet',&nbsp;'white',&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'black',&nbsp;'orange',&nbsp;'indigo']
;</div></pre>

<p>And this would work just the same (although it appears a little more verbose). The <span class=code>colour</span> method now refers to the <span class=code>colourList</span> property which in turn refers to the <span class=code>colourListObj</span> object. The way we could make this more compact is to turn the <span class=code>colourListObj</span> object into an anonymous object defined directly on the <span class=code>colourList</span> property:
</p>
<pre><div class=code>ball:&nbsp;Thing&nbsp;'ball'&nbsp;'ball'
&nbsp;&nbsp;&nbsp;"When&nbsp;you&nbsp;look&nbsp;at&nbsp;it,&nbsp;it&nbsp;looks&nbsp;&lt;&lt;colour&gt;&gt;.&nbsp;"
&nbsp;&nbsp;&nbsp;&nbsp;colour&nbsp;&nbsp;{&nbsp;return&nbsp;colourList.getNextValue();&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;colourList:&nbsp;ShuffledList
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;valueList&nbsp;=&nbsp;['red',&nbsp;'green',&nbsp;'blue',&nbsp;'violet',&nbsp;'white',&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'black',&nbsp;'orange',&nbsp;'indigo']
&nbsp;&nbsp;&nbsp;&nbsp;}
;
</div></pre>
<p>Not only is this more concise, but it has the advantage of keeping all the code together in one object. The <span class=code>ShuffledList</span> has now become an <i>anonymous nested object</i>. All nested objects are anonymous, because they have no name: <span class=code>colourList</span> is not the name of the <span class=code>ShuffledList</span> object here, it's the name of a property of <span class=code>ball</span>; the <span class=code>ShuffledList</span> can nevertheless be referred to as <span class=code>ball.colourList</span>, since it is the value of <span class=code>ball</span>'s <span class=code>colourList</span> property. Note that while an ordinary object definition may either be terminated with a semicolon or enclosed in braces, the braces (<span class=code>{}</span>) form must <i>always </i>be used with a nested object, as here.
<br>

<br>
This may seem a bit strange and convoluted at first, but you'll find the use of anonymous nested objects is a powerful and common feature of TADS 3 programming, so it will be as well to become familiar with it.
<br>
&nbsp;&nbsp;&nbsp;</font><font face="Verdana, Arial, Helvetica, Sans-Serif" size="2" color="#000000">
<br>
</font></font>

<HR>
<P><FONT SIZE=-1><I>Getting Started in TADS 3</I><BR>
<a href="index.html">[Main]</a><BR>
<I><a href="creatingyourfirsttads3project.htm">[Previous] </a>&nbsp;&nbsp;<a href="furtherprogramming.htm">[Next] </a></I></FONT></P>
</body></html>
