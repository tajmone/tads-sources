<title>Getting Started with HTML in TADS</title>

<h1>Getting Started with HTML in TADS</h1>

<h3>Introduction</h3>

<p>HTML TADS is an extension to TADS that lets you use
formatted text, graphics, and sound in a TADS game.  Writing an HTML
TADS game is exactly like writing a standard TADS game, except that
you can use HTML formatting commands within the text that the game
displays.

<p>All of the programming for an HTML TADS game is the same as for
a standard TADS game, so we won't talk about TADS programming here.
If you're new to TADS, you should start with the <i>TADS Author's
Manual</i> or a TADS tutorial, then come back here to learn how to
extend the standard TADS features with HTML formatting.

<p>We also won't attempt to provide a detailed manual on HTML itself.
The HTML that TADS uses is based on standard HTML (version 3.2, to
be precise), with a few <a href='deviate.htm'>deviations from
standard HTML</a>, so you can learn the HTML that TADS uses from
any of the numerous books or web pages that describe standard HTML 3.2.

<h3>For TADS 3 Users</h3>

<p>TADS 3 <b>always</b> treats text output as HTML.  There's no way to
turn this on or off, and it applies even on a text-only interpreter.
You can ignore everything in the "For TADS 2 Users" section about
turning "HTML mode" on and off - in TADS 3, HTML mode is always on.

<p>Note that this means that the "\H+" and "\H-" sequences are
<b>not</b> used in TADS 3.  Any time we mention those, we're only
talking about TADS 2.


<h3>For TADS 2 Users: Plain Text Mode and HTML Mode</h3>

<p>When the HTML TADS Interpreter starts running your game, it
assumes that your game uses only ordinary text.  This ensures that
games written for the standard TADS will work correctly with the HTML
TADS Interpreter -- if a standard TADS game displays something that
looks like an HTML formatting command, the interpreter will simply
ignore the resemblance and display the command as ordinary text.

<p>In order to use HTML, then, you have to tell the interpreter that
you want HTML formatting commands to be interpreted.  To do this,
you must display a special control sequence, which looks like this:

<p>
<pre>
   "\H+";
</pre>

<p>Usually, you will do this once, when your game starts running; if
you're using the std.t library, the easiest place to do this is in
the <tt>commonInit</tt> function.  Here's an example:

<p>
<pre>
   #include &lt;adv.t&gt;
   #include &lt;std.t&gt;

   replace commonInit: function
   {
      /* enter HTML mode */
      "\H+";
   }
</pre>

<p>After you display the "\H+" sequence, the interpreter will look
for HTML sequences in the text your game displays and use them to
control formatting.

<h3>Some Quick Examples</h3>

<p>Sometimes the easiest way to learn something is to see a few examples.
So, before we start droning on about the theory and practice of writing
HTML, we'll show you some practical examples.

<p>First, here's how you'd display some text in a room description using
<b><i>bold italics</b></i>:

<p><pre>
   myRoom: room
     // ...
     ldesc = "Here's some text in &lt;b&gt;&lt;i&gt;bold italics&lt;/i&gt;&lt;/b&gt;!!!"
   ;
</pre>

<p> Here's how to display some text in <font color=red size=+1><i>red
italic letters</i></font> that are slightly larger than the main text font size
(the "+1" means one size larger than normal):

<p><pre>
   warningSign: item
     // ...
     ldesc = "&lt;font color=red size='+1'&gt;&lt;i&gt;Warning!!!&gt;&lt;/i&gt;&lt;/font&gt; "
   ;
</pre>

<p>
Here's how to center some text:

<p><pre>
   trespassSign: item
     // ..
     ldesc = "&lt;center&gt;
              &lt;b&gt;Warning!&lt;/b&gt;\b
              Trespassers\n
              will be fed to\n
              dragon!\b
              &lt;/center&gt; "
   ;
</pre>


<h3>HTML Markups</h3>

<p>HTML formatting commands are called "markups," because they're
used to "mark up" text with additional information.  There are two
kinds of markups: <i>entities</i>, which let you specify a single
character using its name; and <i>tags</i>, which contain formatting,
annotation, or structural information about the text.

<h4>Entities</h4>

<p> An entity is simply a long way of writing a single character.
Entities were invented for two reasons:

<p>
<ul>

<li>First, you can use an entity to display
a character that would be "markup-significant," which means that the
HTML parser would normally think that the character signified an HTML
markup and hence wouldn't display the character, but would try to
interpret the markup instead.  For example, a less-than sign is used
to start a tag; if you want to display a less-than sign in your text,
you must use the entity for a less-than sign (which is "&amp;lt;").

<li>Second, entities can be used to avoid character set translation
problems.  For example, there's no ASCII character for a capital E with
an acute accent.  Most computers have "extended ASCII" characters for
accented characters, but any given accented character might have a
different character code on different computers.  If you've ever tried
to move a file containing accented characters between a Windows machine
and a Macintosh, you might have found that the accented characters were
all jumbled around after moving the file.  One of HTML's purposes is to
allow information to be viewed on different types of computers, so HTML's
designers had to find a solution to this problem.  Part of their solution
is to use entities.  So, to embed the E with acute accent, you could write
its entity name ("&amp;Eacute").  Since entity names don't themselves
include any accented characters (they're all plain ASCII), they're
fully portable, neatly side-stepping the whole character set issue.

</ul>

<p>
As you might have noticed from the examples above, entity names all
start with an ampersand ("&amp;") and all end with a semicolon (";").
This means that the ampersand itself is markup-significant -- if you
want to display an ampersand, you must write its entity instead
("&amp;amp;").  When you put an entity in your text, all of the characters
between and including the opening ampersand to the closing semicolon are
removed from the displayed text, and the single character named by the
entity is displayed instead.

<h4>Tags</h4>

<p>Tags are used to insert information about the text into the text.
All HTML formatting is done with tags.

<p>A tag starts with a less-than sign ("&lt;") and ends with a greater-than
sign ("&gt;).  After the less-than sign comes the name of the tag.
For many tags, that's all there is.  For example, if you want to start
a new paragraph, you can simply write &lt;P&gt; where you want the
new paragraph to begin.  In other cases, you will also include
<i>attributes</i>, which contain additional information for the tag.

<p> An attribute can simply be a name, in which case the mere
presence of the attribute affects the tag, or it can have a value.
If it has a value, the value follows an equals sign ("=") that
follows the attribute's name.

<p>For example, the &lt;HR&gt;
(horizontal rule) tag takes the NOSHADE attribute, which has no value
but whose presence indicates that the rule is to be drawn as a simple
line without any shading.  So, &lt;HR&gt; draws a default, shaded line,
and &lt;HR NOSHADE&gt; draws a line without any shading.  The tag
also takes an ALIGN tag, which takes a value indicating what type
of alignment to use for the rule: LEFT, RIGHT, or CENTER.  So,
&lt;HR ALIGN=CENTER&gt; draws a horizontally centered rule, and
&lt;HR ALIGN=RIGHT NOSHADE&gt; draws a right-aligned rule without
shading.

<h4>Container Tags</h4>

<p>Some tags are <i>container</i> tags.  A container tag marks a
run of text, and always has an ending tag that specifies where
the contained text ends.  Everything from the starting tag to the
corresponding ending tag is contained in the tag.

<p>The ending tag always has the same name as the starting tag,
but has a slash before the name.  So, the ending tag for &lt;B&gt;
is &lt;/B&gt;.  Ending tags never have any attributes.

<p>For example,
the boldface tag, &lt;B&gt;, is a container tag; all of the contained
text is shown in boldface:

<p>
<pre>
    "Here's some &lt;B&gt;bold&lt;/B&gt; text! ";
</pre>

<p>
In this example, the word "bold" is displayed in boldface.

<p>
Container tags must use simple nesting.  This means that, if one
container is nested within another, the inner container must end
before the outer container.  You can never have overlapping containers,
so this is illegal:

<p>
<pre>
   /* DON'T DO THIS - INCORRECT TAG NESTING */
   "Here's some &lt;B&gt;bold, &lt;I&gt;bold italic, and &lt;/B&gt;italic&lt;/I&gt; text! ";
</pre>

<p>
This is illegal because the &lt;I&gt; tag is nested within the &lt;B&gt;
tag, but the &lt;B&gt; tag ends before the &lt;I&gt; tag.  To write
this properly, you must make sure the inner tag, &lt;I&gt;, ends before
the outer tag, &lt;B&gt;:

<p>
<pre>
   /* correct nesting */
   "Here's some &lt;B&gt;bold, &lt;I&gt;bold italic, and &lt;/I&gt;&lt;/B&gt;&lt;I&gt;italic&lt;/I&gt; text! ";
</pre>


<h3>Using markups in TADS</h3>

<p>Using HTML markups in TADS is simple: just insert them into the
text you display.

<p>For example, suppose you want to put a couple of things in boldface
in a room's description.  You do this by putting &lt;B&gt; tags around
the parts you want in bold, right in the text of the room's description:

<p>
<pre>
   coldCave: room
     sdesc = "Cold Cave"
     ldesc = "This is an extremely &lt;B&gt;cold&lt;/B&gt; cave.
             A chilling wind blows in from the narrow passage to
             the north.  You don't feel like you can stand to stay
             here long; you're positively &lt;B&gt;freezing&lt;/B&gt;! "
   ;
</pre>

<P>
HTML works only in text you display.  Don't use HTML within
programming code; it should only go in quoted strings that your
game displays.

<p>TADS <i>only</i> interprets HTML in text that you <b>display</b>.
TADS ignores HTML everywhere else.  In ordinary string manipulations,
even if you use what might look like HTML tags, TADS will ignore them
-- until you display the strings, at which point TADS interprets the
HTML for formatting the output.  For example, consider this code:

<p>
<pre>
   ampkeyVerb: deepverb
     verb = 'ampkey'
     action(actor) =
     {
       local x;

       /* THIS IS A BAD EXAMPLE - THIS WON'T WORK!!! */
       x := inputkey();
       if (x = '&amp;amp;')
         "You pressed the &lt;q&gt;&amp;amp;&lt;/q&gt; key!\n";
       else if (x = '&amp;lt;')
         "You pressed the &lt;q&gt;&amp;lt;&lt;/q&gt; key!\n";
       else
         "You pressed &lt;&lt;x&gt;&gt;!\n";
     }
   ;
</pre>

<p>This code will <i>not</i> work as you might expect.  The problem
is that the string comparisons won't work, because TADS doesn't
attempt to interpret any HTML markups for ordinary string
manipulation.  The correct way to write the ampersand test is <tt>(x
= '&amp;')</tt>, and the correct way to write the less-than test is
<tt>(x = '&lt;')</tt>.  Don't get confused into thinking that you
have to worry about HTML everywhere in your program -- you don't.
You only have to think about HTML when you're displaying text to the
screen.

<p>Here's the correct version of this code:

<p>
<pre>
   ampkeyVerb: deepverb
     verb = 'ampkey'
     action(actor) =
     {
       local x;

       x := inputkey();
       if (x = '&amp;')
         "You pressed the &lt;q&gt;&amp;amp;&lt;/q&gt; key!\n";
       else if (x = '&lt;')
         "You pressed the &lt;q&gt;&amp;lt;&lt;/q&gt; key!\n";
       else
         "You pressed &lt;&lt;x&gt;&gt;!\n";
     }
   ;
</pre>

<blockquote><b>An exercise for the reader:</b> Since this
documentation is itself written in HTML, coding examples that use
markup-significant characters (such as the examples above) must use
entities to represent the markups.  To show you something like
"<tt>&amp;amp;</tt>" in your web browser, for example, we must write
"<tt>&amp;amp;amp;</tt>" in the source code for this page.  You might
find it amusing as you hone your HTML skills to try writing out some
of the HTML required to show the examples above or other examples on
this page.  To check your work, simply look at the HTML source for
this page by opening the page in a plain text editor rather than a
web browser.  </blockquote>

<h3>Some Common Tags</h3>

<p>As we mentioned earlier, there are so many sources of HTML documentation
that we won't even try to provide a full tutorial on HTML here.  However,
to help get you started, here are a few simple tags that you might find
handy:

<p>
<b>&lt;I&gt; ... &lt;/I&gt;</b> - italics.

<p>
<b>&lt;B&gt; ... &lt;/B&gt;</b> - boldface.

<p>
<b>&lt;U&gt; ... &lt;/U&gt;</b> - underline.

<p> <b>&lt;TT&gt; ... &lt;/TT&gt;</b> - typewriter font.  This uses a
fixed-width font if one is available, which can be useful when you
want columns of text to line up.  (HTML offers much more
sophisticated ways to align columns of text, including the
&lt;TAB&gt; and &lt;TABLE&gt; tags, but for very simple cases it's
sometimes easier to use a fixed-width font.)

<p>
<b>&lt;CENTER&gt; ... &lt;/CENTER&gt;</b> - center text.

<p>
<b>&lt;BLOCKQUOTE&gt; ... &lt;/BLOCKQUOTE&gt;</b> - slightly indent
both the left and right margins.  This is usually used to display
long passages of quoted material, but can be handy for simple formatting
as well.

<p>
<b>&lt;SUP&gt; ... &lt;/SUP&gt;</b> - display text as a superscript,
in a smaller typeface and elevated slightly from the main text line.

<p>
<b>&lt;SUB&gt; ... &lt;/SUB&gt;</b> - display text as a subscript,
in a smaller typeface and lowered slightly from the main text line.

<p>
<b>&lt;FONT SIZE=n COLOR=c FACE=f&gt; ... &lt;/FONT&gt;</b> - display text
in a different size or color.  For sizes, you can use 1 through 7;
the default size is 3, and larger numbers indicate larger font sizes.
You can't specify the exact point size because this varies according
to user settings, so SIZE simply selects a relative font size.
For COLOR, you can specify a color name; some common color names
are WHITE, BLACK, SILVER, GRAY, RED, BLUE, GREEN, YELLOW.  You can
also specify a hexadecimal RGB (reg-green-blue) value using notation
such as '#FF0000' (for maximum red, minimum green, minimum blue)
or '#808080' (half-intensity red, half-intensity green, half-intensity blue).
You can also specify a typeface by name; for portability, you should
try to use one of the special TADS fonts, such as 'TADS-Serif' for
a serifed font or 'TADS-Sans' for a sans-serif font, since the user
can select what to display for each of these fonts.  Note that you don't
have to specify all of these attributes with the &lt;FONT&gt; tag --
if you only want to change the current text color but leave its
size and typeface unchanged, include only the COLOR attribute in the
tag.

<p>
<b>&lt;Q&gt; ... &lt;/Q&gt;</b> - enclose text in quotation marks.
Nested &lt;Q&gt; tags alternate between double quotes and single quotes,
which is the normal typographical convention, and the open and close quotes
will use typographical ("curly") quotes on platforms that support them.

<p>
<b>&lt;BR&gt;</b> - break: start a new line.

<p>
<b>&lt;HR&gt;</b> - horizontal rule: show a horizontal line.  You can
use this as a visual separator.

<p>
<b>&lt;IMG SRC='file.jpg'&gt;</b> - show an image from the file "file.jpg"
(the ".jpg" suffix indicates a JPEG file; you can also use
PNG files, which have the suffix ".png", and MNG animated image
files, which have the suffix ".mng").

<p> <b>&lt;SOUND SRC='file.wav'&gt;</b> - play a sound.  The <a
href='sound.htm'> sound system documentation</a> describes the details
of this TADS extension to standard HTML.  HTML TADS can play "WAV"
files (an uncompressed digitized audio format), MIDI files, MP3's, and
Ogg Vorbis compressed digitized audio files.

<h3>Where to Go from Here</h3>

<p>There's much more to HTML and to HTML TADS than what's covered above,
but we hope this gives you enough information to get started.  If you
haven't already tried writing your own example game to try out some of
the HTML features above, you should try that now.

<p>A good next step is to find a book or web site on standard HTML.
You should look for something that covers version 3.2 of HTML,
because this is the version that HTML TADS uses.  (The newer versions
of HTML add a lot of new features, but you won't be missing much of
any practical use in an interactive fiction context.  Most of the new
features are related to programming and scripting.  TADS has its own
language for programming, and uses a totally different approach to
creating the user interface anyway.)


<br>
<br>
<br>

