<html><head><meta name="generator" content="Help & Manual 2.7.0"><title>SenseFuse</title><meta name="keywords" content="SenseFuse,new,new, SenseFuse,specialDesc,specialDescOrder,useSpecialDesc"></meta></head>
<body bgcolor="#FFFFFF">
<table width="100%" border="0" cellspacing="0" cellpadding="3" bgcolor="#C0C0C0"><tr><td align="left">
<font face="Arial" size="3" color="#000000"><b>SenseFuse : <a href="fuse.htm">Fuse</a>
<br>
</b></font>

</td><td align="right"><font face="Arial" size="2"><a href="daemon.htm">[Previous]</a> <a href="generalintroduction.htm">[Main]</a> <a href="sensedaemon.htm">[Next]</a></font></td></tr></table><br>

<font face="Arial" size="2" color="#000000">One problem you may have with a <a href="fuse.htm">Fuse</a> is that it could go off when the player character is not near enough to perceive the result, but that any text defined in the method that's executed when the Fuse fires will be displayed whether it describes something the player character could witness or not. This wasn't a problem with the Daemon and Fuse we defined on the gold tablet, but in other situations in might be. In such situations what you need is a  SenseFuse - a special type of Fuse that won't display any messages if the player character isn't there to see (or hear, or smell) what happens.
<br>

<br>
The way to set up a SenseFuse is very similar to the way you set up a Fuse, except that there are a couple of extra properties:
<br>

<br>
  <font face="Courier New" size="2" color="#000000">new&nbsp;SenseFuse(obj,&nbsp;&amp;prop,&nbsp;turns,&nbsp;source,&nbsp;sense);</font><font face="Arial" size="2" color="#000000">
<br>

<br>
This definition will cause obj.prop to be executed after <i>turns</i> turns, as with a Fuse. The difference is that the player will only see any messages displayed by obj.prop if, at that point in time, the player character can sense the <i>source</i> object (which in practice may often be the same as the obj object, but need not be) using the sense <i>sense</i> (which could be sight, sound, smell or touch - most likely one of the first two).
<br>

<br>
As an example we'll put a SenseFuse on an exploded bomb hidden under a pile of rubble. Once the player finds the bomb in the rubble, a new fuse is created that will cause the bomb to explode in three turns (killing the player if s/he is still rash enough to be around). Obviously, we'll also need to create an environment for the bomb, so we'll start by adding a new location the Tardis can reach:
<br>

<br>
</font><font face="Courier New" size="2" color="#000000">+&nbsp;tardisDestinations&nbsp;:&nbsp;SecretFixture,&nbsp;PreinitObject
<br>
&nbsp;&nbsp;destinations&nbsp;=&nbsp;static&nbsp;new&nbsp;LookupTable
<br>
&nbsp;&nbsp;execute()
<br>
&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;destinations['A0']&nbsp;=&nbsp;hold;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;destinations['A2']&nbsp;=&nbsp;spaceStation;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;destinations['C9']&nbsp;=&nbsp;redDesert;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;destinations['T5']&nbsp;=&nbsp;outsideCave;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;<b>destinations['Q7']&nbsp;=&nbsp;londonStreet;</b>
<br>
&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;...
<br>
;
<br>
</font><font face="Arial" size="2" color="#000000">
<br>
Then we can proceed to define a couple of locations, some rubble, and a bomb:
<br>

<br>
</font><font face="Courier New" size="2" color="#000000">/*&nbsp;London&nbsp;-&nbsp;1940&nbsp;*/
<br>

<br>
londonStreet&nbsp;:&nbsp;OutdoorRoom&nbsp;'City&nbsp;Street'&nbsp;'the&nbsp;city&nbsp;street'
<br>
&nbsp;&nbsp;&nbsp;"Several&nbsp;burned-out&nbsp;and&nbsp;half-destroyed&nbsp;buildings&nbsp;line&nbsp;this&nbsp;section&nbsp;of&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;city&nbsp;street&nbsp;along&nbsp;with&nbsp;the&nbsp;ones&nbsp;that&nbsp;are&nbsp;still&nbsp;standing.&nbsp;The&nbsp;destruction
<br>
&nbsp;&nbsp;&nbsp;&nbsp;seems&nbsp;to&nbsp;have&nbsp;been&nbsp;fairly&nbsp;recent,&nbsp;since&nbsp;the&nbsp;rubble&nbsp;of&nbsp;fallen&nbsp;masonry&nbsp;still
<br>
&nbsp;&nbsp;&nbsp;&nbsp;spills&nbsp;out&nbsp;onto&nbsp;the&nbsp;street,&nbsp;blocking&nbsp;the&nbsp;way&nbsp;south.&nbsp;The&nbsp;road&nbsp;continues&nbsp;to
<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;north.&nbsp;"
<br>
&nbsp;&nbsp;&nbsp;&nbsp;south&nbsp;:&nbsp;NoTravelMessage&nbsp;{&nbsp;"The&nbsp;rubble&nbsp;blocks&nbsp;your&nbsp;path.&nbsp;";&nbsp;}
<br>
&nbsp;&nbsp;&nbsp;&nbsp;east&nbsp;:&nbsp;NoTravelMessage&nbsp;{&nbsp;"The&nbsp;houses&nbsp;directly&nbsp;to&nbsp;the&nbsp;east&nbsp;are&nbsp;burned-out
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shells;&nbsp;they&nbsp;don't&nbsp;look&nbsp;safe&nbsp;to&nbsp;enter.&nbsp;";&nbsp;}
<br>
&nbsp;&nbsp;&nbsp;&nbsp;north&nbsp;=&nbsp;streetJunction&nbsp;
<br>
;
<br>

<br>
+&nbsp;rubble&nbsp;:&nbsp;Immovable&nbsp;'pile&nbsp;rubble'&nbsp;'rubble'
<br>
&nbsp;&nbsp;"The&nbsp;largest&nbsp;pile&nbsp;of&nbsp;rubble&nbsp;spills&nbsp;out&nbsp;into&nbsp;the&nbsp;street&nbsp;and&nbsp;blocks&nbsp;progress&nbsp;south.&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&lt;&lt;bomb.isIn(nil)&nbsp;?&nbsp;specialDesc&nbsp;:&nbsp;nil&gt;&gt;&nbsp;"
<br>
&nbsp;&nbsp;dobjFor(LookUnder)
<br>
&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;action()
<br>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(bomb.moved)
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"There's&nbsp;nothing&nbsp;much&nbsp;there&nbsp;but&nbsp;rubble.&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;if(bomb.discovered)
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The&nbsp;bomb&nbsp;is&nbsp;still&nbsp;there.&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bomb.discover();
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"You&nbsp;find&nbsp;a&nbsp;metal&nbsp;cylinder&nbsp;buried&nbsp;among&nbsp;the&nbsp;rubble.&nbsp;It&nbsp;looks&nbsp;horribly
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;like&nbsp;a&nbsp;bomb.&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;dobjFor(LookIn)&nbsp;asDobjFor(LookUnder)
<br>
&nbsp;&nbsp;specialDesc&nbsp;=&nbsp;"Pieces&nbsp;of&nbsp;rubble&nbsp;have&nbsp;been&nbsp;blown&nbsp;all&nbsp;over&nbsp;the&nbsp;street,&nbsp;surrounding
<br>
&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;fresh&nbsp;bomb&nbsp;crater.&nbsp;"
<br>
&nbsp;&nbsp;specialDescOrder&nbsp;=&nbsp;70
<br>
&nbsp;&nbsp;useSpecialDesc()&nbsp;{&nbsp;return&nbsp;bomb.isIn(nil);&nbsp;}
<br>
;
<br>

<br>
+&nbsp;bomb&nbsp;:&nbsp;Hidden,&nbsp;Immovable&nbsp;'unexploded&nbsp;bomb/cylinder'&nbsp;'bomb'
<br>
&nbsp;&nbsp;"It's&nbsp;a&nbsp;fat,&nbsp;round-nosed&nbsp;cylinder&nbsp;with&nbsp;tail&nbsp;fins,&nbsp;on&nbsp;a&nbsp;couple&nbsp;of&nbsp;which
<br>
&nbsp;&nbsp;&nbsp;&nbsp;are&nbsp;painted&nbsp;tiny&nbsp;swastikas.&nbsp;"
<br>
&nbsp;&nbsp;discover()
<br>
&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;inherited;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;SenseFuse(self,&nbsp;&amp;explode,&nbsp;3,&nbsp;self,&nbsp;sight);
<br>
&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;explode()
<br>
&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;"The&nbsp;bomb&nbsp;explodes,&nbsp;the&nbsp;blast&nbsp;sending&nbsp;chunks&nbsp;of&nbsp;masonry&nbsp;flying&nbsp;in&nbsp;all
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;directions,&nbsp;one&nbsp;piece&nbsp;of which&nbsp;strikes&nbsp;you&nbsp;squarely&nbsp;on&nbsp;the&nbsp;head.&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(gPlayerChar.isIn(location))
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;endGame(ftDeath);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;moveInto(nil);
<br>
&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;cannotTakeMsg&nbsp;=&nbsp;'You&nbsp;must&nbsp;be&nbsp;joking!&nbsp;'
<br>
&nbsp;&nbsp;cannotPushMsg&nbsp;=&nbsp;'That&nbsp;might&nbsp;set&nbsp;it&nbsp;off.&nbsp;'
<br>
&nbsp;&nbsp;cannotMoveMsg&nbsp;=&nbsp;'It\'s&nbsp;probably&nbsp;safest&nbsp;to&nbsp;leave&nbsp;it&nbsp;just&nbsp;where&nbsp;it&nbsp;is.&nbsp;'
<br>
;
<br>

<br>
streetJunction&nbsp;:&nbsp;OutdoorRoom&nbsp;'Street&nbsp;Junction'&nbsp;'the&nbsp;junction'
<br>
&nbsp;&nbsp;&nbsp;"The&nbsp;street&nbsp;from&nbsp;the&nbsp;south&nbsp;meets&nbsp;another&nbsp;running&nbsp;east-west.&nbsp;A&nbsp;short&nbsp;way&nbsp;down
<br>
&nbsp;&nbsp;&nbsp;&nbsp;to&nbsp;the&nbsp;street&nbsp;to&nbsp;the&nbsp;east&nbsp;a&nbsp;fire&nbsp;crew&nbsp;is&nbsp;fighting&nbsp;a&nbsp;blazing&nbsp;fire.&nbsp;"
<br>
&nbsp;&nbsp;&nbsp;south&nbsp;=&nbsp;londonStreet
<br>
&nbsp;&nbsp;&nbsp;east&nbsp;:&nbsp;FakeConnector&nbsp;{&nbsp;"After&nbsp;taking&nbsp;a&nbsp;few&nbsp;steps&nbsp;east&nbsp;you&nbsp;recall&nbsp;that&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;discretion&nbsp;is&nbsp;the&nbsp;better&nbsp;part&nbsp;of&nbsp;valour&nbsp;and&nbsp;decide&nbsp;to&nbsp;keep&nbsp;out&nbsp;of&nbsp;the
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;way&nbsp;of&nbsp;the&nbsp;fire&nbsp;crew.&nbsp;"}
<br>
&nbsp;&nbsp;&nbsp;atmosphereList&nbsp;:&nbsp;ShuffledEventList
<br>
&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;'The&nbsp;drone&nbsp;of&nbsp;aircraft&nbsp;engines&nbsp;can&nbsp;be&nbsp;heard&nbsp;overhead.&nbsp;',
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'From&nbsp;somewhere&nbsp;across&nbsp;the&nbsp;city&nbsp;comes&nbsp;the&nbsp;wail&nbsp;of&nbsp;a&nbsp;distant&nbsp;siren.&nbsp;',
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'From&nbsp;somewhere&nbsp;to&nbsp;the&nbsp&lt;&lt;dirn&gt;&gt;&nbsp;comes&nbsp;the&nbsp;bark&nbsp;of&nbsp;anti-aircraft&nbsp;fire.&nbsp;',
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'Off&nbsp;to&nbsp;the &lt;&lt;dirn&gt;&gt; you&nbsp;hear&nbsp;the&nbsp;blast&nbsp;of&nbsp;a&nbsp;whistle&nbsp;and&nbsp;the&nbsp;sound&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;of&nbsp;running&nbsp;feet.&nbsp;',
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'A&nbsp;fire&nbsp;engine&nbsp;races&nbsp;down&nbsp;a&nbsp;street&nbsp;somewhere&nbsp;to&nbsp;the &lt;&lt;dirn&gt;&gt; .',
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'There\'s&nbsp;a&nbsp;sudden&nbsp;explosion&nbsp;somewhere&nbsp;off&nbsp;to&nbsp;the &lt;&lt;dirn&gt;&gt;,&nbsp;as&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;another&nbsp;bomb&nbsp;finds&nbsp;a&nbsp;target.&nbsp;'&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dirn&nbsp;=&nbsp;(rand('north'&nbsp;,&nbsp;'south'&nbsp;,&nbsp;'east'&nbsp;,&nbsp;'west'))
<br>
&nbsp;&nbsp;&nbsp;}
<br>
;
<br>
</font><font face="Arial" size="2" color="#000000">
<br>
Note that this is a case where we can safely use an embedded expression within a single-quoted string in an EventList. Although it will result in the dirn property being evaluated several times per turn (somewhere around six), the fact that there are six calls to rand() for every time we see one of these atmosphere strings won't matter much in practice.
<br>
<br>
We override the discover() method of the bomb to set up the new SenseFuse, in such a way that the player character must be in a position to see it for the messages in explode() to be displayed to the player. In this case we could have achieved much the same effect by incorporating the message that's displayed into the group of statements governed by the </font><font face="Courier New" size="2" color="#000000">if(gPlayerChar.isIn(location))</font><font face="Arial" size="2" color="#000000"> statement, but that would not always be so convenient, and we're trying to illustrate a SenseFuse!
<br>

<br>
Later on we'll make this bomb a bit more interesting, for example by adding a <a href="noise.htm">Noise</a> object to make it tick. In the meantime note the use of the specialDesc property on the rubble; we override useSpecialDesc so that this specialDesc is displayed only after the bomb has gone off, and we set specialDescOrder to 70 (lower than the default of 100) so that the description of the new bomb crater etc. will come earlier in the listing of the room contents than other specialDescs and initDescs.
<br>
</font></font>

</body></html>
