<html><head><meta name="generator" content="Help & Manual 2.7.0"><title>AskForTopic</title><meta name="keywords" content="AskForTopic,beforeAction,getBestMatch"></meta></head>
<body bgcolor="#FFFFFF">
<table width="100%" border="0" cellspacing="0" cellpadding="3" bgcolor="#C0C0C0"><tr><td align="left">
<font face="Arial" size="3" color="#000000"><b>AskForTopic : <a href="asktelltopic.htm">AskTellTopic</a>
<br>
</b></font>

</td><td align="right"><font face="Arial" size="2"><a href="asktelltopic.htm">[Previous]</a> <a href="generalintroduction.htm">[Main]</a> <a href="askaboutfortopic.htm">[Next]</a></font></td></tr></table><br>

<font face="Arial" size="2" color="#000000">Just as an AskTopic deals with commands like ASK FRED ABOUT BEER so an AskForTopic handles commands like ASK FRED FOR BEER. The programming principles are just the same - but the game logic may be somewhat more complex. For one thing, as well as asking for game objects like the ring or a coin, the player could try asking NPCs for abstract things like advice or directions. For another, there are nearly always more variables to consider. If I ASK SARAH FOR ADVICE what advice she can relevantly give would very much depend on the state of play at the time, and might be very difficult to implement decently across the whole game. If I ASK SARAH FOR RING then how she responds will depend, not only on her willingness or otherwise to part with the ring, but also on whether she has the ring, or whether the PC has the ring, and maybe other things besides. It's up to us, as the game author, to handle all this.
<br>

<br>
Sarah's ring may be a good example to start with, since it's relatively straightforward. We know that once Sarah has got her ring she switches into the sarahFollowing state, and we'll assume that she isn't too keen to part with it thereafter. Therefore, if we put an AskForTopic @diamondRing in sarahFollowing, we can safely assume that Sarah does actually have the ring.
<br>

<br>
The reason the player character may want to request the ring back from Sarah is that the diamond is needed to cut open a couple of glass objects, the glass jar containing the blue crystal and the display case containing the golden banana. The PC may or may not have cut open the first of these before he hands the ring over to Sarah. If he then decides he needs the diamond to cut open the jar, he may try asking Sarah for the ring back. Sarah won't give it - but there's no reason why Sarah shouldn't do the cutting herself. So we'll assume that if the glass jar is accessible and not yet cut open when the PC asks Sarah for her ring, he'll explain that he needs it to cut open the jar and she duly obliges by doing it herself:
<br>

<br>
<font face="Courier New" size="2" color="#000000">++&nbsp;AskForTopic&nbsp;@diamondRing
<br>
&nbsp;&nbsp;&nbsp;"&lt;q&gt;Can&nbsp;I&nbsp;borrow&nbsp;your&nbsp;ring&nbsp;a&nbsp;moment,&nbsp;please?&lt;/q&gt;&nbsp;you&nbsp;ask.\b
<br>
&nbsp;&nbsp;&nbsp;&lt;q&gt;Whatever&nbsp;for,&nbsp;I've&nbsp;only&nbsp;just&nbsp;got&nbsp;it&nbsp;back!&lt;/q&gt;&nbsp;{the&nbsp;sarah/she}
<br>
&nbsp;&nbsp;&nbsp;complains.&nbsp;"
<br>
;
<br>

<br>
+++&nbsp;AltTopic&nbsp;
<br>
&nbsp;&nbsp;&nbsp;topicResponse
<br>
&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;q&gt;Can&nbsp;I&nbsp;borrow&nbsp;your&nbsp;diamond&nbsp;ring&nbsp;a&nbsp;moment,&nbsp;please?&lt;/q&gt;&nbsp;you&nbsp;ask.
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;q&gt;I&nbsp;need&nbsp;something&nbsp;hard&nbsp;to&nbsp;cut&nbsp;this&nbsp;glass&nbsp;jar&nbsp;open.&lt;/q&gt;\b
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;q&gt;Here,&nbsp;let&nbsp;me.&lt;/q&gt;&nbsp;{the&nbsp;sarah/she}&nbsp;replies,&nbsp;taking&nbsp;the&nbsp;jar.&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glassJar.moveInto(getActor);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newActorAction(getActor,&nbsp;CutWith,&nbsp;glassJar,&nbsp;diamondRing);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;q&gt;Here&nbsp;you&nbsp;are&nbsp;then,&lt;/q&gt;&nbsp;she&nbsp;declares,&nbsp;handing&nbsp;the&nbsp;now
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;opened&nbsp;glass&nbsp;jar&nbsp;to&nbsp;you.&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glassJar.moveInto(gPlayerChar);
<br>
&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;&nbsp;isActive&nbsp;=&nbsp;(getActor.canTouch(glassJar)&nbsp;&amp;&amp;&nbsp;!glassJar.isOpen)
<br>
;
<br>
</font><font face="Arial" size="2" color="#000000">
<br>
We'll handle cutting open the glass display case later, when we come to look at <a href="convnode.htm">ConvNode</a>. For now we'll proceed with a different example, the root and the carbuncle we need from Solomon. First we need to make Solomon prevent the PC from taking either the root or the carbuncle unless he's given permission for them to be taken. We'll add a gifted property to both the root and the carbuncle (add a line saying </font><font face="Courier New" size="2" color="#000000">gifted&nbsp;=&nbsp;nil</font><font face="Arial" size="2" color="#000000"> to the definition of both carbuncle and baarasRoot) and then override Solomon's beforeAction() method (we override it on solomon rather than one of his ActorStates since he could be in any of his ActorStates when the PC attempts to take the root or the carbuncle):
<br>

<br>
</font><font face="Courier New" size="2" color="#000000">solomon&nbsp;:&nbsp;Person&nbsp;'middle-aged&nbsp;middle&nbsp;aged&nbsp;man'&nbsp;'middle-aged&nbsp;man'&nbsp;@solomonChair
<br>
&nbsp;&nbsp;"He's&nbsp;quite&nbsp;good-looking&nbsp;in&nbsp;a&nbsp;middle-eastern&nbsp;sort&nbsp;of&nbsp;way,&nbsp;with&nbsp;long&nbsp;curly
<br>
&nbsp;&nbsp;&nbsp;black&nbsp;hair&nbsp;that's&nbsp;just&nbsp;starting&nbsp;to&nbsp;go&nbsp;grey,&nbsp;and&nbsp;a&nbsp;neatly&nbsp;kept&nbsp;beard.&nbsp;He's
<br>
&nbsp;&nbsp;&nbsp;dressed&nbsp;in&nbsp;a&nbsp;purple&nbsp;cloak.&nbsp;"
<br>
&nbsp;&nbsp;isHim&nbsp;=&nbsp;true&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;posture&nbsp;=&nbsp;sitting
<br>
&nbsp;&nbsp;properName&nbsp;=&nbsp;'King&nbsp;Solomon'
<br>
&nbsp;&nbsp;globalParamName&nbsp;=&nbsp;'solomon'
<br>
&nbsp;&nbsp;<b>beforeAction()
<br>
&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;inherited;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;if(gActionIs(Take)&nbsp;||&nbsp;gActionIs(TakeFrom))
<br>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(gDobj&nbsp;is&nbsp;in&nbsp;(baarasRoot,&nbsp;carbuncle)&nbsp;&amp;&amp;&nbsp;!gDobj.gifted)
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"As&nbsp;you&nbsp;reach&nbsp;out&nbsp;to&nbsp;take&nbsp;{the&nbsp;dobj/him},&nbsp;{the&nbsp;solomon/he}&nbsp;calmly
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;but&nbsp;firmly&nbsp;interrupts&nbsp;you.
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;q&gt;You&nbsp;do&nbsp;not&nbsp;take&nbsp;a&nbsp;king's&nbsp;property&nbsp;without&nbsp;his&nbsp;permission.&lt;/q&gt;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;he&nbsp;tells&nbsp;you&nbsp;sternly.&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(gDobj&nbsp;==&nbsp;bronzeBowl&nbsp;&amp;&amp;&nbsp;gRevealed('bowl-returned'))
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Before&nbsp;you&nbsp;can&nbsp;touch&nbsp;the&nbsp;bowl,&nbsp;{the&nbsp;solomon/he}&nbsp;remarks,&nbsp;&lt;q&gt;Since
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;I've&nbsp;offered&nbsp;to&nbsp;reward&nbsp;you&nbsp;for&nbsp;returning&nbsp;that&nbsp;bowl,&nbsp;I&nbsp;think&nbsp;you
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;had&nbsp;better&nbsp;leave&nbsp;it&nbsp;alone.&lt;/q&gt;&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;}</b>
<br>
;
<br>
</font><font face="Arial" size="2" color="#000000">
<br>
For both the root and the carbuncle, we want an AskForTopic that causes the request to be denied until the PC has given Solomon his bowl back, and regarded as superfluous once the root or carbuncle has been taken. Here's how we might do it for the root (nesting the AskForTopic inside the solomonTalking state):
<br>

<br>
</font><font face="Courier New" size="2" color="#000000">++&nbsp;AskForTopic&nbsp;@baarasRoot
<br>
&nbsp;&nbsp;&nbsp;"&lt;q&gt;May&nbsp;I&nbsp;have&nbsp;that&nbsp;strange&nbsp;looking&nbsp;root?&lt;/q&gt;&nbsp;you&nbsp;ask.\b
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;q&gt;No,&nbsp;I'm&nbsp;studying&nbsp;it.&lt;/q&gt;&nbsp;he&nbsp;replies.&nbsp;"
<br>
;
<br>

<br>
+++&nbsp;AltTopic
<br>
&nbsp;&nbsp;topicResponse
<br>
&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;"&lt;q&gt;May&nbsp;I&nbsp;have&nbsp;that&nbsp;root&nbsp;you've&nbsp;got&nbsp;there?&lt;/q&gt;&nbsp;you&nbsp;ask.\b
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;q&gt;Help&nbsp;yourself.&lt;/q&gt;&nbsp;he&nbsp;replies.&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;baarasRoot.gifted&nbsp;=&nbsp;true;
<br>
&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;isActive&nbsp;=&nbsp;gRevealed('bowl-returned')&nbsp;&nbsp;
<br>
;
<br>

<br>
+++&nbsp;AltTopic&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;"&lt;q&gt;May&nbsp;I&nbsp;take&nbsp;that&nbsp;root?&lt;/q&gt;&nbsp;you&nbsp;request.\b
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;q&gt;You&nbsp;already&nbsp;have.&lt;/q&gt;&nbsp;{the&nbsp;solomon/he}&nbsp;points&nbsp;out.&nbsp;"
<br>
&nbsp;&nbsp;isActive&nbsp;=&nbsp;(baarasRoot.moved)
<br>
;
<br>
</font><font face="Arial" size="2" color="#000000">
<br>
This is fine, except that we have to repeat almost exactly the same thing for the carbuncle. This may not be too bad here, but for multiple objects it could become tedious, so it may be worth exploring an alternative approach. For this we need to abandon the nice neat declarative syntax of AltTopics and revert to the bad old ways of if and else statements:
<br>

<br>
/* Approach 2 - messier but more concise for multiple objects: */
<br>

<br>
</font><font face="Courier New" size="2" color="#000000">++&nbsp;AskForTopic&nbsp;[baarasRoot,&nbsp;carbuncle]
<br>
&nbsp;&nbsp;handleTopic(fromActor,&nbsp;topic)
<br>
&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;An&nbsp;AskForTopic&nbsp;matches&nbsp;a&nbsp;ResolvedTopic&nbsp;-&nbsp;to&nbsp;get&nbsp;back&nbsp;to&nbsp;the&nbsp;object
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;match&nbsp;we&nbsp;need&nbsp;to&nbsp;use&nbsp;getBestMatch&nbsp;*/
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;local&nbsp;obj&nbsp;=&nbsp;topic.getBestMatch();
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Set&nbsp;a&nbsp;message&nbsp;parameter&nbsp;for&nbsp;convenience&nbsp;*/
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gMessageParams(obj);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Start&nbsp;with&nbsp;a&nbsp;question&nbsp;common&nbsp;to&nbsp;all&nbsp;situations&nbsp;*/
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;q&gt;May&nbsp;I&nbsp;take&nbsp;{the&nbsp;obj/him}?&lt;/q&gt;&nbsp;you&nbsp;ask.\b";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Handle&nbsp;Solomon's&nbsp;response&nbsp;according&nbsp;to&nbsp;the&nbsp;state&nbsp;of&nbsp;play&nbsp;*/
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(obj.moved)
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;q&gt;You&nbsp;already&nbsp;have.&lt;/q&gt;&nbsp;{the&nbsp;solomon/he}&nbsp;points&nbsp;out.&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;if(gRevealed('bowl-returned'))
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;q&gt;Help&nbsp;yourself,&lt;/q&gt;&nbsp;{the&nbsp;solomon/he}&nbsp;offers&nbsp;with&nbsp;an&nbsp;expansive
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wave&nbsp;of&nbsp;the&nbsp;hand,&nbsp;&lt;q&gt;Is&nbsp;there&nbsp;anything&nbsp;else&nbsp;you'd&nbsp;like?&lt;/q&gt;&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;obj.gifted&nbsp;=&nbsp;true;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;q&gt;No,&nbsp;I'm&nbsp;studying&nbsp;it.&lt;/q&gt;&nbsp;he&nbsp;replies.&nbsp;";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;}
<br>
;
<br>
</font><font face="Arial" size="2" color="#000000">
<br>
It is less immediately obvious how this works, but it's not too bad, and certainly more compact that writing out a second AskForTopic with its associated pair of AltTopics, and has the merit that it could easily be extended to a large number of objects simply by adding them to the match list at the start of the object declaration. One downside, though, is that the exchange between Solomon and the PC is rigidly stereotyped.
<br>

<br>
A third possibility is to define a special class that handles requests for rewards from Solomon, allow some variety and customization within the class, and then instantiate the class for each item we want it to handle:
<br>

<br>
</font><font face="Courier New" size="2" color="#000000">/*&nbsp;Approach&nbsp;3&nbsp;-&nbsp;perhaps&nbsp;the&nbsp;best&nbsp;compromise&nbsp;for&nbsp;several&nbsp;similar&nbsp;cases&nbsp;*/
<br>

<br>
class&nbsp;AskForRewardTopic&nbsp;:&nbsp;AskForTopic
<br>
&nbsp;&nbsp;&nbsp;topicResponse
<br>
&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;We&nbsp;can&nbsp;use&nbsp;the&nbsp;matchObj&nbsp;property&nbsp;to&nbsp;get&nbsp;at&nbsp;the&nbsp;object&nbsp;this&nbsp;topic&nbsp;matches,
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;provided&nbsp;we&nbsp;always&nbsp;define&nbsp;it&nbsp;to&nbsp;match&nbsp;one&nbsp;and&nbsp;only&nbsp;one&nbsp;*/
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;First&nbsp;we&nbsp;get&nbsp;the&nbsp;player&nbsp;character&nbsp;to&nbsp;ask&nbsp;for&nbsp;the&nbsp;object&nbsp;*/
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;requestQuestions.obj&nbsp;=&nbsp;matchObj;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;requestQuestions.doScript;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;If&nbsp;the&nbsp;matchObj&nbsp;has&nbsp;moved&nbsp;the&nbsp;player&nbsp;character&nbsp;has&nbsp;already&nbsp;taken&nbsp;it&nbsp;*/
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(matchObj.moved)
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;q&gt;You&nbsp;already&nbsp;have.&lt;/q&gt;&nbsp;{the&nbsp;solomon/he}&nbsp;points&nbsp;out.&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Otherwise,&nbsp;if&nbsp;the&nbsp;bowl&nbsp;has&nbsp;been&nbsp;returned,&nbsp;grant&nbsp;the&nbsp;request&nbsp;*/
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;if(gRevealed('bowl-returned'))&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grantRequest;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;matchObj.gifted&nbsp;=&nbsp;true;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Otherwise,&nbsp;refuse&nbsp;the&nbsp;request&nbsp;*/&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;refuseRequest;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;&nbsp;requestQuestions&nbsp;:&nbsp;ShuffledEventList
<br>
&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;[
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'&lt;q&gt;May&nbsp;I&nbsp;take&nbsp;&lt;&lt;obj.theName&nbsp;>>,&nbsp;please?&lt;/q&gt;&nbsp;you&nbsp;ask.\b'&nbsp;,
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'&lt;q&gt;Could&nbsp;I&nbsp;have&nbsp;&lt;&lt;obj.theName&gt;&gt;?&lt;/q&gt;&nbsp;you&nbsp;request.\b'&nbsp;,
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'&lt;q&gt;I\'d&nbsp;like&nbsp;to&nbsp;take&nbsp;&lt;&lt;obj.theName&gt;&gt;,&nbsp;is&nbsp;that&nbsp;okay?&lt;/q&gt;&nbsp;you&nbsp;ask.\b',
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'&lt;q&gt;That&nbsp;&lt;&lt;obj.name&gt;&gt;&nbsp;looks&nbsp;interesting,&nbsp;may&nbsp;I&nbsp;take&nbsp;it?&lt;/q&gt;&nbsp;you&nbsp;ask.\b'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;]&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;obj&nbsp;=&nbsp;nil
<br>
&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;&nbsp;refuseRequest&nbsp;=&nbsp;"&lt;q&gt;No,&nbsp;I'm&nbsp;studying&nbsp;it.&lt;/q&gt;&nbsp;he&nbsp;replies.&lt;.p&gt;"
<br>
&nbsp;&nbsp;&nbsp;grantRequest&nbsp;=&nbsp;"&lt;q&gt;Help&nbsp;yourself,&lt;/q&gt;&nbsp;{the&nbsp;solomon/he}&nbsp;offers&nbsp;with&nbsp;an&nbsp;expansive
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wave&nbsp;of&nbsp;the&nbsp;hand,&nbsp;&lt;q&gt;Is&nbsp;there&nbsp;anything&nbsp;else&nbsp;you'd&nbsp;like?&lt;/q&gt;&lt;.p&gt;"
<br>
;
<br>

<br>
/*&nbsp;Then&nbsp;add&nbsp;an&nbsp;AskForRewardTopic&nbsp;for&nbsp;each&nbsp;of&nbsp;the&nbsp;possible&nbsp;rewards:&nbsp;*/
<br>

<br>
++&nbsp;rootTopic&nbsp;:&nbsp;AskForRewardTopic&nbsp;@baarasRoot&nbsp;&nbsp;&nbsp;&nbsp;
<br>
;
<br>

<br>
++&nbsp;AskForRewardTopic&nbsp;@carbuncle&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;refuseRequest&nbsp;=&nbsp;"&lt;q&gt;No,&nbsp;it&nbsp;was&nbsp;a&nbsp;personal&nbsp;gift&nbsp;from&nbsp;the&nbsp;Queen&nbsp;of&nbsp;Sheba
<br>
&nbsp;&nbsp;&nbsp;&nbsp;and&nbsp;I&nbsp;see&nbsp;no&nbsp;reason&nbsp;why&nbsp;you&nbsp;should&nbsp;have&nbsp;it.&lt;/q&gt;&nbsp;he&nbsp;replies.&lt;.p&gt;"
<br>
&nbsp;&nbsp;&nbsp;grantRequest&nbsp;=&nbsp;"&lt;q&gt;Very&nbsp;well,&nbsp;take&nbsp;it,&lt;/q&gt;&nbsp;{the&nbsp;solomon/he}&nbsp;sighs,&nbsp;&lt;q&gt;It\'s
<br>
&nbsp;&nbsp;&nbsp;&nbsp;only&nbsp;a&nbsp;pretty&nbsp;bauble,&nbsp;after&nbsp;all.&lt;/q&gt;&lt;.p&gt;"&nbsp;
<br>
;
<br>
</font><font face="Arial" size="2" color="#000000">
<br>

<br>
</font></font>

</body></html>
