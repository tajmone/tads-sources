<html><head><meta name="generator" content="Help & Manual 2.7.0"><title>LabeledDial</title><meta name="keywords" content="LabeledDial,curSetting,validSettings,makeSetting,isValidSetting"></meta></head>
<body bgcolor="#FFFFFF">
<table width="100%" border="0" cellspacing="0" cellpadding="3" bgcolor="#C0C0C0"><tr><td align="left">
<font face="Arial" size="3" color="#000000"><b>LabeledDial : <a href="dial.htm">Dial</a>
<br>
</b></font>

</td><td align="right"><font face="Arial" size="2"><a href="button.htm">[Previous]</a> <a href="generalintroduction.htm">[Main]</a> <a href="springlever.htm">[Next]</a></font></td></tr></table><br>

<font face="Arial" size="2" color="#000000">The time has come to set sail in our ship. The panel on its quarterdeck is described as having a hexagonal hole, a wheel, and a lever. In order to sail the ship the player has to insert the hexagonal crystal in the hole, set the wheel to a destination, and pull the autopilot handle. The ship has four possible destinations, namely the north, east, south and west shores of the lake. It starts by the north shore, so the player will obviously have to turn the wheel to one of the other destinations to set sail for the first time.
<br>

<br>
We have already implemented the hexagonal hole (as a <a href="restrictedcontainer.htm">RestrictedContainer</a>), so the next task is to construct the wheel. This in essence will be a thinly disguised dial that can be turned to N, S, W or E, so we shall use a LabeledDial to implement it. We list its possible settings in the <b>validSettings</b> property (which should always contain a list of strings). By default LabeledDial.<b>isValidSetting(val)</b> determines whether val is a valid setting by checking that it appears in the validSettings list, after converting both to upper case for the purpose of the comparison (thereby making the check non-case-sensitive). This does not itself convert the <b>curSetting</b> (current setting) property to upper case, which is what we want here, so we need to override <b>makeSetting(val)</b> so that this conversion takes place. This conversion is desirable both because it looks better to have the game report "This shows that the wheel is currently turned to E" than "This shows that the wheel is currently turned to e" (even if the player types TURN WHEEL TO e), and because it slightly simplifies the other use we are going to make of the curSetting property here, namely to determine the direction and destination of travel that correspond to the current setting of the wheel:
<br>

<br>
<font face="Courier New" size="2" color="#000000">++&nbsp;wheel&nbsp;:&nbsp;LabeledDial,&nbsp;Component&nbsp;'wheel/pointer'&nbsp;'wheel'
<br>
&nbsp;&nbsp;"It&nbsp;looks&nbsp;much&nbsp;like&nbsp;a&nbsp;traditional&nbsp;wooden&nbsp;spoked&nbsp;ship's&nbsp;wheel,&nbsp;but&nbsp;incorporates&nbsp;a&nbsp;
<br>
&nbsp;&nbsp;&nbsp;pointer&nbsp;that&nbsp;indicates&nbsp;the&nbsp;four&nbsp;points&nbsp;of&nbsp;the&nbsp;compass.&nbsp;This&nbsp;shows&nbsp;that&nbsp;the&nbsp;wheel
<br>
&nbsp;&nbsp;&nbsp;is&nbsp;currently&nbsp;turned&nbsp;to&nbsp;&lt;&lt;curSetting&gt;&gt;.&nbsp;"
<br>
&nbsp;&nbsp;&nbsp;validSettings&nbsp;=&nbsp;['N',&nbsp;'S',&nbsp;'E',&nbsp;'W']
<br>
&nbsp;&nbsp;&nbsp;curSetting&nbsp;=&nbsp;'N'
<br>
&nbsp;&nbsp;&nbsp;directions&nbsp;=&nbsp;['north',&nbsp;'south',&nbsp;'east',&nbsp;'west']
<br>
&nbsp;&nbsp;&nbsp;destinations&nbsp;=&nbsp;[lakeRoom,&nbsp;southShore,&nbsp;eastShore,&nbsp;westShore]
<br>
&nbsp;&nbsp;&nbsp;makeSetting(val)
<br>
&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curSetting&nbsp;=&nbsp;val.toUpper();
<br>
&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;&nbsp;curDirection&nbsp;=&nbsp;(directions&nbsp;[&nbsp;validSettings.indexOf(curSetting)&nbsp;]&nbsp;)
<br>
&nbsp;&nbsp;&nbsp;curDestination&nbsp;=&nbsp;(destinations&nbsp;[&nbsp;validSettings.indexOf(curSetting)&nbsp;]&nbsp;)
<br>
;
<br>
</font><font face="Arial" size="2" color="#000000">
<br>

<br>
</font></font>

</body></html>
