<html><head><meta name="generator" content="Help & Manual 2.7.0"><title>BasicContainer</title><meta name="keywords" content="BasicContainer"></meta></head>
<body bgcolor="#FFFFFF">
<table width="100%" border="0" cellspacing="0" cellpadding="3" bgcolor="#C0C0C0"><tr><td align="left">
<font face="Arial" size="3" color="#000000"><b>BasicContainer : <a href="bulklimiter.htm">BulkLimiter</a>
<br>
</b></font>

</td><td align="right"><font face="Arial" size="2"><a href="surface.htm">[Previous]</a> <a href="generalintroduction.htm">[Main]</a> <a href="container.htm">[Next]</a></font></td></tr></table><br>

<font face="Arial" size="2" color="#000000">Next to a Surface, the simplest kind of BulkLimiter is a Container, which, as you'd expect, is simply something that can contain other things. The main difference between a Surface and a Container is that whereas the contents of a surface are regarded as being <i>on</i> the surface, the contents of a Container are regarded as being <i>in</i> the Container.
<br>

<br>
The other main difference between a Container and a Surface is that, unlike a Surface, a Container can be either <b>open</b> or <b>closed</b>. If a Container is open its contents are visible and can be removed from the Container, while other things can be inserted into the Container (subject to restrictions of bulk and so forth). If, on the other hand a Container is closed, nothing can be inserted into or removed from it, and, unless the Container is made of some transparent material, its contents will be invisible.
<br>

<br>
A basic container is an object that can enclose its contents. This is the core of the Container type, but this class only has the bare-bones sense-related enclosing features, without any action implementation. This can be used for cases where an object isn't meant to have its contents be manipulable by the player (so we don't want to allow "put in" and so on), but where we do want the ability to conceal our contents when we're closed.
<br>

<br>
BasicContainer defines a few properties of its own, of which the most significant are:
<br>

<br>
<table border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td width="14"><font face="Arial" size="2" color="#000000"><b></b><font face="Symbol" size="2" color="#000000">&#183;</font><b></b></font></td><td><font face="Arial" size="2" color="#000000"><b>isOpen</b> - defines whether this BasicContainer is open or closed. By default, this property is true. An open box, for example, would have isOpen true, whereas it would be nil on a sealed glass tube.
&nbsp;<br>
</font></td></tr></table><table border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td width="14"><font face="Arial" size="2" color="#000000"><b></b><font face="Symbol" size="2" color="#000000">&#183;</font><b></b></font></td><td><font face="Arial" size="2" color="#000000"><b>material</b> - the material from which this container is made; this basically defines whether and how an object in the container can be sensed if the container is closed. The default is <i>adventium</i>, which prevents an object in a closed container being sensed at all. If the material were <i>glass</i>, we could see what was inside, but not otherwise interact with it. If it were <i>paper</i>, we could smell or hear an object in the closed container (assuming it was noisy and smelly) but not see or touch it.
&nbsp;<br>
</font></td></tr></table><table border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td><font face="Arial" size="2" color="#000000"></font></td><td></td></tr></table><font face="Arial" size="2" color="#000000">
<br>
In practice, it's hard to think of examples where this class would be useful (as opposed to one of its subclasses). One possible use would be to have an object permanently encased in a glass container - but then there would seem to be no reason not to have a single object which described itself as a glass container encasing a dead butterfly or whatever it is. On the other hand, if the container can be broken open at some point and the contents removed, never to be replaced, one could use a BasicContainer for that.
<br>

<br>
To illustrate the fact that if a closed container is transparent you can see its contents but not touch them (and hence not manipulate them), let's create a sealed transparent container with something inside. To make the jar transparent we override its <b>material</b> property to <b>glass</b>.
<br>

<br>
</font><font face="Courier New" size="2" color="#000000">glassJar&nbsp;:&nbsp;BasicContainer&nbsp;'glass&nbsp;jar'&nbsp;'glass&nbsp;jar'&nbsp;@mainCave
<br>
&nbsp;&nbsp;"It&nbsp;seems&nbsp;to&nbsp;be&nbsp;sealed&nbsp;fast.&nbsp;"
<br>
&nbsp;&nbsp;isOpen&nbsp;=&nbsp;nil
<br>
&nbsp;&nbsp;bulkCapacity&nbsp;=&nbsp;4
<br>
&nbsp;&nbsp;material&nbsp;=&nbsp;glass
<br>
;
<br>

<br>
+&nbsp;hexCrystal&nbsp;:&nbsp;Thing&nbsp;'hexagonal&nbsp;blue&nbsp;crystal'&nbsp;'blue&nbsp;crystal'
<br>
&nbsp;&nbsp;"The&nbsp;crystal&nbsp;is&nbsp;almost&nbsp;cylindrical,&nbsp;except&nbsp;that&nbsp;it&nbsp;has&nbsp;a&nbsp;hexagonal
<br>
&nbsp;&nbsp;&nbsp;cross-section.&nbsp;It's&nbsp;about&nbsp;eight&nbsp;inches&nbsp;long&nbsp;and&nbsp;pulsates&nbsp;with
<br>
&nbsp;&nbsp;&nbsp;a&nbsp;faint&nbsp;blue&nbsp;light.&nbsp;"
<br>
&nbsp;&nbsp;brightness&nbsp;=&nbsp;1
<br>
&nbsp;&nbsp;bulk&nbsp;=&nbsp;2
<br>
&nbsp;&nbsp;weight&nbsp;=&nbsp;2
<br>
;
<br>
</font><font face="Arial" size="2" color="#000000">
<br>
Note that since we have described the crystal as pulsating with a faint blue light we give it a brightness of 1 - enough to make it self-illuminating in the dark but not enough for it to illuminate anything else. To see the effect, try carrying the crystal (by carrying the jar) into a dark room. We'll implement a way of <a href="restrictedcontainer.htm#openjar">getting the crystal out of the jar</a> shortly.
<br>

<br>
</font></font>

</body></html>
