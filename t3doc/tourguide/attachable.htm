<html><head><meta name="generator" content="Help & Manual 2.7.0"><title>Attachable</title><meta name="keywords" content="Attachable,attachedObjects,isAttachedTo,canAttachTo,canDetachFrom,isPermanentlyAttachedTo,cannotDetachMsgFor,handleAttach,handleDetach,moveWhileAttached,travelWhileAttached,delegated,isMajorItemFor,explainCannotAttachTo"></meta></head>
<body bgcolor="#FFFFFF">
<table width="100%" border="0" cellspacing="0" cellpadding="3" bgcolor="#C0C0C0"><tr><td align="left">
<font face="Arial" size="3" color="#000000"><b>Attachable : object
<br>
</b></font>

</td><td align="right"><font face="Arial" size="2"><a href="attachables-overview.htm">[Previous]</a> <a href="generalintroduction.htm">[Main]</a> <a href="nearbyattachable.htm">[Next]</a></font></td></tr></table><br>

<font face="Arial" size="2" color="#000000">The Attachable class makes the handling of attaching and detaching objects to and from each other a bit easier, but it does also leave quite a bit to the game author to implement. Where the Attachable class helps is first in making the ATTACH command symmetrical (so that ATTACH A to B is handled the same as ATTACH B to A) and secondly in providing a framework for specifying precisely what happens when two objects are ATTACHEd or DETACHed. To work with Attachables successfully, it is important to understand both this framework, and also what handling the Attachable class does and does not itself provide.
<br>

<br>
Firstly, an Attachable object defines an <b>attachedObjects</b> property which contains a list of the other objects to which it is attached. This list is automatically maintained on both objects involved in an ATTACH X TO Y or DETACH X FROM Y command. Moreover the method <b>isAttachedTo(obj)</b> can be used to test whether an Attachable object is currently attached to obj.
<br>

<br>
An Attachable object also defines a method <b>canAttachTo(obj)</b> which determines whether the Attachable can be attached to obj. For this to return true, obj must also be an Attachable, but one that overrides canAttachTo(obj) to allow it to be attached to the first Attachable. To make this doubtless confusing explanation a bit clearer, this means that if you want to be able to ATTACH X TO Y then both X and Y must be of class Attachable, and <i>either</i> X <i>or</i> Y must override canAttachTo(obj) to return true when obj is the other object. So you must either override X.canAttachObj(obj) to return true when obj==Y, or override Y.canAttach(obj) to return true when obj==X. If X is the only object that can be attached to Y, then you could do this with:
<br>

<br>
<font face="Courier New" size="2" color="#000000">X&nbsp;:&nbsp;Attachable,&nbsp;Thing&nbsp;...
<br>
&nbsp;&nbsp;....
<br>
&nbsp;&nbsp;canAttachTo(obj)&nbsp;{&nbsp;return&nbsp;obj&nbsp;==&nbsp;Y;&nbsp;}
<br>
&nbsp;&nbsp;...
<br>
;
<br>
</font><font face="Arial" size="2" color="#000000">
<br>
Note that Attachable is a mix-in class, so we must also add Thing or some Thing-derived class to the class list.
<br>

<br>
The <b>canDetachFrom(obj)</b> method is similar, except that it generally allows X to be detached from Y unless either X.canDetachFrom or Y.canDetachFrom has been overridden to prevent it, or either X or Y is of class PermanentAttachment (or <b>isPermanentlyAttachedTo(obj)</b> has been overridden with some other condition).
<br>

<br>
In the event of either attachment or detachment being disallowed, the method <b>explainCannotAttachTo(obj)</b> or <b>cannotDetachMsgFor(obj)</b> is called; these can be overridden with customised messages if desired.
<br>

<br>
It is important to realize (a) that this is about as far as the library takes it and (b) that this is never enough. As things stands, if you bring X into a location and attach it to Y which you find there, you can walk all over the map carrying X while X is considered attached to Y and Y remains where it is (and out of scope until to return to its location). It is hard to conceive of a situation where this would be what you actually want.
<br>

<br>
Because the library can hardly guess what you do want (should Y be dragged along with X, or detach itself from X, or what?) it is left up to you to define the rest of the behaviour, but the library does define four (by default empty) methods to help you do this: <b>handleAttach(other)</b>, <b>moveWhileAttached(movedObj, newCont),</b>  <b>handleDetach(other) </b>and <b>travelWhileAttached(movedObj, traveler, connector)</b>.  The first of these is called on both objects in an ATTACH command (so need normally be defined on one of them) and the last on both objects in a DETACH command (so again need only be defined on one of them); moveWhileAttached(movedObj, newCont) is called on movedObj and every object attached to it when movedObj is about to be moved into newCont. The final case arises, for example, when walking into a room, attaching X to Y, and then walking away with X, since while X remains held by the player character, it does not change container; although in the plain English sense X is being moved when you walk away with it, it is not being moved in the sense that would result in a call to moveWhileAttached. To deal with this situation we use <b>travelWhileAttached</b>.
<br>

<br>
Not all attachment relationships are symmetrical. If we attach a red wire to a green wire it doesn't much matter if the red wire is described as attached to the green wire or the green to the red, but if we attach a flag to a battleship, we expect to see the flag described as attached to the battleship, not the battleship to the flag. To handle this Attachable provides an <b>isMajorItemFor(obj)</b> method, which should return true on the major item when obj is the minor item; for example you might define
<br>

<br>
</font><font face="Courier New" size="2" color="#000000">battleship&nbsp;:&nbsp;Attachable,&nbsp;Enterable
<br>
&nbsp;&nbsp;...
<br>
&nbsp;&nbsp;isMajorItemFor(obj)&nbsp;{return&nbsp;obj==flag;&nbsp;}&nbsp;</font><font face="Arial" size="2" color="#000000">.
<br>
;
<br>

<br>

<br>
But before we get too deep into such complications, we'll start will a very simple case. You'll recall that back on the north side of the lake we had a platinum ring and a diamond. We'll suppose that the diamond can simply be clipped back into the ring to form a diamond ring; in this case we simply want ATTACH DIAMOND TO RING or ATTACH RING TO DIAMOND to replace both the diamond and the ring with a single diamond ring object. We could put the handling on either object; we'll use the ring:
<br>

<br>
</font><font face="Courier New" size="2" color="#000000">ring&nbsp;:&nbsp;<b>Attachable</b>,&nbsp;Thing&nbsp;'platinum&nbsp;ring/band/recess'&nbsp;'platinum&nbsp;ring'
<br>
&nbsp;&nbsp;"It's&nbsp;a&nbsp;plain&nbsp;platinum&nbsp;band,&nbsp;with&nbsp;a&nbsp;small&nbsp;empty&nbsp;recess&nbsp;on&nbsp;one&nbsp;side.&nbsp;"&nbsp;
<br>
&nbsp;&nbsp;&nbsp;location&nbsp;=&nbsp;dressingTable.subContainer
<br>
&nbsp;&nbsp;&nbsp;<b>canAttachTo(obj)&nbsp;{&nbsp;return&nbsp;obj==diamond;&nbsp;}
<br>
&nbsp;&nbsp;&nbsp;handleAttach(other)
<br>
&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;diamondRing.moveInto(gActor);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;moveInto(nil);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;other.moveInto(nil);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"{You/he}&nbsp;snap{s}&nbsp;the&nbsp;diamond&nbsp;back&nbsp;into&nbsp;its&nbsp;setting&nbsp;on&nbsp;the&nbsp;ring.&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;&nbsp;getFacets()&nbsp;{&nbsp;return&nbsp;[diamondRing];&nbsp;}
<br>
</b>;
<br>
</font><font face="Arial" size="2" color="#000000">
<br>
Note that we start by adding Attachable to the start of ring's class list. When the diamond is attached to the ring we move the diamond ring into the actor performing the action, since it's reasonable to suppose that this is where it would end up unless the actor made a point of putting it down again. Finally, we override getFacets so that if we have just referred to the ring without the diamond, the pronoun 'it' will refer to the diamond ring after the transformation. We then need to make minimal changes to the diamond object:
<br>

<br>
</font><font face="Courier New" size="2" color="#000000">diamond&nbsp;:&nbsp;<b>Attachable</b>,&nbsp;Thing&nbsp;'sparkle'&nbsp;'sparkle'&nbsp;@pathEnd
<br>
&nbsp;&nbsp;"It&nbsp;looks&nbsp;like&nbsp;a&nbsp;genuine&nbsp;diamond&nbsp;-&nbsp;and&nbsp;a&nbsp;valuable&nbsp;one&nbsp;too,&nbsp;exquisitely&nbsp;cut
<br>
&nbsp;&nbsp;&nbsp;and&nbsp;multifaceted.&nbsp;"
<br>
&nbsp;&nbsp;iobjFor(CutWith)&nbsp;{&nbsp;verify()&nbsp;{&nbsp;}&nbsp;}
<br>
&nbsp;&nbsp;initSpecialDesc&nbsp;=&nbsp;""
<br>
&nbsp;&nbsp;...
<br>
&nbsp;&nbsp;renamed&nbsp;=&nbsp;nil
<br>
&nbsp;&nbsp;<b>getFacets()&nbsp;{&nbsp;return&nbsp;[diamondRing];&nbsp;}</b>
<br>
;
<br>
</font><font face="Arial" size="2" color="#000000">
<br>
Now we'll try something more complicated. Some way back we left our intrepid adventurer stranded on the south side of the chasm - or least, with no further to go once he's got there. We'll now suppose that the tunnel to the south leads to a steel door that can only be operated by pressing a button that's concealed behind a loose stone. The only problem is that the wires have been cut, so before the button will work it must be detached from its fitting and repairs made to the wires. We'll implement the button and its container as Attachables, and the wires as <a href="nearbyattachable.htm">NearbyAttachables</a>.
<br>

<br>
The first step is to provide the passage south from the chasm and the location by the steel door:
<br>

<br>
</font><font face="Courier New" size="2" color="#000000">chasmLedge&nbsp;:&nbsp;DarkRoom&nbsp;'Ledge&nbsp;of&nbsp;Chasm'&nbsp;'the&nbsp;ledge&nbsp;of&nbsp;the&nbsp;chasm'
<br>
&nbsp;&nbsp;"A&nbsp;deep,&nbsp;wide&nbsp;chasm&nbsp;splits&nbsp;the&nbsp;ground&nbsp;immediately&nbsp;to&nbsp;the&nbsp;north&nbsp;of&nbsp;this
<br>
&nbsp;&nbsp;&nbsp;narrow&nbsp;ledge,&nbsp;while&nbsp;a&nbsp;dark&nbsp;tunnel&nbsp;runs&nbsp;south.&nbsp;Another&nbsp;tunnel&nbsp;can&nbsp;be&nbsp;
<br>
&nbsp;&nbsp;&nbsp;seen&nbsp;leading&nbsp;north&nbsp;from&nbsp;the&nbsp;far&nbsp;side&nbsp;of&nbsp;the&nbsp;chasm.&nbsp;"
<br>
&nbsp;&nbsp;north&nbsp;=&nbsp;deepChasm
<br>
&nbsp;&nbsp;inRoomName(pov)&nbsp;
<br>
&nbsp;&nbsp;{&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;'on&nbsp;the&nbsp;'&nbsp;+&nbsp;(pov.isIn(deepChasm)&nbsp;?&nbsp;'south'&nbsp;:&nbsp;'far')&nbsp;+&nbsp;'&nbsp;ledge&nbsp;of&nbsp;the&nbsp;chasm';&nbsp;
<br>
&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;<b>south&nbsp;=&nbsp;tunnelFromChasm</b>
<br>
;
<br>

<br>
+&nbsp;tunnelFromChasm&nbsp;:&nbsp;ThroughPassage&nbsp;'dark&nbsp;tunnel'&nbsp;'dark&nbsp;tunnel'
<br>
&nbsp;&nbsp;"The&nbsp;dark&nbsp;tunnel&nbsp;runs&nbsp;south&nbsp;from&nbsp;here.&nbsp;"
<br>
&nbsp;&nbsp;noteTraversal(traveler)&nbsp;{&nbsp;"You&nbsp;walk&nbsp;a&nbsp;long&nbsp;way&nbsp;down&nbsp;the&nbsp;tunnel.&nbsp;";&nbsp;}
<br>
;
<br>

<br>
tunnelEnd&nbsp;:&nbsp;DarkRoom&nbsp;'End&nbsp;of&nbsp;Tunnel'&nbsp;'the&nbsp;end&nbsp;of&nbsp;the&nbsp;tunnel'
<br>
&nbsp;&nbsp;"The&nbsp;tunnel&nbsp;from&nbsp;the&nbsp;north&nbsp;comes&nbsp;to&nbsp;an&nbsp;abrupt&nbsp;end&nbsp;before
<br>
&nbsp;&nbsp;&lt;&lt;blankSteelDoor.isOpen&nbsp;?&nbsp;'a&nbsp;large&nbsp;opening&nbsp;into&nbsp;a&nbsp;well-lit
<br>
&nbsp;&nbsp;&nbsp;corridor&nbsp;to&nbsp;the&nbsp;south'&nbsp;:'&nbsp;a&nbsp;blank&nbsp;steel&nbsp;door'&gt;&gt;.&nbsp;There&nbsp;is&nbsp;nothing
<br>
&nbsp;&nbsp;&nbsp;else&nbsp;here&nbsp;but&nbsp;the&nbsp;rough&nbsp;stone&nbsp;walls.&nbsp;"
<br>
&nbsp;&nbsp;north&nbsp;=&nbsp;tunnelToChasm
<br>
&nbsp;&nbsp;south&nbsp;=&nbsp;blankSteelDoor&nbsp;
<br>
&nbsp;&nbsp;brightness&nbsp;=&nbsp;(blankSteelDoor.isOpen&nbsp;?&nbsp;3&nbsp;:&nbsp;0)
<br>
&nbsp;&nbsp;roomParts&nbsp;=&nbsp;[defaultFloor,&nbsp;defaultCeiling,&nbsp;tunnelEndWestWall,&nbsp;defaultEastWall]
<br>
;
<br>

<br>
+&nbsp;tunnelToChasm&nbsp;:&nbsp;ThroughPassage&nbsp;-&gt;&nbsp;tunnelFromChasm&nbsp;'tunnel'&nbsp;'tunnel'
<br>
&nbsp;&nbsp;"The&nbsp;long&nbsp;narrow&nbsp;tunnel&nbsp;leads&nbsp;off&nbsp;to&nbsp;the&nbsp;north.&nbsp;"
<br>
;
<br>

<br>
+&nbsp;blankSteelDoor&nbsp;:&nbsp;Door&nbsp;'blank&nbsp;steel&nbsp;door'&nbsp;'blank&nbsp;steel&nbsp;door'
<br>
&nbsp;&nbsp;"The&nbsp;door&nbsp;&lt;&lt;isOpen&nbsp;?&nbsp;'has&nbsp;slid&nbsp;open&nbsp;out&nbsp;of&nbsp;sight'&nbsp;:&nbsp;'is&nbsp;without&nbsp;handle,&nbsp;
<br>
&nbsp;&nbsp;&nbsp;keyhole&nbsp;or&nbsp;any&nbsp;other&nbsp;visible&nbsp;mechanism'&gt;&gt;"
<br>
&nbsp;&nbsp;&nbsp;openStatus&nbsp;{&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;&nbsp;checkDobjOpen()&nbsp;{&nbsp;"There's&nbsp;nothing&nbsp;on&nbsp;the&nbsp;door&nbsp;to&nbsp;get&nbsp;a&nbsp;purchase&nbsp;on.&nbsp;";&nbsp;exit;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;checkDobjClose()&nbsp;{&nbsp;"The&nbsp;door&nbsp;has&nbsp;slid&nbsp;out&nbsp;of&nbsp;sight.&nbsp;";&nbsp;exit;&nbsp;}&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;makeOpen(stat)
<br>
&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inherited(stat);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The&nbsp;steel&nbsp;door&nbsp;slides&nbsp;&lt;&lt;isOpen&nbsp;?&nbsp;'open'&nbsp;:&nbsp;'shut'&gt;&gt;.&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;}
<br>
;
<br>

<br>
tunnelEndWestWall&nbsp;:&nbsp;RestrictedContainer,&nbsp;RoomPart&nbsp;'west&nbsp;rough&nbsp;stone&nbsp;wall*walls'&nbsp;'west&nbsp;wall'
<br>
&nbsp;&nbsp;desc&nbsp;=&nbsp;"&lt;&lt;freeStone.isIn(self)&nbsp;?&nbsp;'On&nbsp;closer&nbsp;inspection,&nbsp;one&nbsp;of&nbsp;the&nbsp;stones&nbsp;in&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;wall&nbsp;looks&nbsp;a&nbsp;bit&nbsp;loose':&nbsp;'There\'s&nbsp;a&nbsp;small&nbsp;round&nbsp;hole&nbsp;in&nbsp;the&nbsp;wall&nbsp;where&nbsp;a&nbsp;stone
<br>
&nbsp;&nbsp;&nbsp;&nbsp;has&nbsp;been&nbsp;removed'&nbsp;&gt;&gt;.&nbsp;"
<br>
&nbsp;&nbsp;validContents&nbsp;=&nbsp;[freeStone]&nbsp;
<br>
;
<br>
</font><font face="Arial" size="2" color="#000000">
<br>
We have made a special room part to hold the stone that needs to be moved to find the button; we make it a RestrictedContainer for that purpose. We override the blankSteelDoor.openStatus to display nothing, since 'It's open" or "It's closed" is superfluous given the way we have described the door. We  use the object name freeStone rather than looseStone since the latter has already been used as a method name:
<br>

<br>
</font><font face="Courier New" size="2" color="#000000">+&nbsp;freeStone&nbsp;:&nbsp;Thing&nbsp;'loose&nbsp;stone'&nbsp;'loose&nbsp;stone'
<br>
&nbsp;&nbsp;"It's&nbsp;a&nbsp;rough,&nbsp;round&nbsp;stone,&nbsp;about&nbsp;the&nbsp;size&nbsp;of&nbsp;a&nbsp;grapefruit.&nbsp;"
<br>
&nbsp;&nbsp;bulk&nbsp;=&nbsp;2
<br>
&nbsp;&nbsp;weight&nbsp;=&nbsp;3
<br>
&nbsp;&nbsp;moveInto(newDest)
<br>
&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;if(location==tunnelEndWestWall)
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Removing&nbsp;the&nbsp;stone&nbsp;reveals&nbsp;a&nbsp;small&nbsp;round&nbsp;hole&nbsp;behind.&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;inherited(newDest);
<br>
&nbsp;&nbsp;}
<br>
;
<br>
</font><font face="Arial" size="2" color="#000000">
<br>
We override freeStone.moveInto so that if it's being moved out of the wall it announces the presence of the small round hole that's thereby revealed. The next problem we are going to have to sort out is how to make things visible and invisible according to what's where. The easiest way to deal with this is to make a series of nested containers, which we'll make open or closed according to whether the obscuring object is present or not. We make the hole in the wall a RestrictedContainer so that it can handle an attempt to PUT BUTTON IN HOLE or PUT STONE IN HOLE, but we place it inside another container that represents the presence or absence of the stone in the wall (so that hole is visible if and only if the stone is not in the wall):
<br>

<br>

<br>
</font><font face="Courier New" size="2" color="#000000">+&nbsp;Container,&nbsp;SecretFixture
<br>
&nbsp;&nbsp;isOpen&nbsp;=&nbsp;(!freeStone.isIn(tunnelEndWestWall))
<br>
;
<br>

<br>
++&nbsp;holeInWall&nbsp;:&nbsp;RestrictedContainer,&nbsp;Fixture&nbsp;
<br>
&nbsp;&nbsp;&nbsp;'small&nbsp;round&nbsp;circular&nbsp;hole*holes'&nbsp;'small&nbsp;round&nbsp;hole'&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;isListedInContents&nbsp;=&nbsp;(sightPresence)&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;bulkCapacity&nbsp;=&nbsp;3&nbsp;
<br>
&nbsp;&nbsp;&nbsp;validContents&nbsp;=&nbsp;[holeButton,&nbsp;freeStone]
<br>
&nbsp;&nbsp;&nbsp;iobjFor(PutIn)
<br>
&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;action()
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(gDobj==freeStone)
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;replaceAction(PutIn,&nbsp;gDobj,&nbsp;tunnelEndWestWall);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;if(gDobj==holeButton)
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;replaceAction(AttachTo,&nbsp;gDobj,&nbsp;buttonFitting);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inherited;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;
<br>
;
<br>
</font><font face="Arial" size="2" color="#000000">
<br>
The button is the most complex object we need to define here. It starts attached to a fitting that also acts as the container for the tiny hole containing the wires (which we'll come to in a minute), so we define buttonFitting as being in its list of attachedObjects from the start, and override canAttachTo to allow the buttonFitting as an attachment. The button can only be detached if it has first been unscrewed so we define an unscrewed property to keep track of this and then test for it in canDetachFrom. The handleAttach and handleDetach methods then define the specialized handling we need for attaching and detaching the button from its fitting, in the former case moving the button into the hole and setting unscrewed to nil, in the latter moving the button into the actor's inventory (on the assumption that it will come off into his hand), and in both cases displaying a suitable message. We also need to define the handling for the UNSCREW command (basically to set unscrewed to true and make a suitable report). While we're at it we make SCREW equivalent to ATTACH BUTTON TO FITTING, and TAKE BUTTON equivalent to DETACH BUTTON FROM FITTING if the button is attached to the fitting:
<br>

<br>
</font><font face="Courier New" size="2" color="#000000">+++&nbsp;holeButton&nbsp;:&nbsp;Attachable,&nbsp;Button&nbsp;'small&nbsp;black&nbsp;button/casing'&nbsp;'small&nbsp;black&nbsp;button'
<br>
&nbsp;&nbsp;&nbsp;"It's&nbsp;in&nbsp;a&nbsp;circular&nbsp;casing&lt;&lt;isAttachedTo(buttonFitting)&nbsp;?&nbsp;''
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;',&nbsp;inside&nbsp;which&nbsp;is&nbsp;a&nbsp;screw&nbsp;thread'&gt;&gt;.&nbsp;"
<br>
&nbsp;&nbsp;&nbsp;canAttachTo(obj)&nbsp;{&nbsp;return&nbsp;obj&nbsp;==&nbsp;buttonFitting;&nbsp;}
<br>
&nbsp;&nbsp;&nbsp;handleAttach(other)
<br>
&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;moveInto(holeInWall);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unscrewed&nbsp;=&nbsp;nil;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"{You/he}&nbsp;screw{s}&nbsp;the&nbsp;button&nbsp;into&nbsp;its&nbsp;fitting.&nbsp;";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;&nbsp;canDetachFrom(obj)&nbsp;{&nbsp;return&nbsp;obj&nbsp;==&nbsp;buttonFitting&nbsp;&amp;&amp;&nbsp;unscrewed;&nbsp;}
<br>
&nbsp;&nbsp;&nbsp;cannotDetachMsgFor(obj)
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(obj==buttonFitting)
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;'It&nbsp;seems&nbsp;to&nbsp;be&nbsp;screwed&nbsp;in&nbsp;place.&nbsp;';
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;inherited(obj);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;&nbsp;handleDetach(other)
<br>
&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;moveInto(gActor);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"{You/he}&nbsp;remove{s}&nbsp;the&nbsp;button&nbsp;from&nbsp;its&nbsp;fitting,&nbsp;revealing&nbsp;a&nbsp;tiny&nbsp;hole&nbsp;behind.&nbsp;";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;&nbsp;attachedObjects&nbsp;=&nbsp;[buttonFitting]&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;unscrewed&nbsp;=&nbsp;nil
<br>
&nbsp;&nbsp;&nbsp;dobjFor(Unscrew)
<br>
&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;verify()&nbsp;{&nbsp;if(unscrewed)&nbsp;illogicalNow('It\'s&nbsp;already&nbsp;unscrewed.&nbsp;');&nbsp;}
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;action()&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"{You/he}&nbsp;unscrew{s}&nbsp;the&nbsp;button.&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unscrewed&nbsp;=&nbsp;true;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;&nbsp;dobjFor(Screw)&nbsp;remapTo(AttachTo,&nbsp;self,&nbsp;buttonFitting)
<br>
&nbsp;&nbsp;&nbsp;dobjFor(Take)&nbsp;maybeRemapTo(isAttachedTo(buttonFitting),DetachFrom,&nbsp;self,&nbsp;buttonFitting)
<br>
&nbsp;&nbsp;&nbsp;dobjFor(Push)
<br>
&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;action()
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(isAttachedTo(buttonFitting)&nbsp;&amp;&amp;&nbsp;blackWire.isAttachedTo(greenWire)
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp;&nbsp;blackWire.isAttachedTo(redWire))
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;blankSteelDoor.makeOpen(!blankSteelDoor.isOpen);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Nothing&nbsp;happens.&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;
<br>
;
<br>

<br>
</font><font face="Arial" size="2" color="#000000">At the end of all this we also define what happens when the button is pushed. Nothing happens at all unless the wires have been repaired (by attaching the black wire to both the red wire and the green wire to restore the connection) and the button is attached to its fitting; but if all these conditions are met we open or close the door (depending on whether it is currently closed or open).
<br>

<br>
The next step is to define the fitting to which the button is attached. Most of the attachment work has been done on the button, but we also need to make it a container that's opened when the button is removed so we can see what's inside:
<br>

<br>
</font><font face="Courier New" size="2" color="#000000">+++&nbsp;buttonFitting&nbsp;:&nbsp;Attachable,&nbsp;Container,&nbsp;Fixture&nbsp;'(button)&nbsp;fitting'&nbsp;'fitting'&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;"&lt;&lt;isAttachedTo(holeButton)&nbsp;?&nbsp;''&nbsp;:&nbsp;'It\'s&nbsp;circular,&nbsp;with&nbsp;a&nbsp;screw&nbsp;thread&nbsp;running
<br>
&nbsp;&nbsp;&nbsp;&nbsp;round&nbsp;the&nbsp;outside.&nbsp;'&gt;&gt;"&nbsp;
<br>
&nbsp;&nbsp;&nbsp;isOpen&nbsp;=&nbsp;(!holeButton.isAttachedTo(self))
<br>
&nbsp;&nbsp;&nbsp;isListedInContents&nbsp;=&nbsp;(isOpen)
<br>
;
<br>
</font><font face="Arial" size="2" color="#000000">
<br>
We'll go on to implement the wires inside the fitting as <a href="nearbyattachable.htm">NearbyAttachables</a>.
<br>
</font></font>

</body></html>
