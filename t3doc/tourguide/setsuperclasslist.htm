<html><head><meta name="generator" content="Help & Manual 2.7.0"><title>setSuperclassList</title><meta name="keywords" content="setSuperclassList,getSuperclassList"></meta></head>
<body bgcolor="#FFFFFF">
<table width="100%" border="0" cellspacing="0" cellpadding="3" bgcolor="#C0C0C0"><tr><td align="left">
<font face="Arial" size="3" color="#000000"><b>setSuperclassList
<br>
</b></font>

</td><td align="right"><font face="Arial" size="2"><a href="bulkandweight.htm">[Previous]</a> <a href="generalintroduction.htm">[Main]</a> <a href="readable.htm">[Next]</a></font></td></tr></table><br>

<font face="Arial" size="2" color="#000000"><a name="setsuperclasslist">It's conceivable that we could have an object that starts out as one kind of thing, but later becomes another. For example we might have a  component of something that later proves to be detachable. For example, suppose that the wooden panel becomes detached from the deck rail when it is struck with a heavy hammer. It might seem that this would be impossible to implement since once we have defined something as a Component, it is fated to remain a Component for the duration. But in fact this is not the case, since in TADS 3 it is possible to change the class list of an object at run-time, using the method <b>setSuperclassList(new class list)</b>. For example, to make the large wooden panel come free when struck by the hammer we could write:
<br>

<br>
<font face="Courier New" size="2" color="#000000">+&nbsp;Component&nbsp;'large&nbsp;wooden&nbsp;panel'&nbsp;'panel'
<br>
&nbsp;&nbsp;...
<br>
&nbsp;&nbsp;dobjFor(AttackWith)
<br>
&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;verify()&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(getSuperclassList()&nbsp;!=&nbsp;[Component])
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;illogicalAlready('You've&nbsp;done&nbsp;it&nbsp;enough&nbsp;damage&nbsp;already!&nbsp;');
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br>

<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;action()
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(gIobj&nbsp;==&nbsp;heavyHammer)
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setSuperclassList([Thing]);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;moveInto(getOutermostRoom);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The&nbsp;hammer&nbsp;strikes&nbsp;the&nbsp;panel&nbsp;with&nbsp;such&nbsp;force&nbsp;that&nbsp;the&nbsp;panel&nbsp;comes&nbsp;free&nbsp;of&nbsp;the
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rail&nbsp;and&nbsp;falls&nbsp;to&nbsp;the&nbsp;deck.&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"{The&nbsp;iobj/he}&nbsp;simply&nbsp;bounces&nbsp;off&nbsp;the&nbsp;panel.&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;}
<br>
;
<br>
</font><font face="Arial" size="2" color="#000000">
<br>
Note the use of <b>getSuperclassList()</b> to test what class or classes the panel currently belongs to.
<br>

<br>
The setSuperclassList method can be very useful in cases such as this, where the alternative of determining the behaviour of the temporary Component (or Fixture or whatever it may be) by testing the value of some flag in lots of different places would be tedious, long-winded and error-prone. Nevertheless, it's a technique you'll probably want to use sparingly, and with care (we shan't actually be using it at all in <i>The Quest of the Golden Banana</i> - the immediately preceding code is hypothetical rather than something to be added to the game). The effect of setSuperclassList() is that any methods or properties inherited by the object in question are now inherited from the new list of superclasses, but that properties and methods defined on the object itself remain unaffected (unless they explicitly inherit behaviour). A corresponding transformation will be wrought on anything that inherits from an object (or class) on which setSuperclass list is invoked. Obviously this is a tool that needs to be used with some care; it would probably be foolish and reckless to use it to transform a Flashlight into a Actor, or a ComplexContainer into a Candle for example. On the other hand, it may often be useful to transform, say, a Fixture into a Thing (when something previously fixed becomes portable) or a Thing into a Distant (when a portable object goes out of reach - say because it's a flag and we've just hoisted it to the top of the pole).
<br>

<br>

<br>
</font></font>

</body></html>
