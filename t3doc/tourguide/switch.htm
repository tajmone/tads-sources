<html><head><meta name="generator" content="Help & Manual 2.7.0"><title>Switch</title><meta name="keywords" content="Switch,PresentLater,RestrictedContainer"></meta></head>
<body bgcolor="#FFFFFF">
<table width="100%" border="0" cellspacing="0" cellpadding="3" bgcolor="#C0C0C0"><tr><td align="left">
<font face="Arial" size="3" color="#000000"><b>Switch : <a href="onoffcontrol.htm">OnOffControl</a>
<br>
</b></font>

</td><td align="right"><font face="Arial" size="2"><a href="onoffcontrol.htm">[Previous]</a> <a href="generalintroduction.htm">[Main]</a> <a href="lever(2).htm">[Next]</a></font></td></tr></table><br>

<font face="Arial" size="2" color="#000000">Switch is a simple extension of the generic <a href="onoffcontrol.htm">OnOffControl</a> that can be used with a SWITCH command without specifying ON or OFF, and treats FLIP synonymously. SWITCH X or FLIP X thus turns X on if it was off and vice versa.
<br>

<br>
We'll use a Switch in the second room of the space station as the apparent (but only apparent) duplicate of the OnOffControl we used in the first. When the player confidently tries to turn it off in the expectation of opening another door, however, s/he'll find it doesn't quite work as expected:
<br>

<br>
<font face="Courier New" size="2" color="#000000">ssLivingQuarters&nbsp;:&nbsp;Room&nbsp;'Space&nbsp;Station&nbsp;-&nbsp;Living&nbsp;Quarters'
<br>
&nbsp;&nbsp;"These&nbsp;living&nbsp;quarters&nbsp;look&nbsp;totally&nbsp;abandoned;&nbsp;it&nbsp;doesn't&nbsp;look&nbsp;as&nbsp;if&nbsp;anyone&nbsp;has
<br>
&nbsp;&nbsp;&nbsp;been&nbsp;here&nbsp;for&nbsp;years.&nbsp;A&nbsp;table&nbsp;is&nbsp;bolted&nbsp;to&nbsp;the&nbsp;centre&nbsp;of&nbsp;the&nbsp;floor.&nbsp;
<br>
&nbsp;&nbsp;&nbsp;An&nbsp;open&nbsp;doorway&nbsp;leads&nbsp;through&nbsp;one&nbsp;bulkhead,&nbsp;while&nbsp;a&nbsp;closed&nbsp;sliding&nbsp;door&nbsp;is&nbsp;
<br>
&nbsp;&nbsp;&nbsp;set&nbsp;in&nbsp;the&nbsp;opposite&nbsp;one.&nbsp;"&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;out&nbsp;=&nbsp;ssDoorway
<br>
;
<br>

<br>
+&nbsp;ssDoorway&nbsp;:&nbsp;ThroughPassage&nbsp;-&gt;&nbsp;ssDoor1&nbsp;'open&nbsp;doorway'&nbsp;'open&nbsp;doorway'
<br>
&nbsp;&nbsp;"The&nbsp;open&nbsp;doorway&nbsp;leads&nbsp;back&nbsp;to&nbsp;the&nbsp;observation&nbsp;deck.&nbsp;"
<br>
;
<br>

<br>
+&nbsp;ssTable:&nbsp;Fixture,&nbsp;Surface&nbsp;'table'&nbsp;'table'
<br>
&nbsp;&nbsp;"It's&nbsp;a&nbsp;plain&nbsp;steel&nbsp;table,&nbsp;bolted&nbsp;to&nbsp;the&nbsp;floor.&nbsp;"
<br>
;
<br>

<br>
+&nbsp;ssDoor2&nbsp;:&nbsp;IndirectLockable,&nbsp;Door&nbsp;'door'&nbsp;'door'
<br>
&nbsp;&nbsp;"The&nbsp;door&nbsp;is&nbsp;a&nbsp;solid&nbsp;sheet&nbsp;of&nbsp;steel.&nbsp;It&nbsp;looks&nbsp;like&nbsp;it's&nbsp;meant&nbsp;to&nbsp;slide&nbsp;open.
<br>
&nbsp;&nbsp;&nbsp;Next&nbsp;to&nbsp;the&nbsp;door&nbsp;is&nbsp;a&nbsp;small&nbsp;green&nbsp;switch.&nbsp;"&nbsp;&nbsp;&nbsp;
<br>
;
<br>

<br>
+&nbsp;Switch,&nbsp;Fixture&nbsp;'small&nbsp;green&nbsp;switch/maglock'&nbsp;'small&nbsp;green&nbsp;switch'
<br>
&nbsp;&nbsp;&nbsp;"The&nbsp;switch&nbsp;is&nbsp;labelled&nbsp;MAGLOCK.&nbsp;"
<br>
&nbsp;&nbsp;&nbsp;makeOn(val)
<br>
&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(!touched)
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mercury.makePresent;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;touched&nbsp;=&nbsp;true;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The&nbsp;switch&nbsp;spits&nbsp;and&nbsp;fizzles,&nbsp;and&nbsp;then&nbsp;starts&nbsp;oozing&nbsp;a&nbsp;silvery&nbsp;liquid
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;which&nbsp;gathers&nbsp;in&nbsp;a&nbsp;small&nbsp;pool&nbsp;on&nbsp;the&nbsp;floor.&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inherited(val);
<br>
&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;&nbsp;isOn&nbsp;=&nbsp;true
<br>
&nbsp;&nbsp;&nbsp;touched&nbsp;=&nbsp;nil
<br>
;
<br>

<br>
+&nbsp;mercury&nbsp;:&nbsp;PresentLater,&nbsp;RestrictedContainer&nbsp;'silver&nbsp;silvery&nbsp;liquid/mercury/pool'
<br>
&nbsp;&nbsp;&nbsp;'silvery&nbsp;liquid'
<br>
&nbsp;&nbsp;"It's&nbsp;a&nbsp;dense,&nbsp;silver-coloured&nbsp;liquid.&nbsp;"
<br>
&nbsp;&nbsp;dobjFor(Take)
<br>
&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;action()
<br>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"{You/he}&nbsp;can't&nbsp;pick&nbsp;it&nbsp;up,&nbsp;it&nbsp;simply&nbsp;runs&nbsp;between&nbsp;{your}&nbsp;fingers.&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;validContents&nbsp;=&nbsp;[syringe]
<br>
&nbsp;&nbsp;specialDesc&nbsp;=&nbsp;"A&nbsp;small&nbsp;pool&nbsp;of&nbsp;silvery&nbsp;liquid&nbsp;lies&nbsp;on&nbsp;the&nbsp;floor&nbsp;near&nbsp;the&nbsp;door.&nbsp;"
<br>
;
<br>
</font><font face="Arial" size="2" color="#000000">
<br>
If you recall far enough back, when we first introduced the fluid link we hinted that it would need refilling with mercury - this is how the player will come by it. The validContents property of the mercury also hints how the mercury is to be collected. We'll see to all that next.
<br>

<br>
As a second example of a switch we'll add a switch to the Tardis control panel to open and close the door (the description of the control panel mentions a switch, but we've yet to implement it). The following object should be located shortly after the definition of tardisConsole so that it's located in the console:
<br>

<br>
</font><font face="Courier New" size="2" color="#000000">+&nbsp;tardisSwitch&nbsp;:&nbsp;Switch,&nbsp;Component&nbsp;'(tardis)&nbsp;bright&nbsp;green&nbsp;switch'&nbsp;'green&nbsp;switch'
<br>
&nbsp;&nbsp;"It's&nbsp;bright&nbsp;green.&nbsp;"
<br>
&nbsp;&nbsp;makeOn(val)
<br>
&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;"As&nbsp;{you/he}&nbsp;flip{s}&nbsp;the&nbsp;switch&nbsp;the&nbsp;outer&nbsp;door&nbsp;&lt;&lt;val&nbsp;?&nbsp;'opens'&nbsp;:&nbsp;'closes'&gt;&gt;.&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;tardisDoorInside.makeOpen(val);&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;dobjFor(Push)&nbsp;asDobjFor(Switch)&nbsp;
<br>
&nbsp;&nbsp;isOn&nbsp;=&nbsp;(tardisDoorInside.isOpen)&nbsp;
<br>
;
<br>
</font><font face="Arial" size="2" color="#000000">
<br>
There's a couple of things to note here. First, we define dobjFor(Push) asDobjFor(Switch) so that PRESS SWITCH or PUSH GREEN SWITCH works the same as FLIP SWITCH or SWITCH SWITCH, namely turning the switch on if its off and vice versa. Secondly, instead of having the switch's makeOn method change the value of its isOn property, we have it call the Tardis door's makeOpen method to open or close the door (and display a suitable message). We then define the isOn property to reflect the door's isOpen property so the two stay in sync automatically.
<br>

<br>
</font></font>

</body></html>
