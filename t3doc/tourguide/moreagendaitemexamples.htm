<html><head><meta name="generator" content="Help & Manual 2.7.0"><title>More AgendaItem Examples</title></head>
<body bgcolor="#FFFFFF">
<table width="100%" border="0" cellspacing="0" cellpadding="3" bgcolor="#C0C0C0"><tr><td align="left">
<font face="Arial" size="3" color="#000000"><b>More AgendaItem Examples
<br>
</b></font>

</td><td align="right"><font face="Arial" size="2"><a href="delayedagendaitem.htm">[Previous]</a> <a href="generalintroduction.htm">[Main]</a> <a href="overview-commandingnpcs.htm">[Next]</a></font></td></tr></table><br>

<font face="Arial" size="2" color="#000000">Although we've already given several examples of AgendaItems, it may be worth giving a few more to explore what else can be done with this mechanism. All the following examples will apply to Sarah, so should be placed in your code so that they are located directly within the sarah object.
<br>

<br>
The first problem we'll solve using AgendaItems (though there are doubtless other ways of doing it) concerns the gas masks. So far we have devised a means of giving Sarah a gas mask, but not of making Sarah do anything with it. In order to follow the player character (PC) down the path to the basalt plane in Hell Fire Cavern, Sarah needs to don the gas mask when the PC does. We can use a pair of AgendaItems to make Sarah don her gas mask when the PC is wearing it and remove it again when the PC removes it:
<br>

<br>
<font face="Courier New" size="2" color="#000000">+&nbsp;sarahDonGasMask&nbsp;:&nbsp;AgendaItem&nbsp;&nbsp;
<br>
&nbsp;&nbsp;isReady&nbsp;=&nbsp;(gPlayerChar.isMasked)
<br>
&nbsp;&nbsp;invokeItem
<br>
&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;nestedActorAction(getActor,&nbsp;Wear,&nbsp;getActor.maskObj);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;isDone&nbsp;=&nbsp;true;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;getActor.addToAgenda(sarahDoffGasMask);
<br>
&nbsp;&nbsp;}
<br>
;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;
<br>
+&nbsp;sarahDoffGasMask&nbsp;:&nbsp;AgendaItem
<br>
&nbsp;&nbsp;isReady&nbsp;=&nbsp;(!gPlayerChar.isMasked)
<br>
&nbsp;&nbsp;invokeItem
<br>
&nbsp;&nbsp;{&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;nestedActorAction(getActor,&nbsp;Remove,&nbsp;getActor.maskObj);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;isDone&nbsp;=&nbsp;true;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;getActor.addToAgenda(sarahDonGasMask);
<br>
&nbsp;&nbsp;}
<br>
;
<br>
</font><font face="Arial" size="2" color="#000000">
<br>
Note how each of these AgendaItems adds the other to Sarah's agenda when it is invoked. This allows the PC to don and remove his mask as many times as he likes, and Sarah will still follow his lead. At the moment, however, neither AgendaItem starts off in Sarah's agenda, so neither will be executed. Since Sarah starts off without a gas mask, sarahDonMask is clearly the AgendaItem that needs to be added first; since Sarah can't wear her gas mask before she's got one, the appropriate place to add this to her agenda is probably when she's first given a gas mask:
<br>

<br>
</font><font face="Courier New" size="2" color="#000000">+&nbsp;GiveTopic
<br>
&nbsp;&nbsp;matchTopic(fromActor,&nbsp;obj)
<br>
&nbsp;&nbsp;&nbsp;{&nbsp;return&nbsp;obj.ofKind(GasMask)&nbsp;?&nbsp;matchScore&nbsp;:&nbsp;nil;&nbsp;}
<br>
&nbsp;&nbsp;handleTopic(fromActor,&nbsp;obj)
<br>
&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;obj.moveInto(getActor);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;"&lt;q&gt;Thanks,&lt;/q&gt;&nbsp;{the&nbsp;sarah/she}&nbsp;remarks&nbsp;dubiously&nbsp;as&nbsp;she&nbsp;accepts&nbsp;it&nbsp;from&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;you,&nbsp;&lt;q&gt;I'm&nbsp;sure&nbsp;it'll&nbsp;-&nbsp;er&nbsp;-&nbsp;come&nbsp;in&nbsp;very&nbsp;useful.&lt;/q&gt;&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;<b>getActor.addToAgenda(sarahDonGasMask);
<br>
</b>&nbsp;&nbsp;}
<br>
;
<br>
</font><font face="Arial" size="2" color="#000000">
<br>
The next example shows how we can combine an AgendaItem with an EventList to provide Sarah with a list of responses to the demons whenever she can see them. It also provides an example of an AgendaItem with a declarative isDone condition.
<br>

<br>

<br>
</font><font face="Courier New" size="2" color="#000000">+&nbsp;sarahHatesDemons&nbsp;:&nbsp;AgendaItem,&nbsp;ShuffledEventList
<br>
&nbsp;&nbsp;isReady&nbsp;=&nbsp;(getActor.canSee(demons))
<br>
&nbsp;&nbsp;initiallyActive&nbsp;=&nbsp;true
<br>
&nbsp;&nbsp;invokeItem
<br>
&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;doScript;
<br>
&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;firstEvents&nbsp;=
<br>
&nbsp;&nbsp;[
<br>
&nbsp;&nbsp;&nbsp;&nbsp;'{The&nbsp;sarah/she}&nbsp;backs&nbsp;away&nbsp;from&nbsp;the&nbsp;demons&nbsp;in&nbsp;disgust.
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;q&gt;Ugh!&nbsp;Get&nbsp;away&nbsp;from&nbsp;me,&nbsp;you&nbsp;horrid&nbsp;creatures!&lt;/q&gt;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;she&nbsp;shrieks.&nbsp;'
<br>
&nbsp;&nbsp;]
<br>
&nbsp;&nbsp;eventList&nbsp;=
<br>
&nbsp;&nbsp;[
<br>
&nbsp;&nbsp;&nbsp;&nbsp;'{The&nbsp;sarah/she}&nbsp;glances&nbsp;in&nbsp;horror&nbsp;at&nbsp;the&nbsp;demons&nbsp;crowding
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;around&nbsp;you,&nbsp;raising&nbsp;her&nbsp;arms&nbsp;to&nbsp;ward&nbsp;them&nbsp;off.&nbsp;',
<br>
&nbsp;&nbsp;&nbsp;&nbsp;'One&nbsp;of&nbsp;the&nbsp;demons&nbsp;clutches&nbsp;at&nbsp;{the&nbsp;sarah\'s/her}&nbsp;arms,&nbsp;and
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;she&nbsp;does&nbsp;her&nbsp;best&nbsp;to&nbsp;shake&nbsp;it&nbsp;off.&nbsp;',
<br>
&nbsp;&nbsp;&nbsp;&nbsp;'{The&nbsp;sarah/she}&nbsp;throws&nbsp;you&nbsp;an&nbsp;anxious&nbsp;glance,&nbsp;&lt;q&gt;Can\'t
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;we&nbsp;get&nbsp;out&nbsp;of&nbsp;here?&lt;/q&gt;&nbsp;she&nbsp;pleads.&nbsp;',
<br>
&nbsp;&nbsp;&nbsp;&nbsp;'{The&nbsp;sarah/she}&nbsp;clutches&nbsp;your&nbsp;arm&nbsp;in&nbsp;fright&nbsp;as&nbsp;a&nbsp;pair
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;of&nbsp;demons&nbsp;close&nbsp;in&nbsp;on&nbsp;her.&nbsp;'&nbsp;&nbsp;
<br>
&nbsp;&nbsp;]&nbsp;
<br>
&nbsp;&nbsp;isDone&nbsp;=&nbsp;(demons.isIn(nil))&nbsp;/*&nbsp;once&nbsp;the&nbsp;demons&nbsp;have&nbsp;been&nbsp;banished&nbsp;they'll&nbsp;never&nbsp;be
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;seen&nbsp;again,&nbsp;so&nbsp;there's&nbsp;no&nbsp;point&nbsp;leaving&nbsp;this&nbsp;in
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sarah's&nbsp;agenda&nbsp;list&nbsp;*/
<br>
;
<br>
</font><font face="Arial" size="2" color="#000000">
<br>

<br>
Finally, we can even have Sarah solve one of the puzzles (pulling the burned bush up) if it doesn't occur to the player:
<br>

<br>
</font><font face="Courier New" size="2" color="#000000">+&nbsp;sarahPullBush&nbsp;:&nbsp;DelayedAgendaItem
<br>
&nbsp;&nbsp;isReady&nbsp;=&nbsp;(getActor.canSee(burnedBush))
<br>
&nbsp;&nbsp;invokeItem
<br>
&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;"{The&nbsp;sarah/she}&nbsp;walks&nbsp;over&nbsp;to&nbsp;the&nbsp;bush&nbsp;and&nbsp;eyes&nbsp;it&nbsp;speculatively.&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;nestedActorAction(getActor,&nbsp;Pull,&nbsp;burnedBush);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;"&lt;.p&gt;{The&nbsp;sarah/she}&nbsp;peers&nbsp;into&nbsp;the&nbsp;hole.&nbsp;&lt;q&gt;It&nbsp;looks&nbsp;like&nbsp;there's
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;some&nbsp;sort&nbsp;of&nbsp;tunnel.&lt;/q&gt;&nbsp;she&nbsp;remarks,&nbsp;a&nbsp;little&nbsp;dubiously,&nbsp;&lt;q&gt;I&nbsp;suppose
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;you&nbsp;could&nbsp;crawl&nbsp;in&nbsp;there,&nbsp;but&nbsp;I&nbsp;wouldn't&nbsp;fancy&nbsp;it.&lt;/q&gt;&lt;.p&gt;";
<br>
&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;isDone&nbsp;=&nbsp;(burnedBush.isPulled)
<br>
;
<br>
</font><font face="Arial" size="2" color="#000000">
<br>
Again, this needs to be added to Sarah's agenda at some appropriate point:
<br>

<br>
</font><font face="Courier New" size="2" color="#000000">+&nbsp;bush:&nbsp;CustomImmovable&nbsp;'desiccated&nbsp;burning&nbsp;bush'&nbsp;'desiccated&nbsp;bush'
<br>
&nbsp;&nbsp;"The&nbsp;bush&nbsp;is&nbsp;&lt;&lt;daemonID&nbsp;==&nbsp;nil&nbsp;?&nbsp;'little&nbsp;more&nbsp;than&nbsp;a&nbsp;collections&nbsp;of
<br>
&nbsp;&nbsp;&nbsp;dried&nbsp;sticks,&nbsp;with&nbsp;only&nbsp;the&nbsp;occasional&nbsp;apology&nbsp;for&nbsp;a&nbsp;leaf&nbsp;doing&nbsp;duty
<br>
&nbsp;&nbsp;&nbsp;for&nbsp;foliage'&nbsp;:&nbsp;'ablaze'&gt;&gt;.&nbsp;"&nbsp;
<br>
&nbsp;&nbsp;inRoomDesc&nbsp;=&nbsp;"The&nbsp;only&nbsp;sign&nbsp;of&nbsp;life&nbsp;on&nbsp;this&nbsp;barren&nbsp;hillside
<br>
&nbsp;&nbsp;&nbsp;&nbsp;is&nbsp;a&nbsp;desiccated&nbsp;bush.&nbsp;"
<br>
&nbsp;&nbsp;burnDaemon&nbsp;{&nbsp;eventList.doScript;&nbsp;}
<br>
&nbsp;&nbsp;daemonID&nbsp;=&nbsp;nil&nbsp;&nbsp;
<br>
&nbsp;&nbsp;eventList&nbsp;:&nbsp;EventList
<br>
&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;[
<br>
&nbsp;&nbsp;&nbsp;&nbsp;'The&nbsp;bush&nbsp;is&nbsp;alight.&nbsp;',
<br>
&nbsp;&nbsp;&nbsp;&nbsp;'The&nbsp;bush&nbsp;is&nbsp;burning&nbsp;furiously.&nbsp;',
<br>
&nbsp;&nbsp;&nbsp;&nbsp;'The&nbsp;bush&nbsp;is&nbsp;starting&nbsp;to&nbsp;burn&nbsp;out.&nbsp;',
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;swap
<br>
&nbsp;&nbsp;]&nbsp;&nbsp;
<br>
&nbsp;&nbsp;swap()
<br>
&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;"The&nbsp;flames&nbsp;on&nbsp;the&nbsp;bush&nbsp;die&nbsp;out,&nbsp;leaving&nbsp;only&nbsp;charred&nbsp;remains.&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;lexicalParent.daemonID.removeEvent();
<br>
&nbsp;&nbsp;&nbsp;&nbsp;lexicalParent.daemonID&nbsp;=&nbsp;nil;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;burnedBush.moveInto(lexicalParent.location);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;lexicalParent.moveInto(nil);&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;<b>sarah.addToAgenda(sarahPullBush.setDelay(2));
<br>
</b>&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;cannotTakeMsg&nbsp;=&nbsp;'Tug&nbsp;as&nbsp;{you/he}&nbsp;will,&nbsp;the&nbsp;bush&nbsp;will&nbsp;not&nbsp;not&nbsp;quite&nbsp;come
<br>
&nbsp;&nbsp;&nbsp;&nbsp;free&nbsp;of&nbsp;the&nbsp;ground.&nbsp;'
<br>
;
<br>
</font><font face="Arial" size="2" color="#000000">
<br>
Now, suppose we don't want Sarah to follow the player character into the tunnel - perhaps she doesn't like narrow, dark tunnels running into the side of rumbling volcanos (a pretty understandable attitude when you come to think of it.) The first thing to do is to prevent Sarah following the actor into the hole, which we can do by making the following alteration on the sarahFollowing state:
<br>

<br>
</font><font face="Courier New" size="2" color="#000000">accompanyTravel(leadActor,&nbsp;conn)&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;return&nbsp;leadActor&nbsp;==&nbsp;gPlayerChar<b>&nbsp;&amp;&amp;&nbsp;conn&nbsp;!=&nbsp;bushHole</b>;&nbsp;}
<br>
</font><font face="Arial" size="2" color="#000000">
<br>

<br>
Both to make sure that the player notices that Sarah is no longer following, but waiting on the side of the volcano, and to make Sarah a bit more lifelike, we can then add a couple of AgendaItems to display a "farewell" and "welcome back" message. Note that we need to use callWithSenseContext for the first one so that the text is actually displayed:
<br>

<br>
</font><font face="Courier New" size="2" color="#000000">+&nbsp;sarahWontFollow&nbsp;:&nbsp;AgendaItem&nbsp;
<br>
&nbsp;&nbsp;isReady&nbsp;=&nbsp;(gPlayerChar.isIn(volcanoTunnel)&nbsp;&amp;&amp;&nbsp;getActor.curState==sarahFollowing)
<br>
&nbsp;&nbsp;invokeItem
<br>
&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;callWithSenseContext(nil,&nbsp;nil,&nbsp;{:
<br>
&nbsp;&nbsp;&nbsp;&nbsp;"&lt;q&gt;Take&nbsp;care,&nbsp;now!&lt;/q&gt;&nbsp;you&nbsp;hear&nbsp;{the&nbsp;sarah/she}&nbsp;call&nbsp;after&nbsp;you
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;anxiously.&lt;.p&gt;"&nbsp;});&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;isDone&nbsp;=&nbsp;true;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;getActor.addToAgenda(sarahWelcomesBack);
<br>
&nbsp;&nbsp;}
<br>
;
<br>
&nbsp;&nbsp;
<br>
+&nbsp;sarahWelcomesBack&nbsp;:&nbsp;AgendaItem
<br>
&nbsp;&nbsp;isReady&nbsp;=&nbsp;getActor.canSee(gPlayerChar)
<br>
&nbsp;&nbsp;invokeItem
<br>
&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;"&lt;q&gt;You're&nbsp;back&nbsp;then!&lt;/q&gt;&nbsp;{the&nbsp;sarah/she}&nbsp;declares,&nbsp;with
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evident&nbsp;relief.&lt;.p&gt;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;isDone&nbsp;=&nbsp;true;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;getActor.addToAgenda(sarahWontFollow);
<br>
&nbsp;&nbsp;}
<br>
;
<br>
</font><font face="Arial" size="2" color="#000000">
<br>
Finally, we need to get the first of these into Sarah's agenda in the first place. One way we can do this would be to add it, as before, in the swap message of the bush.eventList:
<br>

<br>
</font><font face="Courier New" size="2" color="#000000">+&nbsp;bush:&nbsp;CustomImmovable&nbsp;'desiccated&nbsp;burning&nbsp;bush'&nbsp;'desiccated&nbsp;bush'
<br>
&nbsp;&nbsp;...
<br>
&nbsp;&nbsp;eventList&nbsp;:&nbsp;EventList
<br>
&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;...
<br>
&nbsp;&nbsp;&nbsp;swap()
<br>
&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;"The&nbsp;flames&nbsp;on&nbsp;the&nbsp;bush&nbsp;die&nbsp;out,&nbsp;leaving&nbsp;only&nbsp;charred&nbsp;remains.&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;lexicalParent.daemonID.removeEvent();
<br>
&nbsp;&nbsp;&nbsp;&nbsp;lexicalParent.daemonID&nbsp;=&nbsp;nil;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;burnedBush.moveInto(lexicalParent.location);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;lexicalParent.moveInto(nil);&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;sarah.addToAgenda(sarahPullBush.setDelay(2));
<br>
&nbsp;&nbsp;&nbsp;&nbsp;<b>sarah.addToAgenda(sarahWontFollow);
<br>
</b>&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;...
<br>
;
<br>
</font><font face="Arial" size="2" color="#000000">
<br>
Ideally, one might want to make Sarah's behaviour even more elaborate here, perhaps to have her ask the player character how he fared, depending on whether he carried the golden banana into the hole and whether he emerges with it; but at least this provides a basic framework.
<br>
</font></font>

</body></html>
