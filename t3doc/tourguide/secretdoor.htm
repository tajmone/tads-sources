<html><head><meta name="generator" content="Help & Manual 2.7.0"><title>SecretDoor</title><meta name="keywords" content="SecretDoor,makeOpen,brightness"></meta></head>
<body bgcolor="#FFFFFF">
<table width="100%" border="0" cellspacing="0" cellpadding="3" bgcolor="#C0C0C0"><tr><td align="left">
<font face="Arial" size="3" color="#000000"><b>SecretDoor : BasicDoor
<br>
</b></font>

</td><td align="right"><font face="Arial" size="2"><a href="travelwithmessage.htm">[Previous]</a> <a href="generalintroduction.htm">[Main]</a> <a href="throughpassage.htm">[Next]</a></font></td></tr></table><br>

<font face="Arial" size="2" color="#000000">The description of <a href="stairwayup.htm">mainCave</a> includes a rock to the north. We'll make this a secret door that reveals a secret passage behind when it is pushed to one side (using the <a href="thingstatetemplate.htm">Thing template</a>):
<br>

<br>
<font face="Courier New" size="2" color="#000000">+&nbsp;rock:&nbsp;SecretDoor&nbsp;'large&nbsp;rock'&nbsp;'rock'
<br>
&nbsp;&nbsp;"A&nbsp;large&nbsp;rock&nbsp;&lt;&lt;isOpen&nbsp;?&nbsp;'lies&nbsp;to&nbsp;one&nbsp;side&nbsp;of&nbsp;a&nbsp;passage&nbsp;beyond'&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;'leans&nbsp;against&nbsp;the&nbsp;north&nbsp;wall&nbsp;of&nbsp;the&nbsp;cave'&gt;&gt;&nbsp;.&nbsp;"
<br>
&nbsp;&nbsp;dobjFor(Push)
<br>
&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;verify()&nbsp;{}
<br>
&nbsp;&nbsp;&nbsp;&nbsp;action()
<br>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;makeOpen(!isOpen);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The&nbsp;rock&nbsp;rolls&nbsp;aside.&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;}
<br>
;
<br>
</font><font face="Arial" size="2" color="#000000">
<br>

<br>
Note that this needs to be defined just after mainCave, so that it is included in mainCave's contents. Note also that we need to add the following to the definition of mainCave:
<br>

<br>
   </font><font face="Courier New" size="2" color="#000000">north&nbsp;=&nbsp;rock</font><font face="Arial" size="2" color="#000000">
<br>

<br>
The passage is opened by pushing the rock to one side, so we override the action() part of dobjFor(Push) to bring about the desired behaviour. SecretDoor descends from BasicDoor, which defines makeOpen(stat) method; this method sets the isOpen property to stat, which should be either true (for open) or nil (for closed). To make pushing the rock open the passage if it is closed, and close it if it is open, we call </font><font face="Courier New" size="2" color="#000000">makeOpen(!isOpen)</font><font face="Arial" size="2" color="#000000">. We also test the isOpen property to provide a description of the rock that depends on its position.
<br>

<br>
We next need to define the location on the far side of the rock:
<br>

<br>
</font><font face="Courier New" size="2" color="#000000">secretPassage&nbsp;:&nbsp;Room&nbsp;'Secret&nbsp;Passage'&nbsp;'the&nbsp;secret&nbsp;passage'
<br>
&nbsp;&nbsp;"This&nbsp;hitherto&nbsp;secret&nbsp;passage&nbsp;narrows&nbsp;to&nbsp;a&nbsp;long&nbsp;tunnel&nbsp;running&nbsp;north.&nbsp;To&nbsp;the
<br>
&nbsp;&nbsp;&nbsp;south&nbsp;&lt;&lt;rock2.isOpen&nbsp;?&nbsp;'an&nbsp;opening&nbsp;leads&nbsp;out&nbsp;into&nbsp;a&nbsp;large,&nbsp;ruddy-hued&nbsp;cave'
<br>
&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;'a&nbsp;large&nbsp;rock&nbsp;blocks&nbsp;the&nbsp;way&nbsp;out'&gt;&gt;.&nbsp;"&nbsp;
<br>
&nbsp;&nbsp;south&nbsp;=&nbsp;rock2
<br>
&nbsp;&nbsp;brightness&nbsp;=&nbsp;(rock2.isOpen&nbsp;?&nbsp;3&nbsp;:&nbsp;0)
<br>
;
<br>

<br>
/*&nbsp;This&nbsp;rock&nbsp;is&nbsp;simply&nbsp;the&nbsp;other&nbsp;side&nbsp;of&nbsp;the&nbsp;rock&nbsp;defined&nbsp;in&nbsp;mainCave&nbsp;
<br>
&nbsp;*&nbsp;In&nbsp;this&nbsp;definition&nbsp;we&nbsp;use&nbsp;the&nbsp;<a href="passagetemplate.htm">Passage&nbsp;template</a>
<br>
&nbsp;*/
<br>

<br>
+&nbsp;rock2&nbsp;:&nbsp;SecretDoor&nbsp;-&gt;&nbsp;rock&nbsp;'large&nbsp;rock'&nbsp;'large&nbsp;rock'
<br>
&nbsp;&nbsp;"It's&nbsp;a&nbsp;large&nbsp;rock,&nbsp;too&nbsp;heavy&nbsp;to&nbsp;lift.&nbsp;"&nbsp;&nbsp;
<br>
&nbsp;&nbsp;dobjFor(Push)
<br>
&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;verify()&nbsp;{}
<br>
&nbsp;&nbsp;&nbsp;&nbsp;action()
<br>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;makeOpen(!isOpen);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The&nbsp;rock&nbsp;rolls&nbsp;aside.&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;}
<br>
;
<br>
</font><font face="Arial" size="2" color="#000000">
<br>
The second rock (rock2) is simply the first rock seen from the other side; we link it to the rock with -&gt; which defines the masterObject property. Otherwise everything behaves much the same as the rock, except that for variety we vary the description of rock2 in the room description.
<br>
A further refinement we can make is to have the illumination of the secretPassage room depend on the boulder's being pushed aside. If light enters the passage only through the exit into the startCave, then pushing the boulder shut while inside the secretPassage will cut off the light. To accomplish this we override the </font><font face="Courier New" size="2" color="#000000">brightness</font><font face="Arial" size="2" color="#000000"> property of secretPassage to vary according to whether the boulder is open or not.
<br>

<br>

<br>

<br>

<br>
</font></font>

</body></html>
