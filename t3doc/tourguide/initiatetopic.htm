<html><head><meta name="generator" content="Help & Manual 2.7.0"><title>InitiateTopic</title><meta name="keywords" content="InitiateTopic,SoundEvent,SightEvent,notifySightEvent,notifySoundEvent,callWithSenseContext,roomDaemon"></meta></head>
<body bgcolor="#FFFFFF">
<table width="100%" border="0" cellspacing="0" cellpadding="3" bgcolor="#C0C0C0"><tr><td align="left">
<font face="Arial" size="3" color="#000000"><b>InitiateTopic : <a href="topicentry.htm">ThingMatchTopic</a>
<br>
</b></font>

</td><td align="right"><font face="Arial" size="2"><a href="alttopic.htm">[Previous]</a> <a href="generalintroduction.htm">[Main]</a> <a href="asktopic.htm">[Next]</a></font></td></tr></table><br>

<font face="Arial" size="2" color="#000000">You'll recall a couple of sections back that we ended up with rather a lengthy beforeTravel method on curatorWatching : ConversationReadyState. Although it isn't <i>too</i> bad, you may feel that its combination of switch statement and if statements is not only rather cumbersome but out of tune with the general approach of controlling behaviour by defining objects. Well, in fact, TADS 3 does provide a mechanism we could use to implement this case in a radically different way. Here's how the same curator behaviour can be implemented using InitiateTopics:
<br>

<br>
<font face="Courier New" size="2" color="#000000">++&nbsp;curatorWatching&nbsp;:&nbsp;ConversationReadyState
<br>
&nbsp;&nbsp;stateDesc&nbsp;=&nbsp;"He's&nbsp;watching&nbsp;you&nbsp;carefully.&nbsp;"
<br>
&nbsp;&nbsp;specialDesc&nbsp;{&nbsp;inherited;&nbsp;stateDesc;&nbsp;}
<br>
&nbsp;&nbsp;isInitState&nbsp;=&nbsp;true
<br>
&nbsp;&nbsp;beforeTravel(traveler,&nbsp;connector)
<br>
&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;inherited(traveler,&nbsp;connector);&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;if(traveler&nbsp;==&nbsp;gPlayerChar)
<br>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curator.initiateTopic(connector);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;}
<br>
;
<br>

<br>
++&nbsp;InitiateTopic&nbsp;@museum
<br>
&nbsp;&nbsp;&nbsp;topicResponse
<br>
&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;"{The&nbsp;curator/he}&nbsp;stops&nbsp;you,&nbsp;asking,&nbsp;&lt;q&gt;May&nbsp;I&nbsp;see&nbsp;your
<br>
&nbsp;&nbsp;&nbsp;&nbsp;ticket&nbsp;please?&lt;/q&gt;&lt;.p&gt;&lt;&lt;gSetKnown(museumTicket)&gt;&gt;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit;
<br>
&nbsp;&nbsp;&nbsp;}
<br>
;
<br>

<br>
+++&nbsp;AltTopic
<br>
&nbsp;&nbsp;&nbsp;&nbsp;topicResponse
<br>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getActor.moveIntoForTravel(byCases);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"{The&nbsp;curator/he}&nbsp;follows&nbsp;you&nbsp;into&nbsp;the&nbsp;museum.&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;&nbsp;&nbsp;isActive&nbsp;=&nbsp;(gRevealed('ticket-shown'))&nbsp;&nbsp;&nbsp;&nbsp;
<br>
;
<br>

<br>
++&nbsp;InitiateTopic&nbsp;@museumLobby
<br>
&nbsp;&nbsp;&nbsp;topicResponse
<br>
&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getActor.moveIntoForTravel(behindTable);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"{The&nbsp;curator/he}&nbsp;follows&nbsp;you&nbsp;into&nbsp;the&nbsp;lobby.&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;}
<br>
;
<br>

<br>
++&nbsp;InitiateTopic&nbsp;@benefactorsRoom
<br>
&nbsp;&nbsp;&nbsp;topicResponse
<br>
&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;q&gt;I'm&nbsp;afraid&nbsp;you&nbsp;can't&nbsp;go&nbsp;in&nbsp;there,&lt;/q&gt;&nbsp;{the&nbsp;curator/he}
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;intercepts&nbsp;you,&nbsp;&lt;q&gt;That's&nbsp;the&nbsp;&lt;i&gt;benefactors'&lt;/i&gt;&nbsp;room;&nbsp;only
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;our&nbsp;benefactors&nbsp;are&nbsp;allowed&nbsp;in&nbsp;there&nbsp;to&nbsp;see&nbsp;the&nbsp;special
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exhibits.&lt;/q&gt;&lt;.reveal&nbsp;benefactors&gt;&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit;
<br>
&nbsp;&nbsp;&nbsp;}
<br>
;
<br>

<br>
+++&nbsp;AltTopic&nbsp;
<br>
&nbsp;&nbsp;&nbsp;topicResponse
<br>
&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foreach(local&nbsp;cur&nbsp;in&nbsp;gPlayerChar.contents)
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(cur.ofKind(Container)&nbsp;&amp;&amp;&nbsp;cur&nbsp;!=&nbsp;cap&nbsp;&amp;&amp;&nbsp;!cur.ofKind(Matchbook))
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;q&gt;Sorry,&lt;/q&gt;&nbsp;{the&nbsp;curator/he}&nbsp;apologizes&nbsp;as&nbsp;he&nbsp;intercepts
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;you,&nbsp;&lt;q&gt;But&nbsp;we&nbsp;can't&nbsp;allow&nbsp;you&nbsp;to&nbsp;take&nbsp;any&nbsp;bags&nbsp;or&nbsp;containers
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;in&nbsp;there.&nbsp;It's&nbsp;policy,&nbsp;I'm&nbsp;afraid&nbsp;-&nbsp;one&nbsp;can't&nbsp;be&nbsp;too&nbsp;careful
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;these&nbsp;days.&lt;/q&gt;&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;&nbsp;isActive&nbsp;=&nbsp;(carbuncle.isIn(getActor))
<br>
;
<br>
</font><font face="Arial" size="2" color="#000000">
<br>
An InitiateTopic is thus a kind of TopicEntry that can be used to make an actor initiate conversation (or any other kind of action) in response to something in the environment. Although InitiateTopics are set up in exactly the same way as GiveTopics and ShowTopics, and, just like them, match game objects, they are activated not in response to player conversational commands such as GIVE TO, SHOW TO or ASK ABOUT, but under program control in response to a call to <b>initiateTopic(obj)</b>.
<br>

<br>
The example we have just given shows that we can generally use an initiateTopic(obj) statement to replace a switch(obj) statement and transform the cases within the body of the switch statement into individual InitiateTopics. At the same time the use of AltTopic and isActive can be used to replace the IF... THEN... ELSE... logic. The only limitation is that the InitiateTopics must be keyed on some set of objects (the obj parameter of the initiateTopic method). These could even be special objects created for the purpose, but more normally they will be existing objects that already serve some purpose in the game. In the most common case, they will often be locations (Rooms).
<br>

<br>
InitiateTopics keyed by location are probably most useful in connection with sidekick characters, like Sarah in the present game, who can be made to offer spontaneous observations on (some of) the various locations she visits in company with the player character. The best place to put the call to initiateTopic() is probably in the arrivingTurn() method of the sarahFollowingState, so that it's called each time Sarah arrives in a new location (but not every turn she remains there). Also, the player won't be impressed if Sarah makes the same remark every time she arrives in a given location, so we'll need to provide a list of responses for each case we implement. If we want Sarah to make a remark only on her first visit or two, the easiest way may be to provide an Event list with only one or two elements:
<br>

<br>
</font><font face="Courier New" size="2" color="#000000">+&nbsp;sarahFollowing&nbsp;:&nbsp;AccompanyingState
<br>
&nbsp;&nbsp;specialDesc&nbsp;=&nbsp;"{The&nbsp;sarah/she}&nbsp;is&nbsp;standing&nbsp;beside&nbsp;you.&nbsp;"
<br>
&nbsp;&nbsp;stateDesc&nbsp;=&nbsp;"She's&nbsp;standing&nbsp;beside&nbsp;you.&nbsp;"
<br>
&nbsp;&nbsp;accompanyTravel(leadActor,&nbsp;conn)&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;return&nbsp;leadActor&nbsp;==&nbsp;gPlayerChar;&nbsp;}
<br>
&nbsp;&nbsp;afterAction()
<br>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(gPlayerChar.isIn(snowMobile))
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getActor.setCurState(sarahOnSnowMobile);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nestedActorAction(getActor,&nbsp;SitOn,&nbsp;snowMobile);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"{The&nbsp;sarah/she}&nbsp;gets&nbsp;on&nbsp;the&nbsp;snowmobile&nbsp;behind&nbsp;you.&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;getAccompanyingTravelState(leadActor,&nbsp;conn)
<br>
&nbsp;&nbsp;&nbsp;{&nbsp;return&nbsp;new&nbsp;SarahInTravelState(location,&nbsp;leadActor,&nbsp;self);&nbsp;}&nbsp;&nbsp;
<br>
&nbsp;&nbsp;<b>arrivingTurn()&nbsp;{&nbsp;initiateTopic(getActor.location);&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;
<br>
</b>;
<br>
</font><font face="Arial" size="2" color="#000000">
<br>
</font><font face="Courier New" size="2" color="#000000">++&nbsp;InitiateTopic,&nbsp;EventList&nbsp;@portDeck
<br>
&nbsp;&nbsp;[&nbsp;'&lt;q&gt;What&nbsp;a&nbsp;big&nbsp;ship!&lt;/q&gt;&nbsp;{the&nbsp;sarah/she}&nbsp;remarks.&nbsp;']
<br>
;
<br>

<br>
++&nbsp;InitiateTopic,&nbsp;ShuffledEventList&nbsp;@tardisControlRoom&nbsp;&nbsp;
<br>
&nbsp;&nbsp;[&nbsp;'&lt;q&gt;Cor!&nbsp;This&nbsp;is&nbsp;impressive!&lt;/q&gt;&nbsp;{the&nbsp;sarah/she}&nbsp;remarks.&nbsp;',
<br>
&nbsp;&nbsp;&nbsp;&nbsp;'&lt;q&gt;Well,&nbsp;here&nbsp;we&nbsp;are&nbsp;again!&lt;/q&gt;&nbsp;says&nbsp;{the&nbsp;sarah/she}&nbsp;brightly.&nbsp;'&nbsp;]
<br>

<br>
&nbsp;&nbsp;[&nbsp;'&lt;q&gt;Well,&nbsp;where&nbsp;shall&nbsp;we&nbsp;go&nbsp;next?&lt;/q&gt;&nbsp;{the&nbsp;sarah/she}&nbsp;wonders.&nbsp;',
<br>
&nbsp;&nbsp;&nbsp;&nbsp;'{The&nbsp;sarah/she}&nbsp;wanders&nbsp;over&nbsp;to&nbsp;the&nbsp;console&nbsp;and&nbsp;inspects&nbsp;the&nbsp;setting
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;of&nbsp;the&nbsp;slider&nbsp;and&nbsp;dial.&nbsp;',&nbsp;nil&nbsp;]
<br>

<br>
;
<br>

<br>
++&nbsp;InitiateTopic,&nbsp;EventList&nbsp;@snowWorld
<br>
&nbsp;&nbsp;[&nbsp;'&lt;q&gt;Brrr.&nbsp;This&nbsp;place&nbsp;is&nbsp;so&nbsp;&lt;i&gt;cold&lt;/i&gt;,&lt;/q&gt;&nbsp;{the&nbsp;sarah/she}&nbsp;complains.&nbsp;',
<br>
&nbsp;&nbsp;&nbsp;&nbsp;'&lt;q&gt;Can\'t&nbsp;we&nbsp;just&nbsp;go&nbsp;back&nbsp;to&nbsp;the&nbsp;Tardis?&lt;/q&gt;&nbsp;{the&nbsp;sarah/she}&nbsp;asks.&nbsp;'&nbsp;]&nbsp;
<br>
;
<br>

<br>
++&nbsp;InitiateTopic,&nbsp;EventList&nbsp;@insideHut
<br>
&nbsp;&nbsp;[&nbsp;'{The&nbsp;sarah/she}&nbsp;walks&nbsp;over&nbsp;to&nbsp;the&nbsp;snowmobile&nbsp;and&nbsp;lays&nbsp;her&nbsp;hand&nbsp;on&nbsp;one&nbsp;of
<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;seats.&nbsp;Then&nbsp;she&nbsp;turns&nbsp;to&nbsp;you&nbsp;and&nbsp;asks,&nbsp;&lt;q&gt;What&nbsp;do&nbsp;you&nbsp;think?&lt;/q&gt;&nbsp;']
<br>
;
<br>

<br>
++&nbsp;InitiateTopic,&nbsp;EventList&nbsp;@neForestPath
<br>
&nbsp;&nbsp;[&nbsp;'{The&nbsp;sarah/she}&nbsp;starts&nbsp;scuffling&nbsp;the&nbsp;ground&nbsp;with&nbsp;her&nbsp;feet,&nbsp;&lt;q&gt;I&nbsp;think&nbsp;there
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;may&nbsp;be&nbsp;something&nbsp;here.&lt;/q&gt;&nbsp;she&nbsp;announces.&nbsp;'&nbsp;]
<br>
&nbsp;&nbsp;isActive&nbsp;=&nbsp;(!woodenTablet.discovered)
<br>
;
<br>

<br>

<br>
++&nbsp;InitiateTopic,&nbsp;EventList&nbsp;@redRavine
<br>
&nbsp;&nbsp;['&lt;q&gt;That\'s&nbsp;&lt;i&gt;horrible&lt;/i&gt;!&lt;/q&gt;&nbsp;{the&nbsp;sarah/she}&nbsp;declares,&nbsp;eyeing&nbsp;the
<br>
&nbsp;&nbsp;&nbsp;skeleton&nbsp;with&nbsp;evident&nbsp;disgust.&nbsp;',
<br>
&nbsp;&nbsp;&nbsp;'&lt;q&gt;What&nbsp;do&nbsp;you&nbsp;think&nbsp;happened&nbsp;to&nbsp;him?&lt;/q&gt;&nbsp;she&nbsp;asks,&nbsp;nodding&nbsp;towards
<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;skeleton.&nbsp;'
<br>
&nbsp;&nbsp;]
<br>
;
<br>

<br>
++&nbsp;InitiateTopic,&nbsp;EventList&nbsp;@solomonBedroom
<br>
&nbsp;&nbsp;['{The&nbsp;sarah/she}&nbsp;runs&nbsp;her&nbsp;hand&nbsp;over&nbsp;the&nbsp;bed,&nbsp;then&nbsp;walks&nbsp;over&nbsp;to&nbsp;the&nbsp;window&nbsp;and
<br>
&nbsp;&nbsp;&nbsp;&nbsp;looks&nbsp;out.&nbsp;&lt;q&gt;Hey!&nbsp;Come&nbsp;and&nbsp;have&nbsp;a&nbsp;look&nbsp;at&nbsp;this!&lt;/q&gt;&nbsp;she&nbsp;says.&nbsp;']
<br>
;
<br>

<br>

<br>
++&nbsp;InitiateTopic,&nbsp;EventList&nbsp;@museum
<br>
&nbsp;&nbsp;[&nbsp;'{The&nbsp;sarah/she}&nbsp;starts&nbsp;walking&nbsp;round,&nbsp;looking&nbsp;at&nbsp;the&nbsp;exhibits.&nbsp;&lt;q&gt;What
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;an&nbsp;odd&nbsp;collection!&lt;/q&gt;&nbsp;she&nbsp;declares.&nbsp;'&nbsp;]
<br>
;
<br>

<br>
++&nbsp;InitiateTopic,&nbsp;EventList&nbsp;@graveyard
<br>
&nbsp;&nbsp;[&nbsp;'&lt;q&gt;This&nbsp;place&nbsp;gives&nbsp;me&nbsp;the&nbsp;creeps!&lt;/q&gt;&nbsp;{the&nbsp;sarah/she}&nbsp;declares,&nbsp;with&nbsp;a
<br>
&nbsp;&nbsp;&nbsp;&nbsp;little&nbsp;shudder.&nbsp;',
<br>
&nbsp;&nbsp;&nbsp;&nbsp;'{The&nbsp;sarah/she}&nbsp;walks&nbsp;over&nbsp;to&nbsp;one&nbsp;of&nbsp;the&nbsp;tombstones&nbsp;and&nbsp;examines&nbsp;it
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;thoughtfully,&nbsp;&lt;q&gt;Come&nbsp;and&nbsp;have&nbsp;a&nbsp;look&nbsp;at&nbsp;this.&lt;/q&gt;&nbsp;she&nbsp;beckons&nbsp;you,
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;q&gt;I&nbsp;think&nbsp;it&nbsp;might&nbsp;be&nbsp;important&nbsp;-&nbsp;like&nbsp;it\'s&nbsp;the&nbsp;key&nbsp;to&nbsp;some&nbsp;sort&nbsp;of
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;code&nbsp;or&nbsp;something.&lt;/q&gt;&nbsp;'
<br>
&nbsp;&nbsp;]
<br>
&nbsp;&nbsp;isActive&nbsp;=&nbsp;(!ghost.isIn(graveyard))
<br>
;
<br>

<br>

<br>
++&nbsp;InitiateTopic&nbsp;@outsideCave
<br>
&nbsp;&nbsp;&nbsp;"{The&nbsp;sarah/she}&nbsp;looks&nbsp;round&nbsp;at&nbsp;the&nbsp;sky,&nbsp;the&nbsp;valley&nbsp;and&nbsp;the&nbsp;car&nbsp;park,&nbsp;then
<br>
&nbsp;&nbsp;&nbsp;&nbsp;turns&nbsp;to&nbsp;you&nbsp;with&nbsp;a&nbsp;slightly&nbsp;melancholy&nbsp;look,&nbsp;&lt;q&gt;It's&nbsp;good&nbsp;to&nbsp;be&nbsp;back&nbsp;out
<br>
&nbsp;&nbsp;&nbsp;&nbsp;here,&lt;/q&gt;&nbsp;she&nbsp;tells&nbsp;you,&nbsp;&lt;q&gt;but&nbsp;I&nbsp;have&nbsp;this&nbsp;horrible&nbsp;feeling&nbsp;we&nbsp;still&nbsp;have
<br>
&nbsp;&nbsp;&nbsp;&nbsp;unfinished&nbsp;business&nbsp;back&nbsp;in&nbsp;&lt;i&gt;there&lt;/i&gt;.&lt;/q&gt;&nbsp;she&nbsp;nods&nbsp;towards&nbsp;the&nbsp;caves.&nbsp;"
<br>
;
<br>

<br>
+++&nbsp;AltTopic
<br>
&nbsp;&nbsp;&nbsp;topicResponse&nbsp;
<br>
&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;"{The&nbsp;sarah/she}&nbsp;turns&nbsp;to&nbsp;you&nbsp;with&nbsp;a&nbsp;broad&nbsp;smile&nbsp;and&nbsp;gives&nbsp;you&nbsp;a&nbsp;great&nbsp;big
<br>
&nbsp;&nbsp;&nbsp;&nbsp;hug.\b&lt;q&gt;We&nbsp;&lt;i&gt;did&lt;/i&gt;&nbsp;it!&lt;/q&gt;&nbsp;she&nbsp;declares,&nbsp;&lt;q&gt;we&nbsp;really&nbsp;did&nbsp;it!&lt;/q&gt;\b&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;endGame(ftVictory);
<br>
&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;&nbsp;isActive&nbsp;=&nbsp;(goldenBanana.isIn(nil))
<br>
;
<br>
</font><font face="Arial" size="2" color="#000000">
<br>
One could probably add more such responses still, but you've probably seen enough to get the general idea, and we're beginning to bring Sarah to life a bit more. Note that our final AltTopic actually ends the game with the player winning - the objective is to get Sarah safely back outside and to destroy the golden banana, which are precisely the conditions under which this AltTopic becomes operative.
<br>

<br>
Since initiateTopic can key on <i>any</i> kind of object, we could also use it to make Sarah respond to SensoryEvents. First, we make her an observer of SoundEvents and SightEvents, then we can start adding suitable InitiateTopics:
<br>

<br>
</font><font face="Courier New" size="2" color="#000000">sarah&nbsp;:&nbsp;Person&nbsp;'attractive&nbsp;young&nbsp;woman/brunette'&nbsp;'young&nbsp;woman'&nbsp;@lakeRoom
<br>
&nbsp;&nbsp;"She's&nbsp;an&nbsp;attractive&nbsp;brunette,&nbsp;somewhere&nbsp;in&nbsp;her&nbsp;mid-twenties.&nbsp;"
<br>
&nbsp;&nbsp;isHer&nbsp;=&nbsp;true
<br>
&nbsp;&nbsp;properName&nbsp;=&nbsp;'Sarah'
<br>
&nbsp;&nbsp;globalParamName&nbsp;=&nbsp;'sarah'&nbsp;&nbsp;
<br>
&nbsp;&nbsp;knownProp&nbsp;=&nbsp;&amp;sarahKnows
<br>
&nbsp;&nbsp;seenProp&nbsp;=&nbsp;&amp;sarahHasSeen
<br>
&nbsp;&nbsp;<b>notifySightEvent(event,&nbsp;source,&nbsp;info)&nbsp;{&nbsp;initiateTopic(event);&nbsp;}
<br>
&nbsp;&nbsp;notifySoundEvent(event,&nbsp;source,&nbsp;info)&nbsp;{&nbsp;initiateTopic(event);&nbsp;}
<br>
</b>;
<br>

<br>
+&nbsp;InitiateTopic,&nbsp;EventList&nbsp;@bulkheadOpenEvent
<br>
&nbsp;&nbsp;['\b&lt;q&gt;That\'s&nbsp;clever!&lt;/q&gt;&nbsp;{the&nbsp;sarah/she}&nbsp;declares.&nbsp;',
<br>
&nbsp;&nbsp;&nbsp;'\b&lt;q&gt;Why&nbsp;not&nbsp;just&nbsp;leave&nbsp;it&nbsp;open?&lt;/q&gt;&nbsp;{the&nbsp;sarah/she}&nbsp;wonders.&nbsp;'
<br>
&nbsp;&nbsp;]
<br>
;
<br>

<br>
+&nbsp;InitiateTopic,&nbsp;EventList&nbsp;@sailEvent
<br>
&nbsp;&nbsp;['\b&lt;q&gt;So&nbsp;&lt;i&gt;that\'s&lt;/i&gt;&nbsp;how&nbsp;you&nbsp;sail&nbsp;this&nbsp;thing!&lt;/q&gt;&nbsp;{the&nbsp;sarah/she}&nbsp;declares.&nbsp;',
<br>
&nbsp;&nbsp;&nbsp;'\b&lt;q&gt;Here&nbsp;we&nbsp;go&nbsp;again!&lt;/q&gt;&nbsp;{the&nbsp;sarah/she}&nbsp;remarks&nbsp;cheerfully.&nbsp;',
<br>
&nbsp;&nbsp;&nbsp;'\b{The&nbsp;sarah/she}&nbsp;starts&nbsp;whistling&nbsp;&lt;i&gt;A&nbsp;Life&nbsp;on&nbsp;the&nbsp;Ocean&nbsp;Wave&lt;/i&gt;.&nbsp;'
<br>
&nbsp;&nbsp;]
<br>
;
<br>

<br>
+&nbsp;InitiateTopic&nbsp;@explosionEvent
<br>
&nbsp;&nbsp;topicResponse
<br>
&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;callWithSenseContext(&nbsp;getActor,&nbsp;sight,&nbsp;
<br>
&nbsp;&nbsp;&nbsp;{:&nbsp;"\b&lt;q&gt;Crikey,&nbsp;that&nbsp;sounded&nbsp;close!&lt;/q&gt;&nbsp;cries&nbsp;{the&nbsp;sarah/she}.&nbsp;"}&nbsp;);
<br>
&nbsp;&nbsp;}
<br>
;
<br>

<br>
+&nbsp;InitiateTopic&nbsp;@ghostAppearingEvent
<br>
&nbsp;&nbsp;"\b&lt;q&gt;Eek!&lt;/q&gt;&nbsp;cries&nbsp;{the&nbsp;sarah/she},&nbsp;clutching&nbsp;at&nbsp;your&nbsp;arm.&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&lt;&lt;getActor.setHasSeen(ghost)&gt;&gt;&lt;&lt;getActor.setKnowsAbout(goldenBanana)&gt;&gt;"
<br>
;</font><font face="Arial" size="2" color="#000000">
<br>
<br>
Note that we have located the last set of InitiateTopics directly in the actor object; you can also locate InitiateTopics in ActorStates, just like any other TopicEntry. Unlike other kinds of TopicEntry, however, you cannot put an InitiateTopic inside a <a href="conversationnodes-overview.htm">Conversation Node</a>(which would not be useful in any case).
<br>
<br>
Note too that in the last of these we call getActor.setHasSeen(ghost) to record the fact that Sarah has actually seen the ghost. Clearly this will be rather important if we want to define Sarah's responses to conversation about the ghost! At the same time we can note the fact that Sarah has now heard about the golden banana.
<br>

<br>
For any of these InitiateTopics to work, we obviously have to add some code to define the relevant events and trigger them, first the opening of the bulkhead door:
<br>

<br>
</font><font face="Courier New" size="2" color="#000000">+&nbsp;bulkheadDoor&nbsp;:&nbsp;HiddenDoor&nbsp;'bulkhead&nbsp;door/doorway/opening'&nbsp;'bulkhead&nbsp;door'
<br>
&nbsp;&nbsp;"The&nbsp;central&nbsp;section&nbsp;of&nbsp;the&nbsp;foreward&nbsp;bulkhead&nbsp;has&nbsp;slid&nbsp;open,&nbsp;revealing&nbsp;a&nbsp;
<br>
&nbsp;&nbsp;&nbsp;doorway&nbsp;through&nbsp;the&nbsp;bulkhead.&nbsp;"
<br>
&nbsp;&nbsp;destination&nbsp;=&nbsp;crewQuarters&nbsp;
<br>
&nbsp;&nbsp;<b>makeOpen(stat)
<br>
&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;inherited(stat);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;if(stat)&nbsp;bulkheadOpenEvent.triggerEvent(self);
<br>
&nbsp;&nbsp;}</b>
<br>
;
<br>

<br>
bulkheadOpenEvent&nbsp;:&nbsp;SightEvent;
<br>
</font><font face="Arial" size="2" color="#000000">
<br>
For the sailing of the ship we likewise define </font><font face="Courier New" size="2" color="#000000">sailEvent&nbsp;:&nbsp;SightEvent;</font><font face="Arial" size="2" color="#000000"> and then add </font><font face="Courier New" size="2" color="#000000">sailEvent.triggerEvent(self);&nbsp;</font><font face="Arial" size="2" color="#000000">after </font><font face="Courier New" size="2" color="#000000">ship.moveInto(wheel.curDestination);</font><font face="Arial" size="2" color="#000000"> on the SpringLever object attached to the panel on the quarterdeck. The explosionEvent has already been defined (when the bomb detonates on the London street), but note that in order for Sarah's response to it to be displayed we have to use callWithSenseContext since the triggering of explosionEvent takes place within a senseFuse.
<br>

<br>
Finally, we need to set up the ghostAppearingEvent:
<br>

<br>
r</font><font face="Courier New" size="2" color="#000000">oomDaemon
<br>
&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inherited;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(!ghost.moved&nbsp;&amp;&amp;&nbsp;!statue.isPulled)
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ghost.moveInto(self);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"A&nbsp;pale&nbsp;ghost&nbsp;rises&nbsp;slowly&nbsp;from&nbsp;one&nbsp;of&nbsp;the&nbsp;tombs,&nbsp;then&nbsp;turns&nbsp;to&nbsp;you,
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pointing&nbsp;its&nbsp;ghostly&nbsp;finger&nbsp;straight&nbsp;at&nbsp;you.&nbsp;&lt;q&gt;You!&lt;/q&gt;&nbsp;it&nbsp;cries,
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;q&gt;Yes&nbsp;you&nbsp;-&nbsp;the&nbsp;disturber&nbsp;of&nbsp;my&nbsp;statue!&nbsp;You&nbsp;are&nbsp;the&nbsp;one&nbsp;who&nbsp;must
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;carry&nbsp;out&nbsp;the&nbsp;sacred&nbsp;task!&nbsp;You&nbsp;are&nbsp;the&nbsp;one&nbsp;who&nbsp;must&nbsp;retrieve&nbsp;the
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Golden&nbsp;Banana&nbsp;of&nbsp;Discord&nbsp;and&nbsp;cast&nbsp;it&nbsp;into&nbsp;the&nbsp;fires&nbsp;of&nbsp;Mount&nbsp;Gloom
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;before&nbsp;it&nbsp;falls&nbsp;into&nbsp;the&nbsp;hands&nbsp;of&nbsp;the&nbsp;Cabal!&lt;/q&gt;&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ghostAppearingEvent.triggerEvent(ghost);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;gSetKnown(goldenBanana);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;gPlayerChar.setHasSeen(ghost);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;&nbsp;}
<br>
</font><font face="Arial" size="2" color="#000000">
<br>
And of course, you need to define:
<br>

<br>
</font><font face="Courier New" size="2" color="#000000">ghostAppearingEvent&nbsp;:&nbsp;SightEvent;
<br>
</font><font face="Arial" size="2" color="#000000">
<br>
Used with sufficient ingenuity, and in combination with SensoryEvents or keyed on locations etc, InitiateTopics can thus be used to define NPCs' reactions to just about anything we like.
<br>

<br>
Finally, although in this example we have used SensoryEvents to trigger InitiateTopics directly on the actor, if we'd really wanted a different set of InitiateTopics to handle different responses to these events on each ActorState, we could have defined:
<br>

<br>
</font><font face="Courier New" size="2" color="#000000">notifySightEvent(event,&nbsp;source,&nbsp;info)&nbsp;{&nbsp;curState.initiateTopic(event);&nbsp;}</font><font face="Arial" size="2" color="#000000">
<br>
</font><font face="Courier New" size="2" color="#000000">notifySoundEvent(event,&nbsp;source,&nbsp;info)&nbsp;{&nbsp;curState.initiateTopic(event);&nbsp;}</font><font face="Arial" size="2" color="#000000">
<br>
</font></font>

</body></html>
