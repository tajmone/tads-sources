<html><head><meta name="generator" content="Help & Manual 2.7.0"><title>TravelPushable</title><meta name="keywords" content="TravelPushable,cannotTakeMsg,specialDesc,describeMovePushable,destName,actorDirectlyInRoom,lookAroundWithinName"></meta></head>
<body bgcolor="#FFFFFF">
<table width="100%" border="0" cellspacing="0" cellpadding="3" bgcolor="#C0C0C0"><tr><td align="left">
<font face="Arial" size="3" color="#000000"><b>TravelPushable : <a href="immovable.htm">Immovable</a>
<br>
</b></font>

</td><td align="right"><font face="Arial" size="2"><a href="prerestartobject.htm">[Previous]</a> <a href="generalintroduction.htm">[Main]</a> <a href="pushtravelbarrier.htm">[Next]</a></font></td></tr></table><br>

<font face="Arial" size="2" color="#000000">A TravelPushable is an object that can't be picked up but can be pushed from one location to another (by the player issuing commands such as PUSH WHEELBARROW NORTH or PUSH BARROW INTO SHIP). As a simple example we can implement a wheelbarrow that would be useful for moving the gold tablet around:
<br>

<br>
<font face="Courier New" size="2" color="#000000">wheelBarrow&nbsp;:&nbsp;TravelPushable,&nbsp;Container&nbsp;'old&nbsp;tin&nbsp;wheel&nbsp;wheelbarrow/barrow'&nbsp;
<br>
&nbsp;&nbsp;'wheelbarrow'&nbsp;@graveyard
<br>
&nbsp;&nbsp;"It's&nbsp;an&nbsp;old&nbsp;tin&nbsp;wheelbarrow,&nbsp;a&nbsp;bit&nbsp;battered,&nbsp;but&nbsp;seemingly&nbsp;still&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;in&nbsp;serviceable&nbsp;condition.&nbsp;"
<br>
&nbsp;&nbsp;initSpecialDesc&nbsp;=&nbsp;"An&nbsp;old&nbsp;tin&nbsp;wheelbarrow&nbsp;lies&nbsp;forgotten&nbsp;in&nbsp;one&nbsp;corner&nbsp;of&nbsp;the&nbsp;graveyard.&nbsp;"&nbsp;&nbsp;
<br>
&nbsp;&nbsp;specialDesc&nbsp;=&nbsp;"The&nbsp;old&nbsp;tin&nbsp;wheelbarrow&nbsp;rests&nbsp;here.&nbsp;"
<br>
&nbsp;&nbsp;cannotTakeMsg&nbsp;=&nbsp;'The&nbsp;wheelbarrow&nbsp;is&nbsp;a&nbsp;bit&nbsp;too&nbsp;heavy&nbsp;and&nbsp;cumbersome&nbsp;to&nbsp;carry&nbsp;around.&nbsp;
<br>
&nbsp;&nbsp;Pushing&nbsp;it&nbsp;would&nbsp;probably&nbsp;prove&nbsp;more&nbsp;productive.&nbsp;'
<br>
;
<br>
</font><font face="Arial" size="2" color="#000000">
<br>
Since TravelPushable inherits from Immovable, it's a good idea to give the wheelbarrow a specialDesc as well as an initSpecialDesc to make sure that it gets listed in room descriptions. Although the default message you get when you try to take a TravelPushable is okay, we customize it here to say the same thing but in a manner slightly more tailored to the specific object; we do this by overriding <b>cannotTakeMsg</b> with a single-quoted string (it must contain either a single-quoted string or a property pointer).
<br>

<br>
This wheelbarrow will work fine as it is, and will certainly help with carting the gold tablet around. One refinement we could add is to improve on the "You push the wheelbarrow into the area" that appears each time the barrow is pushed somewhere. We can take advantage of the fact that we've defined a destName on every location to override describeMovePushable with something a bit more specific:
<br>

<br>
</font><font face="Courier New" size="2" color="#000000">modify&nbsp;TravelPushable
<br>
&nbsp;&nbsp;describeMovePushable(traveler,&nbsp;connector)
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(gActor.isPlayerChar)
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"You&nbsp;push&nbsp;&lt;&lt;theName&gt;&gt;&nbsp;into&nbsp;&lt;&lt;location.destName&gt;&gt;.&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
;
<br>
</font><font face="Arial" size="2" color="#000000">
<br>
For a more complex example, let's start filling in some of the detail on the south side of the lake. The tunnel south from the shore will soon come to a deep uncrossable chasm. However, a stone monolith waits on the shore; if the player pushes it into the chasm, the monolith then forms a bridge that can be crossed. The main trick here is to make the chasm a room in its own right, and, recognizing that a Room is also a TravelConnector, override its canTravelerPass and explainTravelBarrier methods to prevent travel unless either the monolith is already in the chasm or it is in the process of being pushed into the chasm:
<br>

<br>
</font><font face="Courier New" size="2" color="#000000">southShore&nbsp;:&nbsp;Room&nbsp;'Rocky&nbsp;shore'&nbsp;'the&nbsp;rocky&nbsp;shore'
<br>
&nbsp;&nbsp;&nbsp;"The&nbsp;rocky&nbsp;shore&nbsp;looks&nbsp;so&nbsp;barren&nbsp;here&nbsp;as&nbsp;to&nbsp;be&nbsp;scarcely&nbsp;worth&nbsp;visiting,&nbsp;apart
<br>
&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;a&nbsp;narrow&nbsp;tunnel&nbsp;leading&nbsp;off&nbsp;to&nbsp;the&nbsp;south<b>"
<br>
&nbsp;&nbsp;&nbsp;finalDesc&nbsp;=&nbsp;".&nbsp;"&nbsp;//&nbsp;for&nbsp;the&nbsp;custom&nbsp;finalDesc&nbsp;property&nbsp;see&nbsp;our&nbsp;<a href="specialdesc.htm#roomdesc">inRoomDesc&nbsp;modification</a>
<br>
&nbsp;&nbsp;&nbsp;south&nbsp;=&nbsp;narrowTunnel</b>&nbsp;&nbsp;&nbsp;
<br>
;
<br>

<br>
+&nbsp;monolith&nbsp;:&nbsp;TravelPushable&nbsp;'large&nbsp;black&nbsp;monolith'&nbsp;'black&nbsp;monolith'
<br>
&nbsp;&nbsp;"Deep&nbsp;black&nbsp;in&nbsp;colour,&nbsp;it's&nbsp;a&nbsp;smooth&nbsp;black&nbsp;oblong&nbsp;about&nbsp;six&nbsp;feet&nbsp;by&nbsp;three,&nbsp;and&nbsp;
<br>
&nbsp;&nbsp;&nbsp;about&nbsp;six&nbsp;inches&nbsp;thick.&nbsp;&lt;&lt;isIn(deepChasm)&nbsp;?&nbsp;'Currently,&nbsp;it\'s&nbsp;wedged&nbsp;in&nbsp;the
<br>
&nbsp;&nbsp;&nbsp;chasm,&nbsp;forming&nbsp;a&nbsp;precarious&nbsp;bridge.&nbsp;'&nbsp;:&nbsp;nil&gt;&gt;"
<br>
&nbsp;&nbsp;initSpecialDesc&nbsp;=&nbsp;""&nbsp;
<br>
&nbsp;&nbsp;specialDesc&nbsp;=&nbsp;"&lt;&lt;isIn(deepChasm)&nbsp;||&nbsp;travelInProgress&nbsp;?&nbsp;''&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;'The&nbsp;black&nbsp;monolith&nbsp;stands&nbsp;on&nbsp;the&nbsp;ground.&nbsp;'&gt;&gt;"
<br>
&nbsp;&nbsp;inRoomDesc()&nbsp;{&nbsp;if(!moved)&nbsp;",&nbsp;and&nbsp;a&nbsp;black&nbsp;monolith&nbsp;projecting&nbsp;out&nbsp;of&nbsp;the&nbsp;rocks";&nbsp;}
<br>
&nbsp;&nbsp;cannotTakeMsg&nbsp;=&nbsp;'There\'s&nbsp;no&nbsp;way&nbsp;anyone\'s&nbsp;going&nbsp;to&nbsp;lift&nbsp;that&nbsp;great&nbsp;block&nbsp;of&nbsp;stone.&nbsp;'
<br>
&nbsp;&nbsp;dobjFor(PushTravel)
<br>
&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;verify()
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(isIn(deepChasm))
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;illogicalNow&nbsp;('For&nbsp;one&nbsp;thing&nbsp;you\'re&nbsp;standing&nbsp;on&nbsp;the&nbsp;monolith,&nbsp;and
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;another&nbsp;it\'s&nbsp;wedged&nbsp;firmly&nbsp;(you&nbsp;hope)&nbsp;in&nbsp;the&nbsp;chasm.&nbsp;');
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inherited;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;action
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;travelInProgress&nbsp;=&nbsp;true;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inherited;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;travelInProgress&nbsp;=&nbsp;nil;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;travelInProgress&nbsp;=&nbsp;nil
<br>
&nbsp;&nbsp;describeMovePushable(traveler,&nbsp;connector)
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(location&nbsp;==&nbsp;deepChasm)
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The&nbsp;monolith&nbsp;has&nbsp;toppled&nbsp;into&nbsp;the&nbsp;chasm,&nbsp;forming&nbsp;a&nbsp;precarious&nbsp;bridge&nbsp;of&nbsp;sorts,
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;on&nbsp;which&nbsp;you're&nbsp;now&nbsp;standing.&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setSuperclassList([Floor]);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;deepChasm.roomParts&nbsp;+=&nbsp;self;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inherited(traveler,&nbsp;connector);&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;beforeMovePushable(traveler,&nbsp;connector,&nbsp;dest)&nbsp;
<br>
&nbsp;&nbsp;{&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(connector&nbsp;==&nbsp;deepChasm)
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"You&nbsp;push&nbsp;the&nbsp;monolith&nbsp;towards&nbsp;the&nbsp;edge&nbsp;of&nbsp;the&nbsp;chasm;&nbsp;as&nbsp;it&nbsp;reaches&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;edge&nbsp;it&nbsp;begins&nbsp;to&nbsp;topple.\b";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The&nbsp;monolith&nbsp;is&nbsp;&lt;i&gt;very&lt;/i&gt;&nbsp;heavy,&nbsp;but&nbsp;with&nbsp;a&nbsp;supreme&nbsp;effort&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;than&nbsp;nearly&nbsp;gives&nbsp;you&nbsp;three&nbsp;hernias&nbsp;and&nbsp;four&nbsp;burst&nbsp;blood
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vessels&nbsp;you&nbsp;manage&nbsp;to&nbsp;start&nbsp;pushing&nbsp;it.&nbsp;";
<br>
&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;dobjFor(SitOn)
<br>
&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;preCond&nbsp;=&nbsp;inherited&nbsp;+&nbsp;actorDirectlyInRoom
<br>
&nbsp;&nbsp;&nbsp;&nbsp;verify()
<br>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(ofKind(Floor)&nbsp;&amp;&amp;&nbsp;gActor.isIn(deepChasm))
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logicalRank(140,&nbsp;'most&nbsp;likely&nbsp;floor'&nbsp;);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;if(ofKind(Floor))
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nonObvious;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inherited;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;dobjFor(LieOn)
<br>
&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;preCond&nbsp;=&nbsp;inherited&nbsp;+&nbsp;actorDirectlyInRoom
<br>
&nbsp;&nbsp;&nbsp;&nbsp;verify()&nbsp;{&nbsp;if(ofKind(Floor))&nbsp;verifyDobjSitOn;&nbsp;else&nbsp;inherited;&nbsp;}
<br>
&nbsp;&nbsp;}
<br>
;
<br>

<br>
narrowTunnel&nbsp;:&nbsp;DarkRoom&nbsp;'Narrow&nbsp;Tunnel'&nbsp;'the&nbsp;narrow&nbsp;tunnel'
<br>
&nbsp;&nbsp;"This&nbsp;short&nbsp;section&nbsp;of&nbsp;tunnel&nbsp;leads&nbsp;south&nbsp;from&nbsp;the&nbsp;rocky&nbsp;shore,&nbsp;but&nbsp;then
<br>
&nbsp;&nbsp;&nbsp;&nbsp;comes&nbsp;to&nbsp;an&nbsp;abrupt&nbsp;end&nbsp;at&nbsp;the&nbsp;edge&nbsp;of&nbsp;a&nbsp;deep&nbsp;chasm.&nbsp;Another&nbsp;tunnel&nbsp;continues
<br>
&nbsp;&nbsp;&nbsp;&nbsp;south&nbsp;from&nbsp;the&nbsp;ledge&nbsp;on&nbsp;the&nbsp;far&nbsp;side&nbsp;of&nbsp;the&nbsp;chasm.&nbsp;"
<br>
&nbsp;&nbsp;north&nbsp;=&nbsp;southShore
<br>
&nbsp;&nbsp;south&nbsp;=&nbsp;deepChasm
<br>
;
<br>

<br>
MultiLoc,&nbsp;Enterable&nbsp;-&gt;deepChasm&nbsp;'deep&nbsp;chasm'&nbsp;'deep&nbsp;chasm'
<br>
&nbsp;&nbsp;"&lt;&lt;deepChasm.desc&gt;&gt;"
<br>
&nbsp;&nbsp;locationList&nbsp;=&nbsp;[narrowTunnel,&nbsp;chasmLedge]
<br>
;
<br>

<br>
deepChasm&nbsp;:&nbsp;DarkRoom&nbsp;'Deep&nbsp;Chasm'&nbsp;'the&nbsp;deep&nbsp;chasm'
<br>
&nbsp;&nbsp;"The&nbsp;chasm&nbsp;is&nbsp;not&nbsp;something&nbsp;you&nbsp;want&nbsp;to&nbsp;look&nbsp;down&nbsp;if&nbsp;you&nbsp;suffer&nbsp;from
<br>
&nbsp;&nbsp;&nbsp;vertigo;&nbsp;but&nbsp;a&nbsp;long&nbsp;way&nbsp;below,&nbsp;almost&nbsp;too&nbsp;far&nbsp;down&nbsp;to&nbsp;see,&nbsp;runs&nbsp;a&nbsp;narrow,&nbsp;inky&nbsp;river.&nbsp;
<br>
&nbsp;&nbsp;&nbsp;The&nbsp;chasm&nbsp;is&nbsp;about&nbsp;six&nbsp;feet&nbsp;wide,&nbsp;too&nbsp;far&nbsp;to&nbsp;jump&lt;&lt;monolith.isIn(self)&nbsp;?&nbsp;',&nbsp;&nbsp;but&nbsp;a
<br>
&nbsp;&nbsp;&nbsp;stone&nbsp;monolith&nbsp;forms&nbsp;a&nbsp;bridge&nbsp;of&nbsp;sorts&nbsp;across&nbsp;it'&nbsp;:&nbsp;nil&gt;&gt;.&nbsp;"
<br>
&nbsp;&nbsp;north&nbsp;=&nbsp;narrowTunnel
<br>
&nbsp;&nbsp;south&nbsp;=&nbsp;chasmLedge
<br>
&nbsp;&nbsp;canTravelerPass(traveler)&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;{return&nbsp;monolith.isIn(self)&nbsp;||&nbsp;monolith.travelInProgress;&nbsp;}
<br>
&nbsp;&nbsp;explainTravelBarrier(traveler)
<br>
&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;"The&nbsp;chasm&nbsp;is&nbsp;too&nbsp;wide&nbsp;to&nbsp;jump&nbsp;over,&nbsp;and&nbsp;you&nbsp;certainly&nbsp;don't
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;want&nbsp;to&nbsp;fall&nbsp;into&nbsp;it.&nbsp;";
<br>
&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;cannotGoThatWayMsg&nbsp;=&nbsp;'Stepping&nbsp;off&nbsp;the&nbsp;monolith&nbsp;into&nbsp;the&nbsp;chasm&nbsp;would&nbsp;mean
<br>
&nbsp;&nbsp;&nbsp;falling&nbsp;to&nbsp;almost&nbsp;certain&nbsp;death.&nbsp;'
<br>
&nbsp;&nbsp;roomParts&nbsp;=&nbsp;[defaultCeiling]&nbsp;&nbsp;
<br>
&nbsp;&nbsp;lookAroundWithinName(actor,&nbsp;illum)
<br>
&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;inherited(actor,&nbsp;illum);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(actor.posture&nbsp;==&nbsp;standing)&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;(standing&nbsp;on&nbsp;&lt;&lt;monolith.theName&gt;&gt;)";&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;}
<br>
;
<br>

<br>
+&nbsp;inkyRiver&nbsp;:&nbsp;Distant&nbsp;'narrow&nbsp;inky&nbsp;black&nbsp;river/water'&nbsp;'river'
<br>
&nbsp;&nbsp;"The&nbsp;narrow&nbsp;river&nbsp;runs&nbsp;along&nbsp;the&nbsp;bottom&nbsp;of&nbsp;the&nbsp;chasm&nbsp;about&nbsp;a&nbsp;hundred&nbsp;feet&nbsp;or&nbsp;so&nbsp;below;
<br>
&nbsp;&nbsp;&nbsp;its&nbsp;water&nbsp;looks&nbsp;inky&nbsp;black&nbsp;in&nbsp;the&nbsp;near&nbsp;darkness&nbsp;down&nbsp;there.&nbsp;"
<br>
;
<br>

<br>
chasmLedge&nbsp;:&nbsp;DarkRoom&nbsp;'Ledge&nbsp;of&nbsp;Chasm'&nbsp;'the&nbsp;ledge&nbsp;of&nbsp;the&nbsp;chasm'
<br>
&nbsp;&nbsp;"A&nbsp;deep,&nbsp;wide&nbsp;chasm&nbsp;splits&nbsp;the&nbsp;ground&nbsp;immediately&nbsp;to&nbsp;the&nbsp;north&nbsp;of&nbsp;this
<br>
&nbsp;&nbsp;&nbsp;narrow&nbsp;ledge,&nbsp;while&nbsp;a&nbsp;dark&nbsp;tunnel&nbsp;runs&nbsp;south.&nbsp;Another&nbsp;tunnel&nbsp;can&nbsp;be&nbsp;
<br>
&nbsp;&nbsp;&nbsp;seen&nbsp;leading&nbsp;north&nbsp;from&nbsp;the&nbsp;far&nbsp;side&nbsp;of&nbsp;the&nbsp;chasm.&nbsp;"
<br>
&nbsp;&nbsp;north&nbsp;=&nbsp;deepChasm
<br>

<br>
;
<br>

<br>
</font><font face="Arial" size="2" color="#000000">One trick here is to override deepChasm.lookAroundWithinName so that it adds "(standing on the black monolith)" to the name of the room when the player character is indeed standing (the inherited behaviour will deal with sitting and lying).</font><font face="Courier New" size="2" color="#000000">
<br>

<br>
</font><font face="Arial" size="2" color="#000000">The other trick here is to make the monolith transform itself into a Floor and add itself to the chasm's roomParts once it arrives in the chasm, so that we get the right responses if the player SITS or LIES there. Also, since the defaultFloors of the adjacent rooms will also be in scope thanks to the <a href="distanceconnector.htm">DistanceConnector</a> we'll be adding later, we need to make the monolith the most likely item to sit or lie on when we're directly on top of it, but not when we're in one of the adjacent locations. Conversely, we add actorDirectlyInRoom to the preconditions for sitting or lying on the monolith to prevent the otherwise rather odd behaviour that will occur (once the DistanceConnector is in place) when the player character attempts to sit or lie on the monolith while he's in an adjacent location.</font><font face="Courier New" size="2" color="#000000">
<br>
</font></font>

</body></html>
