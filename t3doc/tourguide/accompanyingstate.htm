<html><head><meta name="generator" content="Help & Manual 2.7.0"><title>AccompanyingState</title><meta name="keywords" content="AccompanyingState,accompanyTravel,getAccompanyingTravelState"></meta></head>
<body bgcolor="#FFFFFF">
<table width="100%" border="0" cellspacing="0" cellpadding="3" bgcolor="#C0C0C0"><tr><td align="left">
<font face="Arial" size="3" color="#000000"><b>AccompanyingState : <a href="overview-actorstates.htm">ActorState</a>
<br>
</b></font>

</td><td align="right"><font face="Arial" size="2"><a href="hermitactorstate.htm">[Previous]</a> <a href="generalintroduction.htm">[Main]</a> <a href="accompanyingintravelstate.htm">[Next]</a></font></td></tr></table><br>

<font face="Arial" size="2" color="#000000">If you want an NPC to follow your player character around, you need to put that NPC into an AccompanyingState, when by default he or she will then follow any actor wherever that actor goes. In practice you may want to limit this over-eager behaviour, which you can do by overriding the <b>accompanyTravel(leadActor, conn)</b> method to return true only for the combinations of leadActor and connector that you want the NPC to follow; typically, for an NPC who's following the PC around, you might override this method to <font face="Courier New" size="2" color="#000000">{&nbsp;return&nbsp;leadActor==gPlayerChar;&nbsp;}</font><font face="Arial" size="2" color="#000000"> but you could apply further qualifications if, for example, there were certain connectors you didn't want this NPC to follow your PC through. The other method distinctive to AccompanyState is <b>getAccompanyingTravelState(leadActor, conn)</b>, which returns the associated <a href="accompanyingintravelstate.htm">AccompanyingInTravelState</a> (which we'll explain shortly). AccompanyingState also inherits all the <a href="overview-actorstates.htm">ActorState </a>methods we've already seen, not least <b>arrivingTurn()</b>.
<br>

<br>
The NPC who's been elected to follow the PC on his travels in this game is the young woman Sarah. She's lost her diamond ring and won't follow the PC around until he's given it to her, so we'll put temporary handling on the sarah object to switch her into her AccompanyingState when she's given the ring (note that this isn't how we'd normally do it; here it's a temporary expedient until we come to GiveTopic).
<br>

<br>
</font><font face="Courier New" size="2" color="#000000">sarah&nbsp;:&nbsp;Person&nbsp;'attractive&nbsp;young&nbsp;woman/brunette'&nbsp;'young&nbsp;woman'&nbsp;@lakeRoom
<br>
&nbsp;&nbsp;"She's&nbsp;an&nbsp;attractive&nbsp;brunette,&nbsp;somewhere&nbsp;in&nbsp;her&nbsp;mid-twenties.&nbsp;"
<br>
&nbsp;&nbsp;isHer&nbsp;=&nbsp;true
<br>
&nbsp;&nbsp;properName&nbsp;=&nbsp;'Sarah'
<br>
&nbsp;&nbsp;globalParamName&nbsp;=&nbsp;'sarah'
<br>
&nbsp;&nbsp;
<br>
&nbsp;&nbsp;/*&nbsp;The&nbsp;next&nbsp;section&nbsp;of&nbsp;code&nbsp;is&nbsp;NOT&nbsp;how&nbsp;we'd&nbsp;do&nbsp;it&nbsp;for&nbsp;real&nbsp;-&nbsp;
<br>
&nbsp;&nbsp;&nbsp;*&nbsp;As&nbsp;we'll&nbsp;see&nbsp;this&nbsp;is&nbsp;MUCH&nbsp;better&nbsp;handled&nbsp;using&nbsp;a&nbsp;GiveTopic,
<br>
&nbsp;&nbsp;&nbsp;*&nbsp;but&nbsp;since&nbsp;we&nbsp;haven't&nbsp;got&nbsp;to&nbsp;GiveTopic&nbsp;yet&nbsp;we&nbsp;have&nbsp;to&nbsp;use
<br>
&nbsp;&nbsp;&nbsp;*&nbsp;the&nbsp;bad&nbsp;old&nbsp;way.
<br>
&nbsp;&nbsp;&nbsp;*/
<br>
&nbsp;&nbsp;iobjFor(GiveTo)&nbsp;&nbsp;
<br>
&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;verify()&nbsp;{&nbsp;}
<br>
&nbsp;&nbsp;&nbsp;&nbsp;check()&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(gDobj&nbsp;!=&nbsp;diamondRing)&nbsp;inherited;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;&nbsp;&nbsp;action()
<br>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(gDobj&nbsp;==&nbsp;diamondRing)
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"&lt;q&gt;Great!&nbsp;I\'ve&nbsp;been&nbsp;looking&nbsp;for&nbsp;that!&lt;/q&gt;&nbsp;she&nbsp;declares,&nbsp;&lt;q&gt;Since
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;you&nbsp;seem&nbsp;to&nbsp;know&nbsp;what&nbsp;you\'re&nbsp;doing,&nbsp;I&nbsp;think&nbsp;I\'ll&nbsp;stick&nbsp;with&nbsp;you
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;now&nbsp;on.&lt;/q&gt;&lt;.p&gt;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gDobj.moveInto(sarah);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setCurState(sarahFollowing);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;
<br>
&nbsp;&nbsp;}
<br>
;
<br>

<br>
+&nbsp;sarahFollowing&nbsp;:&nbsp;AccompanyingState
<br>
&nbsp;&nbsp;specialDesc&nbsp;=&nbsp;"{The&nbsp;sarah/she}&nbsp;is&nbsp;standing&nbsp;beside&nbsp;you.&nbsp;"
<br>
&nbsp;&nbsp;stateDesc&nbsp;=&nbsp;"She's&nbsp;standing&nbsp;beside&nbsp;you.&nbsp;"
<br>
&nbsp;&nbsp;accompanyTravel(leadActor,&nbsp;conn)&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;return&nbsp;leadActor&nbsp;==&nbsp;gPlayerChar;&nbsp;}
<br>
;
<br>
</font><font face="Arial" size="2" color="#000000">
<br>
If you try this out you'll find it works - after a fashion. Sarah will follow you around (in a strangely silent kind of way) so long as you're moving from room to room, but won't follow you into a nestedRoom. This may be fine, but does mean that, for example, if you get on the snowMobile and ride off, Sarah won't follow you.  Even, if Sarah <i>had</i> followed the PC onto the snowmobile, she'd still be described as "standing beside you", whereas at that point we need her to be described as "sitting behind you." To fix the first set of problems we need a different ActorState for Sarah when she's on the snowmobile, and an appropriate test for making Sarah get on and off the snowmobile and change states. Here's how we might do it with the tools we've seen so far:
<br>

<br>
</font><font face="Courier New" size="2" color="#000000">+&nbsp;sarahFollowing&nbsp;:&nbsp;AccompanyingState
<br>
&nbsp;&nbsp;specialDesc&nbsp;=&nbsp;"{The&nbsp;sarah/she}&nbsp;is&nbsp;standing&nbsp;beside&nbsp;you.&nbsp;"
<br>
&nbsp;&nbsp;stateDesc&nbsp;=&nbsp;"She's&nbsp;standing&nbsp;beside&nbsp;you.&nbsp;"
<br>
&nbsp;&nbsp;accompanyTravel(leadActor,&nbsp;conn)&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;return&nbsp;leadActor&nbsp;==&nbsp;gPlayerChar;&nbsp;}
<br>
&nbsp;&nbsp;afterAction()
<br>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(gPlayerChar.isIn(snowMobile))
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getActor.setCurState(sarahOnSnowMobile);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nestedActorAction(getActor,&nbsp;SitOn,&nbsp;snowMobile);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"{The&nbsp;sarah/she}&nbsp;gets&nbsp;on&nbsp;the&nbsp;snowmobile&nbsp;behind&nbsp;you.&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
;
<br>

<br>
+&nbsp;sarahOnSnowMobile&nbsp;:&nbsp;HermitActorState
<br>
&nbsp;&nbsp;specialDesc&nbsp;=&nbsp;"{The&nbsp;sarah/she}&nbsp;is&nbsp;sitting&nbsp;behind&nbsp;you.&nbsp;"&nbsp;&nbsp;
<br>
&nbsp;&nbsp;afterAction()
<br>
&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;if(!gPlayerChar.isIn(snowMobile))
<br>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getActor.setCurState(sarahFollowing);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nestedActorAction(getActor,&nbsp;GetOutOf,&nbsp;snowMobile);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"{The&nbsp;sarah/she}&nbsp;climbs&nbsp;off&nbsp;the&nbsp;snowmobile&nbsp;after&nbsp;you.&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;noResponse&nbsp;=&nbsp;"&lt;q&gt;Let's&nbsp;just&nbsp;get&nbsp;moving,&nbsp;shall&nbsp;we?&lt;/q&gt;&nbsp;she&nbsp;suggests.&lt;.p&gt;"
<br>
;
<br>
</font><font face="Arial" size="2" color="#000000">
<br>
Strictly speaking this isn't how we'd normally use a HermitActorState, since the noResponse message actually is a response; in this case it's a convenient shortcut, and we haven't encountered DefaultAnyTopic yet.
<br>
</font></font>

</body></html>
