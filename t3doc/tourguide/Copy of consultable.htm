<html><head><meta name="generator" content="Help & Manual 2.7.0"><title>Consultable</title><meta name="keywords" content="Consultable"></meta></head>
<body bgcolor="#FFFFFF">
<table width="100%" border="0" cellspacing="0" cellpadding="3" bgcolor="#C0C0C0"><tr><td align="left">
<font face="Arial" size="3" color="#000000"><b>Consultable : <a href="thing-introduction.htm">Thing</a>, TopicDatabase
<br>
</b></font>

</td><td align="right"><font face="Arial" size="2"><a href="amodifieddefaultcommandtopic.htm">[Previous]</a> <a href="generalintroduction.htm">[Main]</a> <a href="consulttopic.htm">[Next]</a></font></td></tr></table><br>

<font face="Arial" size="2" color="#000000">A Consultable is something you can look things up in, in response to commands like LOOK BANANA UP IN BOOK or CONSULT BOOK ABOUT MEANING OF LIFE. It follows that a Consultable will normally be something like a book, or maybe a computer. The advantage of a Consultable is that it can contain <a href="consulttopic.htm">ConsultTopics</a>, which work in much the way as other <a href="topicentry.htm">TopicEntries</a> work for an actor.
<br>

<br>
We'll define just one Consultable in this game: a book, which we'll also make a Readable:
<br>

<br>
<font face="Courier New" size="2" color="#000000">historyBook&nbsp;:&nbsp;Readable,&nbsp;Consultable&nbsp;'dark&nbsp;blue&nbsp;book'&nbsp;'dark&nbsp;blue&nbsp;book'&nbsp;@glassShelf
<br>
&nbsp;&nbsp;"The&nbsp;gold-lettered&nbsp;title&nbsp;on&nbsp;the&nbsp;dark&nbsp;blue&nbsp;cover&nbsp;is&nbsp;&lt;i&gt;The&nbsp;Great&nbsp;History&lt;/i&gt;."
<br>
&nbsp;&nbsp;readDesc&nbsp;=&nbsp;"It's&nbsp;too&nbsp;long&nbsp;to&nbsp;read&nbsp;from&nbsp;cover&nbsp;to&nbsp;cover&nbsp;right&nbsp;now,&nbsp;but
<br>
&nbsp;&nbsp;&nbsp;you&nbsp;could&nbsp;consult&nbsp;it&nbsp;on&nbsp;specific&nbsp;topics.&nbsp;"&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;dobjFor(Read)
<br>
&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;preCond&nbsp;=&nbsp;inherited&nbsp;+&nbsp;objHeld;
<br>
&nbsp;}&nbsp;&nbsp;
<br>
&nbsp;dobjFor(Consult)
<br>
&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;preCond&nbsp;=&nbsp;inherited&nbsp;+&nbsp;objHeld;
<br>
&nbsp;}
<br>
;
<br>
</font><font face="Arial" size="2" color="#000000">
<br>
Just to make things a little more difficult, we've put the history book inside a glass-fronted shelf, so that it can only be read by first opening the front of the shelf. To enforce this we add objHeld to the list of preconditions for both reading and consulting the book. The shelf front is unlocked  by pushing a button, but this will only work if the shelf is plugged in to the electrical supply. To do this requires the power cable that's also used for the vending machine. We'll start this cable off in a wall-mounted cabinet in a storeroom next to the library, but to reach the cabinet you need to stand on something, so we'll put a convenient stool in the library for the purpose. Since the doors to the library and the storeroom are next to each other in the south wall, we'll need to use an AskConnector.
<br>

<br>
None of this is new, but it may refresh your memory of things we've used before:
<br>

<br>
</font><font face="Courier New" size="2" color="#000000">stoneLanding&nbsp;:&nbsp;Room&nbsp;'Landing'&nbsp;'the&nbsp;landing'
<br>
&nbsp;&nbsp;&nbsp;"A&nbsp;pair&nbsp;of&nbsp;doors&nbsp;lead&nbsp;south&nbsp;from&nbsp;this&nbsp;narrow&nbsp;landing,&nbsp;from&nbsp;which
<br>
&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;narrow&nbsp;flight&nbsp;of&nbsp;stone&nbsp;steps&nbsp;lead&nbsp;down&nbsp;to&nbsp;the&nbsp;north.&nbsp;"
<br>
&nbsp;&nbsp;&nbsp;down&nbsp;=&nbsp;slStairsDown
<br>
&nbsp;&nbsp;&nbsp;north&nbsp;asExit(down)&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;south&nbsp;:&nbsp;AskConnector&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;promptMessage&nbsp;=&nbsp;"There&nbsp;are&nbsp;two&nbsp;doors&nbsp;to&nbsp;the&nbsp;south.&nbsp;"&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;travelAction&nbsp;=&nbsp;GoThroughAction&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;travelObjs&nbsp;=&nbsp;[leftDoor,&nbsp;rightDoor]
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;travelObjsPhrase&nbsp;=&nbsp;'of&nbsp;them'
<br>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
;
<br>

<br>
+&nbsp;slStairsDown&nbsp;:&nbsp;StairwayDown&nbsp;-&gt;eastShoreUp&nbsp;'flight&nbsp;stone&nbsp;down&nbsp;stairs/steps'&nbsp;
<br>
&nbsp;&nbsp;&nbsp;'stone&nbsp;steps&nbsp;down'
<br>
&nbsp;&nbsp;isPlural&nbsp;=&nbsp;true
<br>
;
<br>

<br>
+&nbsp;leftDoor&nbsp;:&nbsp;Door&nbsp;'left&nbsp;hand&nbsp;door*doors'&nbsp;'left&nbsp;hand&nbsp;door'
<br>
;
<br>

<br>
+&nbsp;rightDoor&nbsp;:&nbsp;Door&nbsp;'right&nbsp;hand&nbsp;door*doors'&nbsp;'right&nbsp;hand&nbsp;door'
<br>
;
<br>

<br>
library&nbsp;:&nbsp;Room&nbsp;'Library'&nbsp;'the&nbsp;library'
<br>
&nbsp;&nbsp;The&nbsp;library&nbsp;is&nbsp;a&nbsp;long&nbsp;rectangular&nbsp;room,&nbsp;with&nbsp;bookshelves&nbsp;all&nbsp;around.&nbsp;
<br>
&nbsp;&nbsp;It&nbsp;looks,&nbsp;however,&nbsp;as&nbsp;if&nbsp;the&nbsp;shelves&nbsp;have&nbsp;been&nbsp;raided,&nbsp;for&nbsp;they&nbsp;are
<br>
&nbsp;&nbsp;all&nbsp;bare,&nbsp;apart&nbsp;from&nbsp;a&nbsp;glass&nbsp;fronted-shelf&nbsp;at&nbsp;the&nbsp;southern&nbsp;end&nbsp;of
<br>
&nbsp;&nbsp;the&nbsp;room.&nbsp;Not&nbsp;far&nbsp;from&nbsp;this&nbsp;shelf&nbsp;is&nbsp;an&nbsp;electrical&nbsp;socket&nbsp;in&nbsp;the&nbsp;wall.&nbsp;"
<br>
&nbsp;&nbsp;north&nbsp;=&nbsp;libraryDoor
<br>
&nbsp;&nbsp;out&nbsp;asExit(north)
<br>
&nbsp;&nbsp;
<br>
;
<br>

<br>
+&nbsp;libraryDoor&nbsp;:&nbsp;Door&nbsp;-&gt;&nbsp;rightDoor&nbsp;'door'&nbsp;'door'
<br>
&nbsp;&nbsp;
<br>
;
<br>

<br>
+&nbsp;Decoration&nbsp;'(book)&nbsp;shelves/bookshelves'&nbsp;'bookshelves'
<br>
&nbsp;&nbsp;"The&nbsp;bookshelves&nbsp;are&nbsp;all&nbsp;bare,&nbsp;apart&nbsp;from&nbsp;the&nbsp;glass-fronted&nbsp;shelf
<br>
&nbsp;&nbsp;&nbsp;at&nbsp;the&nbsp;end.&nbsp;"
<br>
;
<br>
&nbsp;
<br>
+&nbsp;glassShelf&nbsp;:&nbsp;IndirectLockable,&nbsp;OpenableContainer,&nbsp;Fixture&nbsp;
<br>
&nbsp;&nbsp;&nbsp;'glass&nbsp;fronted&nbsp;glass-fronted&nbsp;(book)&nbsp;shelf/front'&nbsp;'glass-fronted&nbsp;shelf'
<br>
&nbsp;&nbsp;"The&nbsp;glass-fronted&nbsp;shelf&nbsp;is&nbsp;effectively&nbsp;a&nbsp;container&nbsp;for&nbsp;one&nbsp;or&nbsp;two&nbsp;books.&nbsp;
<br>
&nbsp;&nbsp;A&nbsp;small&nbsp;brown&nbsp;button&nbsp;is&nbsp;mounted&nbsp;on&nbsp;one&nbsp;side,&nbsp;next&nbsp;to&nbsp;an&nbsp;electrical&nbsp;inlet.&nbsp;"
<br>
&nbsp;&nbsp;material&nbsp;=&nbsp;glass&nbsp;&nbsp;
<br>
&nbsp;&nbsp;powerOn&nbsp;=&nbsp;(powerCable.isAttachedTo(glassSocket)&nbsp;&amp;&amp;&nbsp;powerCable.isAttachedTo(librarySocket))
<br>
&nbsp;&nbsp;iobjFor(PutOn)&nbsp;asIobjFor(PutIn)
<br>
&nbsp;&nbsp;afterAction()
<br>
&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;if(gActionIs(AttachTo)&nbsp;&amp;&amp;&nbsp;powerOn&nbsp;&amp;&amp;&nbsp;!isLit)
<br>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"A&nbsp;light&nbsp;comes&nbsp;on&nbsp;inside&nbsp;the&nbsp;glass-fronted&nbsp;shelf.&nbsp;";&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;isLit&nbsp;=&nbsp;true;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;&nbsp;&nbsp;if(gActionIs(DetachFrom)&nbsp;&amp;&amp;&nbsp;!powerOn&nbsp;&amp;&amp;&nbsp;isLit)
<br>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The&nbsp;light&nbsp;in&nbsp;the&nbsp;glass-fronted&nbsp;shelf&nbsp;goes&nbsp;out.&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;isLit&nbsp;=&nbsp;nil;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;}&nbsp;&nbsp;
<br>
&nbsp;&nbsp;isLit&nbsp;=&nbsp;nil
<br>
&nbsp;&nbsp;brightness&nbsp;=&nbsp;(isLit&nbsp;?&nbsp;3&nbsp;:&nbsp;0)
<br>
;
<br>

<br>
+&nbsp;NameAsOther,&nbsp;SecretFixture
<br>
&nbsp;&nbsp;targetObj&nbsp;=&nbsp;glassShelf
<br>
;
<br>

<br>
++&nbsp;Button,&nbsp;Component&nbsp;'small&nbsp;brown&nbsp;button'&nbsp;'small&nbsp;brown&nbsp;button'
<br>
&nbsp;&nbsp;dobjFor(Push)
<br>
&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;action()
<br>
&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;if(glassShelf.powerOn)
<br>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"A&nbsp;small&nbsp;click&nbsp;comes&nbsp;from&nbsp;the&nbsp;glass-fronted&nbsp;shelf.&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glassShelf.makeLocked(!glassShelf.isLocked);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;&nbsp;&nbsp;else
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Nothing&nbsp;happens.&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;}&nbsp;
<br>
;
<br>

<br>
++&nbsp;glassSocket&nbsp;:&nbsp;PlugAttachable,&nbsp;Attachable,&nbsp;Component&nbsp;'electrical&nbsp;inlet'
<br>
&nbsp;&nbsp;&nbsp;'electrical&nbsp;inlet'
<br>
&nbsp;&nbsp;&nbsp;"The&nbsp;electrical&nbsp;inlet&nbsp;is&nbsp;mounted&nbsp;next&nbsp;to&nbsp;the&nbsp;brown&nbsp;button&nbsp;on&nbsp;the
<br>
&nbsp;&nbsp;&nbsp;&nbsp;side&nbsp;of&nbsp;the&nbsp;glass-fronted&nbsp;shelf.&nbsp;"
<br>
;
<br>

<br>
+&nbsp;librarySocket&nbsp;:&nbsp;PlugAttachable,&nbsp;Attachable,&nbsp;Fixture&nbsp;'electrical&nbsp;(wall)&nbsp;socket'
<br>
&nbsp;&nbsp;&nbsp;'wall&nbsp;socket'
<br>
&nbsp;&nbsp;"The&nbsp;electrical&nbsp;socket&nbsp;is&nbsp;mounted&nbsp;on&nbsp;the&nbsp;wall,&nbsp;a&nbsp;couple&nbsp;of&nbsp;inches
<br>
&nbsp;&nbsp;&nbsp;up&nbsp;from&nbsp;the&nbsp;floor.&nbsp;It's&nbsp;just&nbsp;a&nbsp;standard&nbsp;socket.&nbsp;"
<br>
;
<br>

<br>
+&nbsp;stool&nbsp;:&nbsp;Chair&nbsp;'reading&nbsp;stool'&nbsp;'reading&nbsp;stool'
<br>
&nbsp;&nbsp;"It's&nbsp;a&nbsp;plain&nbsp;wooden&nbsp;stool,&nbsp;without&nbsp;a&nbsp;back.&nbsp;"
<br>
&nbsp;&nbsp;initSpecialDesc&nbsp;=&nbsp;"A&nbsp;plain&nbsp;wooden&nbsp;stool&nbsp;stands&nbsp;in&nbsp;the&nbsp;middle&nbsp;of&nbsp;the&nbsp;room.&nbsp;"
<br>
;
<br>

<br>
storeRoom&nbsp;:&nbsp;DarkRoom&nbsp;'Store&nbsp;Room'&nbsp;'the&nbsp;store&nbsp;room'
<br>
&nbsp;&nbsp;"The&nbsp;storeroom&nbsp;is&nbsp;completely&nbsp;bare&nbsp;apart&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;a&nbsp;cabinet&nbsp;mounted&nbsp;on&nbsp;one&nbsp;wall.&nbsp;"
<br>
&nbsp;&nbsp;
<br>
&nbsp;&nbsp;north&nbsp;=&nbsp;storeRoomDoor
<br>
&nbsp;&nbsp;out&nbsp;asExit(north)
<br>
;
<br>

<br>
+&nbsp;storeRoomDoor&nbsp;:&nbsp;Door&nbsp;-&gt;leftDoor&nbsp;'door'&nbsp;'door'
<br>
;
<br>

<br>
+&nbsp;storeRoomCabinet&nbsp;:&nbsp;OutOfReach,&nbsp;OpenableContainer,&nbsp;Fixture
<br>
&nbsp;&nbsp;'cabinet'&nbsp;'cabinet'
<br>
&nbsp;&nbsp;"The&nbsp;cabinet&nbsp;is&nbsp;mounted&nbsp;high&nbsp;up&nbsp;on&nbsp;the&nbsp;west&nbsp;wall.&nbsp;"
<br>
&nbsp;&nbsp;canObjReachContents(obj)&nbsp;
<br>
&nbsp;&nbsp;{&nbsp;return&nbsp;obj.location.ofKind(Chair);&nbsp;}
<br>

<br>
;
<br>

<br>
++&nbsp;powerCable&nbsp;:&nbsp;PlugAttachable,&nbsp;Attachable,&nbsp;Thing&nbsp;
<br>
&nbsp;&nbsp;&nbsp;'thick&nbsp;black&nbsp;power&nbsp;cable/cord/lead/plugs'&nbsp;'black&nbsp;cable'
<br>
&nbsp;&nbsp;&nbsp;"It's&nbsp;a&nbsp;thick&nbsp;black&nbsp;power&nbsp;cable,&nbsp;about&nbsp;four&nbsp;feet&nbsp;long,&nbsp;with
<br>
&nbsp;&nbsp;&nbsp;&nbsp;plugs&nbsp;both&nbsp;ends.&nbsp;"
<br>
&nbsp;&nbsp;bulk&nbsp;=&nbsp;2&nbsp;
<br>
&nbsp;&nbsp;canAttachTo(obj)&nbsp;
<br>
&nbsp;&nbsp;&nbsp;{return&nbsp;obj&nbsp;is&nbsp;in&nbsp;(socket,&nbsp;vendingMachine,&nbsp;<b>librarySocket,&nbsp;glassSocket)</b>;&nbsp;}
<br>
&nbsp;&nbsp;travelWhileAttached&nbsp;(movedObj,&nbsp;traveler,&nbsp;connector)
<br>
&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;if(movedObj==self)
<br>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foreach(local&nbsp;cur&nbsp;in&nbsp;attachedObjects)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tryImplicitAction(DetachFrom,&nbsp;self,&nbsp;cur);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;}
<br>
;&nbsp;&nbsp;&nbsp;
<br>
</font><font face="Arial" size="2" color="#000000">
<br>
Note that this is the same power cable we defined before: we've simply moved it to a new initial location and added a couple of items to the list of things it can be attached to.
<br>
</font></font>

</body></html>
