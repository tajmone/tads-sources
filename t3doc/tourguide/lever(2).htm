<html><head><meta name="generator" content="Help & Manual 2.7.0"><title>Lever (2)</title><meta name="keywords" content="Lever,makePulled,maybeRemapTo"></meta></head>
<body bgcolor="#FFFFFF">
<table width="100%" border="0" cellspacing="0" cellpadding="3" bgcolor="#C0C0C0"><tr><td align="left">
<font face="Arial" size="3" color="#000000"><b>Lever (2)
<br>
</b></font>

</td><td align="right"><font face="Arial" size="2"><a href="switch.htm">[Previous]</a> <a href="generalintroduction.htm">[Main]</a> <a href="anotherlock.htm">[Next]</a></font></td></tr></table><br>

<font face="Arial" size="2" color="#000000">In order to collect the mercury that spits from the second switch in the space station and insert it into the fluid link, the player will need to use the syringe found in the first-aid kit. To fill and empty the syringe requires pulling and pushing its plunger, which makes its plunger a good candidate to be yet another Lever. To do this we need to make substantial changes to the syringe object and then add the plunger as a component:
<br>

<br>
<font face="Courier New" size="2" color="#000000">++&nbsp;syringe:&nbsp;Thing&nbsp;'syringe/needle'&nbsp;'syringe'
<br>
&nbsp;&nbsp;"The&nbsp;syringe&nbsp;is&nbsp;a&nbsp;long&nbsp;plastic&nbsp;tube&nbsp;with&nbsp;a&nbsp;needle&nbsp;at&nbsp;one&nbsp;end&nbsp;and&nbsp;a&nbsp;plunger&nbsp;at&nbsp;the
<br>
&nbsp;&nbsp;other.&nbsp;It&nbsp;is&nbsp;&lt;&lt;fluid==nil&nbsp;?&nbsp;'empty'&nbsp;:&nbsp;'full&nbsp;of&nbsp;'+&nbsp;fluid.name&gt;&gt;.&nbsp;"
<br>
&nbsp;&nbsp;fill(liquid)
<br>
&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;fluid&nbsp;=&nbsp;liquid;
<br>
&nbsp;&nbsp;}&nbsp;&nbsp;
<br>
&nbsp;&nbsp;fluid&nbsp;=&nbsp;nil
<br>
;
<br>

<br>
+++&nbsp;plunger&nbsp;:&nbsp;Lever,&nbsp;Component&nbsp;'plunger/knob'&nbsp;'plunger'
<br>
&nbsp;&nbsp;"It's&nbsp;a&nbsp;small&nbsp;piece&nbsp;of&nbsp;white&nbsp;plastic&nbsp;with&nbsp;a&nbsp;round&nbsp;knob.&nbsp;"
<br>
&nbsp;&nbsp;makePulled(pulled)
<br>
&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;if(pulled&nbsp;&amp;&amp;&nbsp;syringe.isIn(mercury))
<br>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;syringe.fill(mercury);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The&nbsp;plunger&nbsp;pulls&nbsp;the&nbsp;silvery&nbsp;liquid&nbsp;into&nbsp;the&nbsp;syringe.&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;syringe.moveInto(gActor);&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;if(!pulled&nbsp;&amp;&amp;&nbsp;syringe.fluid&nbsp;!=&nbsp;nil)
<br>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"A&nbsp;jet&nbsp;of&nbsp;&lt;&lt;syringe.fluid.name&gt;&gt;&nbsp;spurts&nbsp;from&nbsp;the&nbsp;needle";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(syringe.isIn(tinyHole)&nbsp;&amp;&amp;&nbsp;syringe.fluid&nbsp;==&nbsp;mercury)
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;",&nbsp;filling&nbsp;the&nbsp;fluid&nbsp;link";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fluidLink.full&nbsp;=&nbsp;true;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;".&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;syringe.fill(nil);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;inherited(pulled);
<br>
&nbsp;&nbsp;}
<br>
;
<br>
</font><font face="Arial" size="2" color="#000000">
<br>
Although the syringe is only meant to be filled with mercury, we allow for the possibility of handling other fluids by giving it a fluid property to describe what particular fluid, if any, it contains. Most of the complicated handling goes in the makePulled method of the plunger object, which we add as a component of the syringe. Here, we check to ensure that mercury is indeed what the syringe contains, if indeed it contains anything, but only really add handling for that case. In default of adding handling for a FillWith command (which we'll leave as an exercise for the reader) we make the player first PUT SYRINGE (or NEEDLE) IN MERCURY and then PULL PLUNGER to fill the syringe, but just to make things a bit easier for the player we make the handling of PULL PLUNGER move the syringe back into the player's grasp (since PUT NEEDLE IN MERCURY will have effectively dropped it from the player's grasp, and this may not be immediately obvious to the player, who could all too easily walk off after filling the syringe without realizing that it was being left behind).
<br>

<br>
It will be apparent from syringe.makePulled that in order to fill the fluid link from the syringe we need first to insert the syringe in some tiny hole. This will be a hole at one end of the fluid link, a hole only accessible, or visible, when the link is removed from its compartment. At the same time, we have to ensure that the player cannot replace the link in its compartment while the syringe is still sticking out of the hole, so we need to amend both the compartment and the link, as well as adding a tinyHole object:
<br>

<br>

<br>
</font><font face="Courier New" size="2" color="#000000">+&nbsp;tardisPanelCompartment&nbsp;:&nbsp;PresentLater,&nbsp;RestrictedContainer,&nbsp;Fixture&nbsp;'shallow&nbsp;compartment'
<br>
&nbsp;&nbsp;&nbsp;'shallow&nbsp;compartment'&nbsp;"It's&nbsp;about&nbsp;four&nbsp;inches&nbsp;deep.&nbsp;"
<br>
&nbsp;&nbsp;validContents&nbsp;=&nbsp;[fluidLink]&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;plKey&nbsp;=&nbsp;'tardis'
<br>
&nbsp;&nbsp;<b>notifyInsert(obj,&nbsp;newContainer)
<br>
&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;if(newContainer&nbsp;==&nbsp;self&nbsp;&amp;&amp;&nbsp;syringe.isIn(tinyHole))
<br>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"You&nbsp;can't&nbsp;insert&nbsp;&lt;&lt;obj.theName&gt;&gt;&nbsp;into&nbsp;&lt;&lt;theName&gt;&gt;&nbsp;while&nbsp;the&nbsp;syringe&nbsp;is
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sticking&nbsp;out&nbsp;of&nbsp;it.&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;}</b>
<br>
;
<br>

<br>
++&nbsp;fluidLink&nbsp;:&nbsp;Thing&nbsp;'fluid&nbsp;link'&nbsp;'fluid&nbsp;link'
<br>
&nbsp;&nbsp;&nbsp;<b>"It's&nbsp;a&nbsp;long&nbsp;transparent&nbsp;tube,&nbsp;&lt;&lt;full&nbsp;?&nbsp;'full&nbsp;of&nbsp;mercury'&nbsp;:&nbsp;'with&nbsp;just&nbsp;a&nbsp;bit&nbsp;of
<br>
&nbsp;&nbsp;&nbsp;&nbsp;mercury&nbsp;in&nbsp;it'&gt;&gt;.&nbsp;Both&nbsp;ends&nbsp;are&nbsp;capped&nbsp;with&nbsp;some&nbsp;kind&nbsp;of&nbsp;shiny&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;metal&lt;&lt;isIn(tardisPanelCompartment)&nbsp;?&nbsp;nil&nbsp;:&nbsp;',&nbsp;and&nbsp;at&nbsp;one&nbsp;end&nbsp;is&nbsp;a&nbsp;tiny&nbsp;hole'&gt;&gt;.&nbsp;"
<br>
&nbsp;&nbsp;&nbsp;&nbsp;full&nbsp;=&nbsp;nil
<br>
&nbsp;&nbsp;&nbsp;iobjFor(PutIn)&nbsp;maybeRemapTo(tinyHole.sightPresence,&nbsp;PutIn,&nbsp;DirectObject,&nbsp;tinyHole)</b>
<br>
;
<br>

<br>
+++&nbsp;<a name="tinyhole">tinyHole&nbsp;:&nbsp;Component,&nbsp;RestrictedContainer&nbsp;'tiny&nbsp;hole'&nbsp;'tiny&nbsp;hole'
<br>
&nbsp;&nbsp;"The&nbsp;tiny&nbsp;hole&nbsp;in&nbsp;the&nbsp;end&nbsp;cap&nbsp;of&nbsp;the&nbsp;fluid&nbsp;link&nbsp;is&nbsp;protected&nbsp;by&nbsp;some&nbsp;kind&nbsp;of&nbsp;membrane
<br>
&nbsp;&nbsp;&nbsp;to&nbsp;prevent&nbsp;the&nbsp;contents&nbsp;escaping.&nbsp;"
<br>
&nbsp;&nbsp;&nbsp;validContents&nbsp;=&nbsp;[syringe]
<br>
&nbsp;&nbsp;&nbsp;sightPresence&nbsp;=&nbsp;(!fluidLink.isIn(tardisPanelCompartment))
<br>
;
<br>
</font><font face="Arial" size="2" color="#000000">
<br>
The overridden tardisPanelComponent.notifyInsert method does the job of preventing an attempt to return the fluid link to its compartment with the syringe still sticking in it. We change the description of the fluid link so it describes whether it is full or not and mentions the hole at its end provided the hole is visible, and we change the full property to be nil to start with. It is possible that the player may try to PUT SYRINGE IN FLUID LINK instead of PUT SYRINGE IN HOLE, and we allow this by remapping the former command to the latter provided the hole is visible. We do this with the maybeRemapTo macro, which carries out the remapping only if its first argument evaluates to true. Finally, we make the tinyHole visible or not by overriding its sightPresence property to be true if and only if the link is out of its compartment. In a case like this (where we want something descended from NonPortable to appear and disappear), this is probably the easiest and most efficient way of achieving the effect.
<br>

<br>
If you now recompile and test the game, you should not only be able to refill the fluid link, but you should find that until you do so, setting the slider on the Tardis control console to different values has no effect on the Tardis's destination. Since filling the fluid link is a bit of a rigmarole to go through when testing, you might want to add the following cheating short cut (for testing purpose) in your debug code (between #ifdef __DEBUG and #endif):
<br>

<br>
</font><font face="Courier New" size="2" color="#000000">DefineIAction(FillFluidLink)
<br>
&nbsp;&nbsp;execAction
<br>
&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;fluidLink.full&nbsp;=&nbsp;true;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;"Well,&nbsp;even&nbsp;if&nbsp;the&nbsp;fluid&nbsp;link&nbsp;wasn't&nbsp;full&nbsp;before,&nbsp;it&nbsp;sure&nbsp;is&nbsp;now!&nbsp;";
<br>
&nbsp;&nbsp;}
<br>
;
<br>

<br>
VerbRule(FillFluidLink)
<br>
&nbsp;&nbsp;('fill'&nbsp;'fluid'&nbsp;'link')&nbsp;|&nbsp;'ffl'
<br>
&nbsp;&nbsp;:&nbsp;FillFluidLinkAction&nbsp;
<br>
&nbsp;&nbsp;verbPhrase&nbsp;=&nbsp;'fill/filling&nbsp;the&nbsp;fluid&nbsp;link'
<br>
;
<br>
</font><font face="Arial" size="2" color="#000000">
<br>

<br>
</font></font>

</body></html>
