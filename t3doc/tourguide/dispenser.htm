<html><head><meta name="generator" content="Help & Manual 2.7.0"><title>Dispenser</title><meta name="keywords" content="Dispenser,Dispensable,new,dyanmic object creation,myItemClass,canReturnItem,notifyRemove,isEquivalent,myDispenser,isListedInContents"></meta></head>
<body bgcolor="#FFFFFF">
<table width="100%" border="0" cellspacing="0" cellpadding="3" bgcolor="#C0C0C0"><tr><td align="left">
<font face="Arial" size="3" color="#000000"><b>Dispenser : <a href="thing-introduction.htm">Thing</a>
<br>
</b></font>

</td><td align="right"><font face="Arial" size="2"><a href="restrictedcontainer.htm">[Previous]</a> <a href="generalintroduction.htm">[Main]</a> <a href="stretchycontainer.htm">[Next]</a></font></td></tr></table><br>

<font face="Arial" size="2" color="#000000">Later in the game the player will use a candle to start exploring the dark areas. In theory the candle could burn out before the player succeeds in finding an alternative light source, thus rendering the game unwinnable. It would thus be desirable for the player to have a large supply of candles available. For this we'll create a box that dispenses candles - a Dispenser object. In fact the Dispenser doesn't handle much apart from restricting what can be put in it, so this may not be a terribly good example, since we'll have to do most of the work in our own code.
<br>

<br>
The standard Dispensable properties we override on this object will be <b>myItemClass</b> and <b>canReturnItem</b>. We shall shortly create a RedCandle class to be the item dispensed from this box, so we set myItemClass = RedCandle. If this were a matchbook we could not return matches to it after we had torn them off, but there seems no reason why we should not return candles to the box, so we set canReturnItem to true.
<br>

<br>
We don't want to create a whole lot of red candles that will never be used - the idea is to allow the player to obtain another one if the one he or she is using burns down before an alternative light source is found. We shall therefore create new candles dynamically on demand; we do this in the notifyRemove method. However, to avoid creating candles needlessly, we only create a new one if there's less than two left in the box. Again, we don't want the player to be able to go on obtaining candles <i>ad infinitum</i> so we set a maximum (in our custom property maxCandlesToCreate) and keep a count of the number created (in the custom property candlesCreated). Provided it's okay to create another candle, we do so using the dynamic object creation syntax (new RedCandle) and move it into the box. The definition of the candleBox then looks like this:
<br>

<br>
<font face="Courier New" size="2" color="#000000">candleBox&nbsp;:&nbsp;Dispenser&nbsp;'large&nbsp;green&nbsp;box'&nbsp;'large&nbsp;green&nbsp;box'&nbsp;@secretPassage
<br>
&nbsp;&nbsp;&nbsp;desc()
<br>
&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The&nbsp;box&nbsp;is&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(contents.length&nbsp;&gt;&nbsp;10&nbsp;||&nbsp;candlesCreated&nbsp;&lt;&nbsp;maxCandlesToCreate/2&nbsp;)
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"full&nbsp;of&nbsp;red&nbsp;candles.&nbsp;"&nbsp;&nbsp;;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;if&nbsp;(contents.length&nbsp;&lt;&nbsp;1&nbsp;&amp;&amp;&nbsp;candlesCreated&nbsp;==&nbsp;maxCandlesToCreate)
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"empty.&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;if(candlesCreated&nbsp;&lt;&nbsp;(3&nbsp;*&nbsp;maxCandlesToCreate)/4)
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"is&nbsp;about&nbsp;half&nbsp;full&nbsp;of&nbsp;red&nbsp;candles.&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"is&nbsp;running&nbsp;out&nbsp;of&nbsp;red&nbsp;candles.&nbsp;";&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;&nbsp;myItemClass&nbsp;=&nbsp;RedCandle
<br>
&nbsp;&nbsp;&nbsp;canReturnItem&nbsp;=&nbsp;true
<br>
&nbsp;&nbsp;&nbsp;initSpecialDesc&nbsp;=&nbsp;"A&nbsp;large&nbsp;green&nbsp;box&nbsp;sits&nbsp;by&nbsp;the&nbsp;wall.&nbsp;"
<br>
&nbsp;&nbsp;&nbsp;notifyRemove(obj)
<br>
&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(contents.length&nbsp;&lt;&nbsp;2&nbsp;&amp;&amp;&nbsp;candlesCreated&nbsp;&lt;&nbsp;maxCandlesToCreate)
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;local&nbsp;cur&nbsp;=&nbsp;new&nbsp;RedCandle;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;candlesCreated++;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cur.moveInto(self);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;&nbsp;candlesCreated&nbsp;=&nbsp;0
<br>
&nbsp;&nbsp;&nbsp;maxCandlesToCreate&nbsp;=&nbsp;40
<br>
&nbsp;&nbsp;&nbsp;weight&nbsp;=&nbsp;(2&nbsp;+&nbsp;maxCandlesToCreate&nbsp;-&nbsp;candlesCreated)
<br>
&nbsp;&nbsp;&nbsp;bulk&nbsp;=&nbsp;5
<br>
&nbsp;&nbsp;&nbsp;dobjFor(LookIn)&nbsp;asDobjFor(Examine)
<br>
;</font><font face="Arial" size="2" color="#000000">
<br>

<br>
The other things we have done to the candleBox is to give it a fairly complex description method which gives a suitable but vague description of its contents, and a calculation of its weight based on the number of candles there are left to create (which must notionally still be in the box). To put an initial red candle in the box we need simply to add:
<br>

<br>
</font><font face="Courier New" size="2" color="#000000">+&nbsp;RedCandle;</font><font face="Arial" size="2" color="#000000">
<br>

<br>
But then we have to implement the RedCandle class:
<br>

<br>
</font><font face="Courier New" size="2" color="#000000">class&nbsp;RedCandle&nbsp;:&nbsp;Dispensable,&nbsp;Candle&nbsp;'red&nbsp;candle*candles'&nbsp;'red&nbsp;candle'
<br>
&nbsp;&nbsp;"It's&nbsp;a&nbsp;long&nbsp;red&nbsp;candle.&nbsp;"
<br>
&nbsp;&nbsp;isEquivalent&nbsp;=&nbsp;true
<br>
&nbsp;&nbsp;isListedInContents&nbsp;=&nbsp;(!isIn(myDispenser))
<br>
&nbsp;&nbsp;myDispenser&nbsp;=&nbsp;candleBox
<br>
;
<br>
</font><font face="Arial" size="2" color="#000000">
<br>
<a href="candle.htm">Candle</a> is a library class that we'll come to presently. What needs to be noted here is that since all the red candles will be identical, we set <b>isEquivalent </b>to true on the class definition; this tells the library that all members of the RedCandle class are functionally identical and interchangeable. This allows you to (say) issue a command TAKE A CANDLE or DROP A CANDLE and have the game respond appropriately even when there are several red candles in scope. It also means that if we pick up three candles and issue an INVENTORY command, we'll be told "You are carrying three red candles" rather than "You are carrying a red candle,  a red candle and a red candle." Note that it is important to specify the *candles plural in the vocabWords property so we can issue commands like TAKE TWO CANDLES or DROP BOTH CANDLES.
<br>

<br>
We set the library <b>myDispenser</b> property to candleBox; this simply allows the parser to assume that any command other than TAKE or TAKE FROM directed at a candle is more likely to refer to a candle that's already out of the box. We make further use of this property in an overridden <b>isListedInContents</b>, which we set to nil for candles still in their original container. This is to prevent the game announcing the exact number of candles in the box, which would be a misleading number (not taking into account the new candles the box was capable of creating) and would clash with the description we have provided in candleBox.desc.
<br>
</font></font>

</body></html>
