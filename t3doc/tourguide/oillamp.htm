<html><head><meta name="generator" content="Help & Manual 2.7.0"><title>OilLamp</title><meta name="keywords" content="OilLamp,fuelLevel"></meta></head>
<body bgcolor="#FFFFFF">
<table width="100%" border="0" cellspacing="0" cellpadding="3" bgcolor="#C0C0C0"><tr><td align="left">
<font face="Arial" size="3" color="#000000"><b>OilLamp : <a href="candle.htm">Candle</a>
<br>
</b></font>

</td><td align="right"><font face="Arial" size="2"><a href="candle.htm">[Previous]</a> <a href="generalintroduction.htm">[Main]</a> <a href="matchstick+matchbook.htm">[Next]</a></font></td></tr></table><br>

<font face="Arial" size="2" color="#000000">Actually, there's no OilLamp class in the TADS 3 library, but that doesn't stop us creating an oil lamp of our own. We've deliberately made the candles rather annoying to use, so the player will need a steadier light source, even before s/he encounters the flashlight in the Tardis.
<br>

<br>
In fact, an oil lamp is virtually the same as a candle, in that when lit it gives off light, and continues to burn until extinguished by the player or until it runs out of fuel. We can therefore base our oil lamp on the Candle class. The main complication comes from the fact that, unlike a candle, an oil lamp can be refuelled, so we need to add handling for oil being poured into the lamp. We also need to provide a description that depends on the state of the lamp, and to have the lamp warn the player when it's about to go out. The last can conveniently be achieved in the burnDaemon method, which is called once every turn that the lamp is lit.
<br>

<br>
<font face="Courier New" size="2" color="#000000">oilLamp&nbsp;:&nbsp;FireSource,&nbsp;Candle&nbsp;'brass&nbsp;(oil)&nbsp;lamp'&nbsp;'brass&nbsp;oil&nbsp;lamp'&nbsp;@sack
<br>
&nbsp;&nbsp;desc()
<br>
&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;"It's&nbsp;a&nbsp;fine,&nbsp;polished&nbsp;brass&nbsp;oil&nbsp;lamp,&nbsp;in&nbsp;good&nbsp;working&nbsp;order.&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;if(isLit)
<br>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"It's&nbsp;currently&nbsp;lit";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(fuelLevel&lt;4)
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;",&nbsp;but&nbsp;the&nbsp;flame&nbsp;is&nbsp;starting&nbsp;to&nbsp;burn&nbsp;low";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;".&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;fuelLevel&nbsp;=&nbsp;20
<br>
&nbsp;&nbsp;fuelCapacity&nbsp;=&nbsp;100
<br>
&nbsp;&nbsp;burnDaemon()
<br>
&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;if(fuelLevel&nbsp;&lt;&nbsp;4&nbsp;&amp;&amp;&nbsp;fuelLevel&nbsp;&gt;&nbsp;0)
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"\nThe&nbsp;oil&nbsp;lamp&nbsp;is&nbsp;starting&nbsp;to&nbsp;burn&nbsp;low.&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;inherited;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;iobjFor(PourInto)
<br>
&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;verify()&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(fuelLevel&nbsp;==&nbsp;fuelCapacity)
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;illogicalNow('The&nbsp;oil&nbsp;lamp&nbsp;is&nbsp;already&nbsp;full.'&nbsp;);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(isLit)
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;illogicalNow('You&nbsp;can\'t&nbsp;pour&nbsp;fuel&nbsp;into&nbsp;the&nbsp;lamp&nbsp;while&nbsp;it\'s&nbsp;lit.&nbsp;');&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;&nbsp;&nbsp;check()
<br>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(gDobj.oilLevel&nbsp;==&nbsp;nil)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;failCheck('That\'s&nbsp;not&nbsp;appropriate&nbsp;fuel&nbsp;for&nbsp;an&nbsp;oil&nbsp;lamp.&nbsp;');&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;&nbsp;&nbsp;action()
<br>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;local&nbsp;fuelTransferred&nbsp;=&nbsp;min(gDobj.oilLevel,&nbsp;fuelCapacity&nbsp;-&nbsp;fuelLevel);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fuelLevel&nbsp;+=&nbsp;fuelTransferred;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gDobj.oilLevel&nbsp;-=&nbsp;fuelTransferred;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(fuelLevel&nbsp;==&nbsp;fuelCapacity)
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"You&nbsp;refill&nbsp;the&nbsp;lamp.&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"You&nbsp;pour&nbsp;some&nbsp;oil&nbsp;into&nbsp;the&nbsp;lamp.&nbsp;";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;bulk&nbsp;=&nbsp;2
<br>
&nbsp;&nbsp;weight&nbsp;=&nbsp;2&nbsp;+&nbsp;(4&nbsp;*&nbsp;fuelLevel)/fuelCapacity
<br>
;
<br>
</font><font face="Arial" size="2" color="#000000">
<br>
There's nothing<i> very</i> complicated in any of this. We include the check for fuelLevel &gt; 0 (as well as fuelLevel &lt; 4) in the overridden burnDaemon to avoid being told that the lamp is burning low after it's gone out. The two checks in verifyIobjPourInto prevent the player from filling a lamp that's already full, or pouring oil in while the lamp is lit, while checkIobjPourInto won't allow anything to be poured into the lamp from an object that hasn't got a non-nil oilLevel property. The action method then calculates the amount of oil poured in, which is the lesser of the amount of oil in the source container and the amount needed to fill the oil lamp to capacity. This quantity is then added to the fuelLevel in the lamp and deducted from the oilLevel in the source container, following which an appropriate message is displayed to describe the action. Since one might expect the weight of the oil lamp to vary with the amount of  fuel it contains, the weight property is calculated appropriately.
<br>

<br>
The obvious source for oil for the lamp is the oil can we have already defined. But to make it suitable as a source for the lamp, we almost have to redefine it totally. While we're at it, we'll also move it into the smallCave:
<br>

<br>
</font><font face="Courier New" size="2" color="#000000">oilCan&nbsp;:&nbsp;Thing&nbsp;'oil&nbsp;can/oilcan'&nbsp;'can&nbsp;of&nbsp;oil'&nbsp;@smallCave
<br>
&nbsp;&nbsp;"The&nbsp;can&nbsp;is&nbsp;&lt;&lt;howFull()&gt;&gt;.&nbsp;"
<br>
&nbsp;&nbsp;howFull()
<br>
&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;if(oilLevel&lt;1)
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"empty";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;if(oilLevel&nbsp;&lt;&nbsp;maxOilLevel/10)
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"almost&nbsp;empty";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;if(oilLevel&nbsp;&lt;&nbsp;maxOilLevel/3)
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"about&nbsp;quarter&nbsp;full";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;if(oilLevel&nbsp;&lt;&nbsp;(2*maxOilLevel)/3)
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"about&nbsp;half&nbsp;full";
<br>
&nbsp;&nbsp;&nbsp;&nbsp;else
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"more&nbsp;or&nbsp;less&nbsp;full";
<br>
&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;initSpecialDesc&nbsp;=&nbsp;"An&nbsp;old&nbsp;oil&nbsp;can&nbsp;lies&nbsp;abandoned&nbsp;on&nbsp;the&nbsp;ground.&nbsp;"
<br>
&nbsp;&nbsp;dobjFor(PourOnto)&nbsp;{&nbsp;verify()&nbsp;{&nbsp;}&nbsp;}
<br>
&nbsp;&nbsp;dobjFor(PourInto)&nbsp;
<br>
&nbsp;&nbsp;&nbsp;{&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;verify()&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(oilLevel&nbsp;&lt;&nbsp;1)&nbsp;illogicalNow('The&nbsp;oil&nbsp;can&nbsp;is&nbsp;empty.&nbsp;');
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;
<br>
&nbsp;&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;dobjFor(LookIn)&nbsp;asDobjFor(Examine)
<br>
&nbsp;&nbsp;initializeThing()
<br>
&nbsp;&nbsp;{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;inherited;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;oilLevel&nbsp;=&nbsp;maxOilLevel;
<br>
&nbsp;&nbsp;}
<br>
&nbsp;&nbsp;oilLevel&nbsp;=&nbsp;0
<br>
&nbsp;&nbsp;maxOilLevel&nbsp;=&nbsp;500
<br>
&nbsp;&nbsp;weight&nbsp;=&nbsp;1&nbsp;+&nbsp;(10&nbsp;*&nbsp;oilLevel)/maxOilLevel
<br>
;
<br>
</font><font face="Arial" size="2" color="#000000">
<br>
This is perhaps less complicated than it looks. The lengthy howFull() method merely provides a description (or rough estimate) of the amount of oil left in the can. The verifyDobjPourInto makes it illogical to pour any more oil from the lamp when it is empty. The initializeThing method makes sure the can starts off full, and once again we calculate the weight based on the amount of oil left in the can. It would probably be an unnecessary complication to add any further handling for PourOnto, since the amount of oil involved in lubricating the latch on the sailors' locker (or anything else that we may decide needs lubricating) is likely to be negligible.
<br>
</font></font>

</body></html>
